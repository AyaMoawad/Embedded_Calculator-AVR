
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00003f92  00004026  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000089  0080019e  0080019e  00004164  2**0
                  ALLOC
  3 .stab         000007a4  00000000  00000000  00004164  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00004908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000049f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000255c  00000000  00000000  00004bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adf  00000000  00000000  0000710c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000105f  00000000  00000000  00007beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  00008c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000604  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031d0  00000000  00000000  00009708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 32       	cpi	r26, 0x27	; 39
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
      8a:	0c 94 c7 1f 	jmp	0x3f8e	; 0x3f8e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitPeripherals>:
/*This is used to Set your peripherals initializations functions */
inline extern void InitPeripherals(void) 
{
	/*Don't Forget to include the Peripherals header files above*/
	/*Unless it's defined in the main and this is the last one to include !*/
	LCD_init();
      92:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <LCD_init>
	LCD_clearScreen();
      96:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <LCD_clearScreen>
	
}
      9a:	08 95       	ret

0000009c <InitPorts>:

/*This is used to Set Ports initializations*/
inline extern void InitPorts(void)
{
	
}
      9c:	08 95       	ret

0000009e <main>:
	uint8 Flag=StartPoint;/*Contains the state of the program flow*/

int main(void)
{

	InitPeripherals(); /*Initiate the LCD driver*/
      9e:	0e 94 49 00 	call	0x92	; 0x92 <InitPeripherals>

    while(1)
    {
		ResetData();
		LCD_clearScreen();
		Flag=StartPoint;
      a2:	c1 e0       	ldi	r28, 0x01	; 1

	InitPeripherals(); /*Initiate the LCD driver*/

    while(1)
    {
		ResetData();
      a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <ResetData>
		LCD_clearScreen();
      a8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <LCD_clearScreen>
		Flag=StartPoint;
      ac:	c0 93 60 00 	sts	0x0060, r28
		 while(Flag==StartPoint) GetData(); /*Don't get out until pressing equal sign*/
      b0:	0e 94 c2 00 	call	0x184	; 0x184 <GetData>
      b4:	80 91 60 00 	lds	r24, 0x0060
      b8:	81 30       	cpi	r24, 0x01	; 1
      ba:	d1 f3       	breq	.-12     	; 0xb0 <main+0x12>
		 while(Flag==AnalyzePoint) Analyze(); /*Don't get out until separating every thing correctly*/
      bc:	82 30       	cpi	r24, 0x02	; 2
      be:	31 f4       	brne	.+12     	; 0xcc <main+0x2e>
      c0:	0e 94 33 02 	call	0x466	; 0x466 <Analyze>
      c4:	80 91 60 00 	lds	r24, 0x0060
      c8:	82 30       	cpi	r24, 0x02	; 2
      ca:	d1 f3       	breq	.-12     	; 0xc0 <main+0x22>
		 while(Flag==CalculatePoint) Calculate(); /*Don't get out until calculate the value*/
      cc:	80 91 60 00 	lds	r24, 0x0060
      d0:	83 30       	cpi	r24, 0x03	; 3
      d2:	31 f4       	brne	.+12     	; 0xe0 <main+0x42>
      d4:	0e 94 2a 03 	call	0x654	; 0x654 <Calculate>
      d8:	80 91 60 00 	lds	r24, 0x0060
      dc:	83 30       	cpi	r24, 0x03	; 3
      de:	d1 f3       	breq	.-12     	; 0xd4 <main+0x36>
		 while(Flag==DisplayPoint) DisplayResult(); /*Display the result*/
      e0:	80 91 60 00 	lds	r24, 0x0060
      e4:	84 30       	cpi	r24, 0x04	; 4
      e6:	f1 f6       	brne	.-68     	; 0xa4 <main+0x6>
      e8:	0e 94 01 02 	call	0x402	; 0x402 <DisplayResult>
      ec:	80 91 60 00 	lds	r24, 0x0060
      f0:	84 30       	cpi	r24, 0x04	; 4
      f2:	c1 f6       	brne	.-80     	; 0xa4 <main+0x6>
      f4:	f9 cf       	rjmp	.-14     	; 0xe8 <main+0x4a>

000000f6 <ResetData>:
bool SignNumberFlagToConvertInt64=false; /*Communication flag between the ConvertInt64 and Analyze and
										To make a note that the number which ConvertInt64 will convert is negative*/
bool OtherNumberSign=false;/*if any operand is negative and not operand[0],the variable is set to true */

void ResetData()
{
      f6:	ec e0       	ldi	r30, 0x0C	; 12
      f8:	f2 e0       	ldi	r31, 0x02	; 2
bool FirstNumberSign=false; /*if Digits[0]=negative value which means that operand[0] is negative*/
bool SignNumberFlagToConvertInt64=false; /*Communication flag between the ConvertInt64 and Analyze and
										To make a note that the number which ConvertInt64 will convert is negative*/
bool OtherNumberSign=false;/*if any operand is negative and not operand[0],the variable is set to true */

void ResetData()
      fa:	cf 01       	movw	r24, r30
      fc:	40 96       	adiw	r24, 0x10	; 16
{
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
			Digits[index]=0;
      fe:	11 92       	st	Z+, r1
bool OtherNumberSign=false;/*if any operand is negative and not operand[0],the variable is set to true */

void ResetData()
{
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
     100:	e8 17       	cp	r30, r24
     102:	f9 07       	cpc	r31, r25
     104:	e1 f7       	brne	.-8      	; 0xfe <ResetData+0x8>
     106:	ec ea       	ldi	r30, 0xAC	; 172
     108:	f1 e0       	ldi	r31, 0x01	; 1
bool FirstNumberSign=false; /*if Digits[0]=negative value which means that operand[0] is negative*/
bool SignNumberFlagToConvertInt64=false; /*Communication flag between the ConvertInt64 and Analyze and
										To make a note that the number which ConvertInt64 will convert is negative*/
bool OtherNumberSign=false;/*if any operand is negative and not operand[0],the variable is set to true */

void ResetData()
     10a:	8c e0       	ldi	r24, 0x0C	; 12
     10c:	92 e0       	ldi	r25, 0x02	; 2
{
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
			Digits[index]=0;
	for(index=0;index<MaxNumberOfOperands;index++)
			Operands[index]=0;
     10e:	10 82       	st	Z, r1
     110:	11 82       	std	Z+1, r1	; 0x01
     112:	12 82       	std	Z+2, r1	; 0x02
     114:	13 82       	std	Z+3, r1	; 0x03
     116:	14 82       	std	Z+4, r1	; 0x04
     118:	15 82       	std	Z+5, r1	; 0x05
     11a:	16 82       	std	Z+6, r1	; 0x06
     11c:	17 82       	std	Z+7, r1	; 0x07
     11e:	38 96       	adiw	r30, 0x08	; 8
void ResetData()
{
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
			Digits[index]=0;
	for(index=0;index<MaxNumberOfOperands;index++)
     120:	e8 17       	cp	r30, r24
     122:	f9 07       	cpc	r31, r25
     124:	a1 f7       	brne	.-24     	; 0x10e <ResetData+0x18>
     126:	ec e1       	ldi	r30, 0x1C	; 28
     128:	f2 e0       	ldi	r31, 0x02	; 2
bool FirstNumberSign=false; /*if Digits[0]=negative value which means that operand[0] is negative*/
bool SignNumberFlagToConvertInt64=false; /*Communication flag between the ConvertInt64 and Analyze and
										To make a note that the number which ConvertInt64 will convert is negative*/
bool OtherNumberSign=false;/*if any operand is negative and not operand[0],the variable is set to true */

void ResetData()
     12a:	cf 01       	movw	r24, r30
     12c:	0b 96       	adiw	r24, 0x0b	; 11
	for(index=0;index<MaxNumberOfDigits;index++)
			Digits[index]=0;
	for(index=0;index<MaxNumberOfOperands;index++)
			Operands[index]=0;
	for(index=0;index<MaxNumberOfOperations;index++)
			Operations[index]=0;
     12e:	11 92       	st	Z+, r1
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
			Digits[index]=0;
	for(index=0;index<MaxNumberOfOperands;index++)
			Operands[index]=0;
	for(index=0;index<MaxNumberOfOperations;index++)
     130:	e8 17       	cp	r30, r24
     132:	f9 07       	cpc	r31, r25
     134:	e1 f7       	brne	.-8      	; 0x12e <ResetData+0x38>
			Operations[index]=0;
	OperandsCounter=0;
     136:	10 92 a3 01 	sts	0x01A3, r1
	OperationsCounter=0;
     13a:	10 92 a2 01 	sts	0x01A2, r1
	DigitsCounter=0;
     13e:	10 92 a1 01 	sts	0x01A1, r1
	Result=0;
     142:	10 92 a4 01 	sts	0x01A4, r1
     146:	10 92 a5 01 	sts	0x01A5, r1
     14a:	10 92 a6 01 	sts	0x01A6, r1
     14e:	10 92 a7 01 	sts	0x01A7, r1
     152:	10 92 a8 01 	sts	0x01A8, r1
     156:	10 92 a9 01 	sts	0x01A9, r1
     15a:	10 92 aa 01 	sts	0x01AA, r1
     15e:	10 92 ab 01 	sts	0x01AB, r1
}		
     162:	08 95       	ret

00000164 <SynchronousDisplay>:

void SynchronousDisplay(uint8 data)
{
	if(data >=0 && data<=9) LCD_Signed_Int64_ToString(data);
     164:	8a 30       	cpi	r24, 0x0A	; 10
     166:	58 f4       	brcc	.+22     	; 0x17e <SynchronousDisplay+0x1a>
     168:	28 2f       	mov	r18, r24
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	50 e0       	ldi	r21, 0x00	; 0
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_Signed_Int64_ToString>
     17c:	08 95       	ret
	else LCD_displayCharacter(data);
     17e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_displayCharacter>
     182:	08 95       	ret

00000184 <GetData>:
}

void GetData()
{
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
		{
			Flag=Reset; /*to clean what's entered before this condition,when returning into the main
			it will cleared as non of the loops in main satisfy the flag*/
			return;
		}
		Digits[DigitsCounter]=temp; /*storing any thing the user input*/
     18a:	0c e0       	ldi	r16, 0x0C	; 12
     18c:	12 e0       	ldi	r17, 0x02	; 2
{
	uint8 temp=0;/*To get into the loop for the first time and hold the value of the key pressed*/

	while(temp != EqualKey)
	{
		temp=KeyPad_getPressedKey();
     18e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <KeyPad_getPressedKey>
     192:	c8 2f       	mov	r28, r24
		if(temp==EnterKey) 
     194:	8d 30       	cpi	r24, 0x0D	; 13
     196:	19 f4       	brne	.+6      	; 0x19e <GetData+0x1a>
		{
			Flag=Reset; /*to clean what's entered before this condition,when returning into the main
     198:	10 92 60 00 	sts	0x0060, r1
			it will cleared as non of the loops in main satisfy the flag*/
			return;
     19c:	1c c0       	rjmp	.+56     	; 0x1d6 <GetData+0x52>
		}
		Digits[DigitsCounter]=temp; /*storing any thing the user input*/
     19e:	80 91 a1 01 	lds	r24, 0x01A1
     1a2:	f8 01       	movw	r30, r16
     1a4:	e8 0f       	add	r30, r24
     1a6:	f1 1d       	adc	r31, r1
     1a8:	c0 83       	st	Z, r28
		SynchronousDisplay(Digits[DigitsCounter]);
     1aa:	8c 2f       	mov	r24, r28
     1ac:	0e 94 b2 00 	call	0x164	; 0x164 <SynchronousDisplay>
		DigitsCounter++;
     1b0:	80 91 a1 01 	lds	r24, 0x01A1
     1b4:	8f 5f       	subi	r24, 0xFF	; 255
     1b6:	80 93 a1 01 	sts	0x01A1, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ba:	8f e5       	ldi	r24, 0x5F	; 95
     1bc:	9a ee       	ldi	r25, 0xEA	; 234
     1be:	a0 e0       	ldi	r26, 0x00	; 0
     1c0:	81 50       	subi	r24, 0x01	; 1
     1c2:	90 40       	sbci	r25, 0x00	; 0
     1c4:	a0 40       	sbci	r26, 0x00	; 0
     1c6:	e1 f7       	brne	.-8      	; 0x1c0 <GetData+0x3c>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <GetData+0x46>
     1ca:	00 00       	nop

void GetData()
{
	uint8 temp=0;/*To get into the loop for the first time and hold the value of the key pressed*/

	while(temp != EqualKey)
     1cc:	cd 33       	cpi	r28, 0x3D	; 61
     1ce:	f9 f6       	brne	.-66     	; 0x18e <GetData+0xa>
		SynchronousDisplay(Digits[DigitsCounter]);
		DigitsCounter++;
		_delay_ms(300);	/*delay time between each press */
	}
	
	Flag=AnalyzePoint; /*to next step when pressing the equal key*/
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	80 93 60 00 	sts	0x0060, r24
	
}
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	08 95       	ret

000001de <ConvertToInt64>:


sint64 ConvertToInt64(uint8 * ptr,uint8 len)
{
     1de:	2f 92       	push	r2
     1e0:	3f 92       	push	r3
     1e2:	4f 92       	push	r4
     1e4:	5f 92       	push	r5
     1e6:	6f 92       	push	r6
     1e8:	7f 92       	push	r7
     1ea:	8f 92       	push	r8
     1ec:	9f 92       	push	r9
     1ee:	af 92       	push	r10
     1f0:	bf 92       	push	r11
     1f2:	cf 92       	push	r12
     1f4:	df 92       	push	r13
     1f6:	ef 92       	push	r14
     1f8:	ff 92       	push	r15
     1fa:	0f 93       	push	r16
     1fc:	1f 93       	push	r17
     1fe:	cf 93       	push	r28
     200:	df 93       	push	r29
     202:	00 d0       	rcall	.+0      	; 0x204 <ConvertToInt64+0x26>
     204:	0f 92       	push	r0
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	26 2e       	mov	r2, r22
	uint8 index;
	sint64 value=0;/*the value which will be returned*/
	bool Negative =false;/*If the number is negative*/

	if(SignNumberFlagToConvertInt64) { /*If negative*/
     20c:	20 91 9f 01 	lds	r18, 0x019F
     210:	22 23       	and	r18, r18
     212:	29 f0       	breq	.+10     	; 0x21e <ConvertToInt64+0x40>
		Negative=true;
		SignNumberFlagToConvertInt64=false;/*Remember it's a critical section,so should be disabled again*/
     214:	10 92 9f 01 	sts	0x019F, r1
	uint8 index;
	sint64 value=0;/*the value which will be returned*/
	bool Negative =false;/*If the number is negative*/

	if(SignNumberFlagToConvertInt64) { /*If negative*/
		Negative=true;
     218:	21 e0       	ldi	r18, 0x01	; 1
     21a:	2b 83       	std	Y+3, r18	; 0x03
     21c:	01 c0       	rjmp	.+2      	; 0x220 <ConvertToInt64+0x42>

sint64 ConvertToInt64(uint8 * ptr,uint8 len)
{
	uint8 index;
	sint64 value=0;/*the value which will be returned*/
	bool Negative =false;/*If the number is negative*/
     21e:	1b 82       	std	Y+3, r1	; 0x03

	if(SignNumberFlagToConvertInt64) { /*If negative*/
		Negative=true;
		SignNumberFlagToConvertInt64=false;/*Remember it's a critical section,so should be disabled again*/
	}		
	for(index=0;index<len;index++)
     220:	22 20       	and	r2, r2
     222:	09 f4       	brne	.+2      	; 0x226 <ConvertToInt64+0x48>
     224:	6f c0       	rjmp	.+222    	; 0x304 <ConvertToInt64+0x126>
	Flag=AnalyzePoint; /*to next step when pressing the equal key*/
	
}


sint64 ConvertToInt64(uint8 * ptr,uint8 len)
     226:	fc 01       	movw	r30, r24
     228:	e2 0d       	add	r30, r2
     22a:	f1 1d       	adc	r31, r1
     22c:	fa 83       	std	Y+2, r31	; 0x02
     22e:	e9 83       	std	Y+1, r30	; 0x01
{
	uint8 index;
	sint64 value=0;/*the value which will be returned*/
     230:	99 24       	eor	r9, r9
     232:	bb 24       	eor	r11, r11
     234:	aa 24       	eor	r10, r10
     236:	77 24       	eor	r7, r7
     238:	66 24       	eor	r6, r6
     23a:	55 24       	eor	r5, r5
     23c:	44 24       	eor	r4, r4
     23e:	33 24       	eor	r3, r3

	if(SignNumberFlagToConvertInt64) { /*If negative*/
		Negative=true;
		SignNumberFlagToConvertInt64=false;/*Remember it's a critical section,so should be disabled again*/
	}		
	for(index=0;index<len;index++)
     240:	88 24       	eor	r8, r8
	{
		value+=ptr[len-index-1]*powerOf(10,index);/*Math basics*/
     242:	e9 81       	ldd	r30, Y+1	; 0x01
     244:	fa 81       	ldd	r31, Y+2	; 0x02
     246:	c2 90       	ld	r12, -Z
     248:	fa 83       	std	Y+2, r31	; 0x02
     24a:	e9 83       	std	Y+1, r30	; 0x01
     24c:	dd 24       	eor	r13, r13
     24e:	ee 24       	eor	r14, r14
     250:	ff 24       	eor	r15, r15
     252:	8a e0       	ldi	r24, 0x0A	; 10
     254:	68 2d       	mov	r22, r8
     256:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <powerOf>
     25a:	9b 01       	movw	r18, r22
     25c:	ac 01       	movw	r20, r24
     25e:	c7 01       	movw	r24, r14
     260:	b6 01       	movw	r22, r12
     262:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
     266:	8b 01       	movw	r16, r22
     268:	9c 01       	movw	r18, r24
     26a:	e9 2d       	mov	r30, r9
     26c:	e0 0f       	add	r30, r16
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	e9 15       	cp	r30, r9
     272:	08 f0       	brcs	.+2      	; 0x276 <ConvertToInt64+0x98>
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	9b 2d       	mov	r25, r11
     278:	91 0f       	add	r25, r17
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	9b 15       	cp	r25, r11
     27e:	08 f0       	brcs	.+2      	; 0x282 <ConvertToInt64+0xa4>
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	bf 2e       	mov	r11, r31
     284:	b9 0e       	add	r11, r25
     286:	f1 e0       	ldi	r31, 0x01	; 1
     288:	b9 16       	cp	r11, r25
     28a:	08 f0       	brcs	.+2      	; 0x28e <ConvertToInt64+0xb0>
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	8f 2b       	or	r24, r31
     290:	fa 2d       	mov	r31, r10
     292:	f2 0f       	add	r31, r18
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	fa 15       	cp	r31, r10
     298:	08 f0       	brcs	.+2      	; 0x29c <ConvertToInt64+0xbe>
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	a8 2e       	mov	r10, r24
     29e:	af 0e       	add	r10, r31
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	af 16       	cp	r10, r31
     2a4:	08 f0       	brcs	.+2      	; 0x2a8 <ConvertToInt64+0xca>
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	98 2b       	or	r25, r24
     2aa:	27 2d       	mov	r18, r7
     2ac:	23 0f       	add	r18, r19
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	27 15       	cp	r18, r7
     2b2:	08 f0       	brcs	.+2      	; 0x2b6 <ConvertToInt64+0xd8>
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	79 2e       	mov	r7, r25
     2b8:	72 0e       	add	r7, r18
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	72 16       	cp	r7, r18
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <ConvertToInt64+0xe4>
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	89 2b       	or	r24, r25
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	86 0d       	add	r24, r6
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	86 15       	cp	r24, r6
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <ConvertToInt64+0xf2>
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	29 2b       	or	r18, r25
     2d2:	95 2d       	mov	r25, r5
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	52 2e       	mov	r5, r18
     2d8:	59 0e       	add	r5, r25
     2da:	21 e0       	ldi	r18, 0x01	; 1
     2dc:	59 16       	cp	r5, r25
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <ConvertToInt64+0x104>
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	32 2b       	or	r19, r18
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	34 0d       	add	r19, r4
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	34 15       	cp	r19, r4
     2ec:	08 f0       	brcs	.+2      	; 0x2f0 <ConvertToInt64+0x112>
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	29 2b       	or	r18, r25
     2f2:	9e 2e       	mov	r9, r30
     2f4:	68 2e       	mov	r6, r24
     2f6:	43 2e       	mov	r4, r19
     2f8:	32 0e       	add	r3, r18

	if(SignNumberFlagToConvertInt64) { /*If negative*/
		Negative=true;
		SignNumberFlagToConvertInt64=false;/*Remember it's a critical section,so should be disabled again*/
	}		
	for(index=0;index<len;index++)
     2fa:	83 94       	inc	r8
     2fc:	82 14       	cp	r8, r2
     2fe:	09 f0       	breq	.+2      	; 0x302 <ConvertToInt64+0x124>
     300:	a0 cf       	rjmp	.-192    	; 0x242 <ConvertToInt64+0x64>
     302:	08 c0       	rjmp	.+16     	; 0x314 <ConvertToInt64+0x136>


sint64 ConvertToInt64(uint8 * ptr,uint8 len)
{
	uint8 index;
	sint64 value=0;/*the value which will be returned*/
     304:	99 24       	eor	r9, r9
     306:	bb 24       	eor	r11, r11
     308:	aa 24       	eor	r10, r10
     30a:	77 24       	eor	r7, r7
     30c:	66 24       	eor	r6, r6
     30e:	55 24       	eor	r5, r5
     310:	44 24       	eor	r4, r4
     312:	33 24       	eor	r3, r3
	{
		value+=ptr[len-index-1]*powerOf(10,index);/*Math basics*/
		/*PowerOf is a function included into keypad.h*/
	}
	
	if(Negative) value= -value ; /*As it should be*/
     314:	fb 81       	ldd	r31, Y+3	; 0x03
     316:	ff 23       	and	r31, r31
     318:	09 f4       	brne	.+2      	; 0x31c <ConvertToInt64+0x13e>
     31a:	55 c0       	rjmp	.+170    	; 0x3c6 <ConvertToInt64+0x1e8>
     31c:	91 94       	neg	r9
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	19 14       	cp	r1, r9
     322:	08 f0       	brcs	.+2      	; 0x326 <ConvertToInt64+0x148>
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	8b 2d       	mov	r24, r11
     328:	81 95       	neg	r24
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	18 16       	cp	r1, r24
     32e:	08 f0       	brcs	.+2      	; 0x332 <ConvertToInt64+0x154>
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	b8 2e       	mov	r11, r24
     334:	b2 1a       	sub	r11, r18
     336:	21 e0       	ldi	r18, 0x01	; 1
     338:	8b 15       	cp	r24, r11
     33a:	08 f0       	brcs	.+2      	; 0x33e <ConvertToInt64+0x160>
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	92 2b       	or	r25, r18
     340:	2a 2d       	mov	r18, r10
     342:	21 95       	neg	r18
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	12 16       	cp	r1, r18
     348:	08 f0       	brcs	.+2      	; 0x34c <ConvertToInt64+0x16e>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	a2 2e       	mov	r10, r18
     34e:	a9 1a       	sub	r10, r25
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	2a 15       	cp	r18, r10
     354:	08 f0       	brcs	.+2      	; 0x358 <ConvertToInt64+0x17a>
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	89 2b       	or	r24, r25
     35a:	27 2d       	mov	r18, r7
     35c:	21 95       	neg	r18
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	12 16       	cp	r1, r18
     362:	08 f0       	brcs	.+2      	; 0x366 <ConvertToInt64+0x188>
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	72 2e       	mov	r7, r18
     368:	78 1a       	sub	r7, r24
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	27 15       	cp	r18, r7
     36e:	08 f0       	brcs	.+2      	; 0x372 <ConvertToInt64+0x194>
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	98 2b       	or	r25, r24
     374:	26 2d       	mov	r18, r6
     376:	21 95       	neg	r18
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	12 16       	cp	r1, r18
     37c:	08 f0       	brcs	.+2      	; 0x380 <ConvertToInt64+0x1a2>
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	62 2e       	mov	r6, r18
     382:	69 1a       	sub	r6, r25
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	26 15       	cp	r18, r6
     388:	08 f0       	brcs	.+2      	; 0x38c <ConvertToInt64+0x1ae>
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	89 2b       	or	r24, r25
     38e:	25 2d       	mov	r18, r5
     390:	21 95       	neg	r18
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	12 16       	cp	r1, r18
     396:	08 f0       	brcs	.+2      	; 0x39a <ConvertToInt64+0x1bc>
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	52 2e       	mov	r5, r18
     39c:	58 1a       	sub	r5, r24
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	25 15       	cp	r18, r5
     3a2:	08 f0       	brcs	.+2      	; 0x3a6 <ConvertToInt64+0x1c8>
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	98 2b       	or	r25, r24
     3a8:	24 2d       	mov	r18, r4
     3aa:	21 95       	neg	r18
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	12 16       	cp	r1, r18
     3b0:	08 f0       	brcs	.+2      	; 0x3b4 <ConvertToInt64+0x1d6>
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	42 2e       	mov	r4, r18
     3b6:	49 1a       	sub	r4, r25
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	24 15       	cp	r18, r4
     3bc:	08 f0       	brcs	.+2      	; 0x3c0 <ConvertToInt64+0x1e2>
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	89 2b       	or	r24, r25
     3c2:	31 94       	neg	r3
     3c4:	38 1a       	sub	r3, r24
	return value;
}
     3c6:	29 2d       	mov	r18, r9
     3c8:	3b 2d       	mov	r19, r11
     3ca:	4a 2d       	mov	r20, r10
     3cc:	57 2d       	mov	r21, r7
     3ce:	66 2d       	mov	r22, r6
     3d0:	75 2d       	mov	r23, r5
     3d2:	84 2d       	mov	r24, r4
     3d4:	93 2d       	mov	r25, r3
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	bf 90       	pop	r11
     3ee:	af 90       	pop	r10
     3f0:	9f 90       	pop	r9
     3f2:	8f 90       	pop	r8
     3f4:	7f 90       	pop	r7
     3f6:	6f 90       	pop	r6
     3f8:	5f 90       	pop	r5
     3fa:	4f 90       	pop	r4
     3fc:	3f 90       	pop	r3
     3fe:	2f 90       	pop	r2
     400:	08 95       	ret

00000402 <DisplayResult>:

void DisplayResult()
{
	LCD_goToRowColumn(1,0);
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <LCD_goToRowColumn>
	LCD_Signed_Int64_ToString(Result);
     40a:	20 91 a4 01 	lds	r18, 0x01A4
     40e:	30 91 a5 01 	lds	r19, 0x01A5
     412:	40 91 a6 01 	lds	r20, 0x01A6
     416:	50 91 a7 01 	lds	r21, 0x01A7
     41a:	60 91 a8 01 	lds	r22, 0x01A8
     41e:	70 91 a9 01 	lds	r23, 0x01A9
     422:	80 91 aa 01 	lds	r24, 0x01AA
     426:	90 91 ab 01 	lds	r25, 0x01AB
     42a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_Signed_Int64_ToString>
	while(KeyPad_getPressedKey() != EnterKey){}
     42e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <KeyPad_getPressedKey>
     432:	8d 30       	cpi	r24, 0x0D	; 13
     434:	e1 f7       	brne	.-8      	; 0x42e <DisplayResult+0x2c>
		Flag=StartPoint;
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	80 93 60 00 	sts	0x0060, r24
}
     43c:	08 95       	ret

0000043e <ThrowException>:
void ThrowException(uint8 *msg)
{
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	ec 01       	movw	r28, r24
	LCD_goToRowColumn(1,0);
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <LCD_goToRowColumn>
	LCD_displayString(msg);
     44c:	ce 01       	movw	r24, r28
     44e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <LCD_displayString>
	while(KeyPad_getPressedKey() != EnterKey){} /*Don't get from the exception until pressing enter key*/
     452:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <KeyPad_getPressedKey>
     456:	8d 30       	cpi	r24, 0x0D	; 13
     458:	e1 f7       	brne	.-8      	; 0x452 <ThrowException+0x14>
		Flag=ErrorPoint;
     45a:	85 e0       	ldi	r24, 0x05	; 5
     45c:	80 93 60 00 	sts	0x0060, r24
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <Analyze>:

void Analyze()
{
     466:	6f 92       	push	r6
     468:	7f 92       	push	r7
     46a:	8f 92       	push	r8
     46c:	9f 92       	push	r9
     46e:	af 92       	push	r10
     470:	bf 92       	push	r11
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
     486:	60 97       	sbiw	r28, 0x10	; 16
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
	sint8 TempArr[MaxNumberOfDigits]={0};
     492:	fe 01       	movw	r30, r28
     494:	31 96       	adiw	r30, 0x01	; 1
     496:	80 e1       	ldi	r24, 0x10	; 16
     498:	df 01       	movw	r26, r30
     49a:	1d 92       	st	X+, r1
     49c:	8a 95       	dec	r24
     49e:	e9 f7       	brne	.-6      	; 0x49a <Analyze+0x34>
	uint8 TempIndex=0;
	uint8 index=0;
	
	
	if(IsOperation(Digits[0]) && Digits[0]!= '-'){ /*if the input is  *5 for example */
     4a0:	80 91 0c 02 	lds	r24, 0x020C
     4a4:	98 2f       	mov	r25, r24
     4a6:	9a 52       	subi	r25, 0x2A	; 42
     4a8:	92 30       	cpi	r25, 0x02	; 2
     4aa:	30 f0       	brcs	.+12     	; 0x4b8 <Analyze+0x52>
     4ac:	8d 32       	cpi	r24, 0x2D	; 45
     4ae:	71 f0       	breq	.+28     	; 0x4cc <Analyze+0x66>
     4b0:	85 32       	cpi	r24, 0x25	; 37
     4b2:	21 f0       	breq	.+8      	; 0x4bc <Analyze+0x56>

void Analyze()
{
	sint8 TempArr[MaxNumberOfDigits]={0};
	uint8 TempIndex=0;
	uint8 index=0;
     4b4:	10 e0       	ldi	r17, 0x00	; 0
     4b6:	20 c0       	rjmp	.+64     	; 0x4f8 <Analyze+0x92>
	
	
	if(IsOperation(Digits[0]) && Digits[0]!= '-'){ /*if the input is  *5 for example */
     4b8:	8d 32       	cpi	r24, 0x2D	; 45
     4ba:	41 f0       	breq	.+16     	; 0x4cc <Analyze+0x66>
		 ThrowException("Invalid input");
     4bc:	81 e6       	ldi	r24, 0x61	; 97
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 1f 02 	call	0x43e	; 0x43e <ThrowException>
		 Flag=StartPoint;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 93 60 00 	sts	0x0060, r24
		 return;
     4ca:	af c0       	rjmp	.+350    	; 0x62a <Analyze+0x1c4>
			}		
			
	/*Checking on if the first number is signed*/
	if(Digits[0]== '-' && !IsOperation(Digits[1]))
     4cc:	80 91 0d 02 	lds	r24, 0x020D
     4d0:	98 2f       	mov	r25, r24
     4d2:	9a 52       	subi	r25, 0x2A	; 42
     4d4:	92 30       	cpi	r25, 0x02	; 2
     4d6:	58 f0       	brcs	.+22     	; 0x4ee <Analyze+0x88>
     4d8:	8d 32       	cpi	r24, 0x2D	; 45
     4da:	59 f0       	breq	.+22     	; 0x4f2 <Analyze+0x8c>
     4dc:	85 32       	cpi	r24, 0x25	; 37
     4de:	59 f0       	breq	.+22     	; 0x4f6 <Analyze+0x90>
	{
			FirstNumberSign =true; /*To register the number in TempArr without conflict with the second condition*/
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 a0 01 	sts	0x01A0, r24
			SignNumberFlagToConvertInt64=true;/*To make a note that the number which ConvertInt64 will convert is negative*/
     4e6:	80 93 9f 01 	sts	0x019F, r24
			index++; /* To assign TempArr[0]= Digits[1] for the first time only and in signed case [in the first condition below]*/
     4ea:	11 e0       	ldi	r17, 0x01	; 1
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <Analyze+0x92>

void Analyze()
{
	sint8 TempArr[MaxNumberOfDigits]={0};
	uint8 TempIndex=0;
	uint8 index=0;
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <Analyze+0x92>
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <Analyze+0x92>
     4f6:	10 e0       	ldi	r17, 0x00	; 0
			FirstNumberSign =true; /*To register the number in TempArr without conflict with the second condition*/
			SignNumberFlagToConvertInt64=true;/*To make a note that the number which ConvertInt64 will convert is negative*/
			index++; /* To assign TempArr[0]= Digits[1] for the first time only and in signed case [in the first condition below]*/
	}		
	
		while(DigitsCounter != 0)
     4f8:	80 91 a1 01 	lds	r24, 0x01A1
     4fc:	88 23       	and	r24, r24
     4fe:	09 f4       	brne	.+2      	; 0x502 <Analyze+0x9c>
     500:	91 c0       	rjmp	.+290    	; 0x624 <Analyze+0x1be>
     502:	60 e0       	ldi	r22, 0x00	; 0
		{
			/*this loop is scan the Digits array and once it found and operation symbol it will convert the number which 
			previous it then continue searching*/

			if(((Digits[index]>=0) && (Digits[index]<=9)) || FirstNumberSign||OtherNumberSign) 
     504:	0f 2e       	mov	r0, r31
     506:	fc e0       	ldi	r31, 0x0C	; 12
     508:	cf 2e       	mov	r12, r31
     50a:	f2 e0       	ldi	r31, 0x02	; 2
     50c:	df 2e       	mov	r13, r31
     50e:	f0 2d       	mov	r31, r0
				FirstNumberSign =false;
				OtherNumberSign =false;
			}				
			else if(((IsOperation(Digits[index]))||(Digits[index]== EqualKey)))/* 2*8*3= */
			{	/*The equality sign help me to calculate the last operand value*/
				Operations[OperationsCounter]=Digits[index];
     510:	0f 2e       	mov	r0, r31
     512:	fc e1       	ldi	r31, 0x1C	; 28
     514:	8f 2e       	mov	r8, r31
     516:	f2 e0       	ldi	r31, 0x02	; 2
     518:	9f 2e       	mov	r9, r31
     51a:	f0 2d       	mov	r31, r0
				OperationsCounter++;		
				Operands[OperandsCounter]=ConvertToInt64(TempArr,TempIndex);
     51c:	0f 2e       	mov	r0, r31
     51e:	fc ea       	ldi	r31, 0xAC	; 172
     520:	6f 2e       	mov	r6, r31
     522:	f1 e0       	ldi	r31, 0x01	; 1
     524:	7f 2e       	mov	r7, r31
     526:	f0 2d       	mov	r31, r0
				OperandsCounter++;
				TempIndex=0;
					if(Digits[index+1] == '-' && index >0) /*If the other operand is signed (2nd operand ...)*/
					{
							OtherNumberSign=true;
     528:	01 e0       	ldi	r16, 0x01	; 1
		while(DigitsCounter != 0)
		{
			/*this loop is scan the Digits array and once it found and operation symbol it will convert the number which 
			previous it then continue searching*/

			if(((Digits[index]>=0) && (Digits[index]<=9)) || FirstNumberSign||OtherNumberSign) 
     52a:	e1 2e       	mov	r14, r17
     52c:	ff 24       	eor	r15, r15
     52e:	f6 01       	movw	r30, r12
     530:	ee 0d       	add	r30, r14
     532:	ff 1d       	adc	r31, r15
     534:	80 81       	ld	r24, Z
     536:	8a 30       	cpi	r24, 0x0A	; 10
     538:	40 f0       	brcs	.+16     	; 0x54a <Analyze+0xe4>
     53a:	90 91 a0 01 	lds	r25, 0x01A0
     53e:	99 23       	and	r25, r25
     540:	21 f4       	brne	.+8      	; 0x54a <Analyze+0xe4>
     542:	90 91 9e 01 	lds	r25, 0x019E
     546:	99 23       	and	r25, r25
     548:	69 f0       	breq	.+26     	; 0x564 <Analyze+0xfe>
			{
				TempArr[TempIndex]=Digits[index];
     54a:	e1 e0       	ldi	r30, 0x01	; 1
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	ec 0f       	add	r30, r28
     550:	fd 1f       	adc	r31, r29
     552:	e6 0f       	add	r30, r22
     554:	f1 1d       	adc	r31, r1
     556:	80 83       	st	Z, r24
				TempIndex++;
     558:	6f 5f       	subi	r22, 0xFF	; 255
				FirstNumberSign =false;
     55a:	10 92 a0 01 	sts	0x01A0, r1
				OtherNumberSign =false;
     55e:	10 92 9e 01 	sts	0x019E, r1
     562:	57 c0       	rjmp	.+174    	; 0x612 <Analyze+0x1ac>
			}				
			else if(((IsOperation(Digits[index]))||(Digits[index]== EqualKey)))/* 2*8*3= */
     564:	98 2f       	mov	r25, r24
     566:	9a 52       	subi	r25, 0x2A	; 42
     568:	92 30       	cpi	r25, 0x02	; 2
     56a:	38 f0       	brcs	.+14     	; 0x57a <Analyze+0x114>
     56c:	8d 32       	cpi	r24, 0x2D	; 45
     56e:	29 f0       	breq	.+10     	; 0x57a <Analyze+0x114>
     570:	85 32       	cpi	r24, 0x25	; 37
     572:	19 f0       	breq	.+6      	; 0x57a <Analyze+0x114>
     574:	8d 33       	cpi	r24, 0x3D	; 61
     576:	09 f0       	breq	.+2      	; 0x57a <Analyze+0x114>
     578:	45 c0       	rjmp	.+138    	; 0x604 <Analyze+0x19e>
			{	/*The equality sign help me to calculate the last operand value*/
				Operations[OperationsCounter]=Digits[index];
     57a:	90 91 a2 01 	lds	r25, 0x01A2
     57e:	f4 01       	movw	r30, r8
     580:	e9 0f       	add	r30, r25
     582:	f1 1d       	adc	r31, r1
     584:	80 83       	st	Z, r24
				OperationsCounter++;		
     586:	9f 5f       	subi	r25, 0xFF	; 255
     588:	90 93 a2 01 	sts	0x01A2, r25
				Operands[OperandsCounter]=ConvertToInt64(TempArr,TempIndex);
     58c:	a0 90 a3 01 	lds	r10, 0x01A3
     590:	bb 24       	eor	r11, r11
     592:	ce 01       	movw	r24, r28
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	0e 94 ef 00 	call	0x1de	; 0x1de <ConvertToInt64>
     59a:	f5 01       	movw	r30, r10
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	ee 0f       	add	r30, r30
     5a6:	ff 1f       	adc	r31, r31
     5a8:	e6 0d       	add	r30, r6
     5aa:	f7 1d       	adc	r31, r7
     5ac:	20 83       	st	Z, r18
     5ae:	31 83       	std	Z+1, r19	; 0x01
     5b0:	42 83       	std	Z+2, r20	; 0x02
     5b2:	53 83       	std	Z+3, r21	; 0x03
     5b4:	64 83       	std	Z+4, r22	; 0x04
     5b6:	75 83       	std	Z+5, r23	; 0x05
     5b8:	86 83       	std	Z+6, r24	; 0x06
     5ba:	97 83       	std	Z+7, r25	; 0x07
				OperandsCounter++;
     5bc:	80 91 a3 01 	lds	r24, 0x01A3
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	80 93 a3 01 	sts	0x01A3, r24
				TempIndex=0;
					if(Digits[index+1] == '-' && index >0) /*If the other operand is signed (2nd operand ...)*/
     5c6:	f6 01       	movw	r30, r12
     5c8:	ee 0d       	add	r30, r14
     5ca:	ff 1d       	adc	r31, r15
     5cc:	81 81       	ldd	r24, Z+1	; 0x01
     5ce:	8d 32       	cpi	r24, 0x2D	; 45
     5d0:	49 f4       	brne	.+18     	; 0x5e4 <Analyze+0x17e>
     5d2:	11 23       	and	r17, r17
     5d4:	39 f0       	breq	.+14     	; 0x5e4 <Analyze+0x17e>
					{
							OtherNumberSign=true;
     5d6:	00 93 9e 01 	sts	0x019E, r16
							SignNumberFlagToConvertInt64=true;
     5da:	00 93 9f 01 	sts	0x019F, r16
							index++;/*To Not include the sign in the TempArr*/
     5de:	1f 5f       	subi	r17, 0xFF	; 255
			{	/*The equality sign help me to calculate the last operand value*/
				Operations[OperationsCounter]=Digits[index];
				OperationsCounter++;		
				Operands[OperandsCounter]=ConvertToInt64(TempArr,TempIndex);
				OperandsCounter++;
				TempIndex=0;
     5e0:	60 e0       	ldi	r22, 0x00	; 0
					if(Digits[index+1] == '-' && index >0) /*If the other operand is signed (2nd operand ...)*/
					{
							OtherNumberSign=true;
							SignNumberFlagToConvertInt64=true;
							index++;/*To Not include the sign in the TempArr*/
     5e2:	17 c0       	rjmp	.+46     	; 0x612 <Analyze+0x1ac>
							
					}else if(IsOperation(Digits[index+1])) /*if two symbols after each other ++ or *% */
     5e4:	98 2f       	mov	r25, r24
     5e6:	9a 52       	subi	r25, 0x2A	; 42
     5e8:	92 30       	cpi	r25, 0x02	; 2
     5ea:	20 f0       	brcs	.+8      	; 0x5f4 <Analyze+0x18e>
     5ec:	8d 32       	cpi	r24, 0x2D	; 45
     5ee:	11 f0       	breq	.+4      	; 0x5f4 <Analyze+0x18e>
     5f0:	85 32       	cpi	r24, 0x25	; 37
     5f2:	71 f4       	brne	.+28     	; 0x610 <Analyze+0x1aa>
					{
						ThrowException("Invalid Syntax");
     5f4:	8f e6       	ldi	r24, 0x6F	; 111
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 1f 02 	call	0x43e	; 0x43e <ThrowException>
						Flag =ErrorPoint;
     5fc:	85 e0       	ldi	r24, 0x05	; 5
     5fe:	80 93 60 00 	sts	0x0060, r24
						return;
     602:	13 c0       	rjmp	.+38     	; 0x62a <Analyze+0x1c4>
					}
						
			}
			else if(Digits[index]==EnterKey){
     604:	8d 30       	cpi	r24, 0x0D	; 13
     606:	29 f4       	brne	.+10     	; 0x612 <Analyze+0x1ac>
				/*Should be an unreachable code ,but in case of any thing*/
				Flag=StartPoint;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 60 00 	sts	0x0060, r24
				return;
     60e:	0d c0       	rjmp	.+26     	; 0x62a <Analyze+0x1c4>
			{	/*The equality sign help me to calculate the last operand value*/
				Operations[OperationsCounter]=Digits[index];
				OperationsCounter++;		
				Operands[OperandsCounter]=ConvertToInt64(TempArr,TempIndex);
				OperandsCounter++;
				TempIndex=0;
     610:	60 e0       	ldi	r22, 0x00	; 0
				/*Should be an unreachable code ,but in case of any thing*/
				Flag=StartPoint;
				return;
			}
			
			index++;
     612:	1f 5f       	subi	r17, 0xFF	; 255
			DigitsCounter--;
     614:	80 91 a1 01 	lds	r24, 0x01A1
     618:	81 50       	subi	r24, 0x01	; 1
     61a:	80 93 a1 01 	sts	0x01A1, r24
			FirstNumberSign =true; /*To register the number in TempArr without conflict with the second condition*/
			SignNumberFlagToConvertInt64=true;/*To make a note that the number which ConvertInt64 will convert is negative*/
			index++; /* To assign TempArr[0]= Digits[1] for the first time only and in signed case [in the first condition below]*/
	}		
	
		while(DigitsCounter != 0)
     61e:	88 23       	and	r24, r24
     620:	09 f0       	breq	.+2      	; 0x624 <Analyze+0x1be>
     622:	83 cf       	rjmp	.-250    	; 0x52a <Analyze+0xc4>
			index++;
			DigitsCounter--;

		}

		Flag=CalculatePoint;/*go to the next stage*/
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	80 93 60 00 	sts	0x0060, r24
}
     62a:	60 96       	adiw	r28, 0x10	; 16
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	cf 90       	pop	r12
     646:	bf 90       	pop	r11
     648:	af 90       	pop	r10
     64a:	9f 90       	pop	r9
     64c:	8f 90       	pop	r8
     64e:	7f 90       	pop	r7
     650:	6f 90       	pop	r6
     652:	08 95       	ret

00000654 <Calculate>:



void Calculate()
{
     654:	5f 92       	push	r5
     656:	6f 92       	push	r6
     658:	7f 92       	push	r7
     65a:	8f 92       	push	r8
     65c:	9f 92       	push	r9
     65e:	af 92       	push	r10
     660:	bf 92       	push	r11
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
	uint8 piority=false;
	
	if(OperationsCounter>2){/* > 2 As equal sign included in it*/
     672:	80 91 a2 01 	lds	r24, 0x01A2
     676:	83 30       	cpi	r24, 0x03	; 3
     678:	48 f0       	brcs	.+18     	; 0x68c <Calculate+0x38>



void Calculate()
{
	uint8 piority=false;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	20 91 1d 02 	lds	r18, 0x021D
     680:	90 91 1c 02 	lds	r25, 0x021C
     684:	29 17       	cp	r18, r25
     686:	19 f4       	brne	.+6      	; 0x68e <Calculate+0x3a>
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	01 c0       	rjmp	.+2      	; 0x68e <Calculate+0x3a>
     68c:	80 e0       	ldi	r24, 0x00	; 0
	if(OperationsCounter>2){/* > 2 As equal sign included in it*/
		if(Operations[1] != Operations[0]) piority=true;		
	}		
	
	
	if(OperandsCounter == 1)
     68e:	20 91 a3 01 	lds	r18, 0x01A3
     692:	21 30       	cpi	r18, 0x01	; 1
     694:	29 f5       	brne	.+74     	; 0x6e0 <Calculate+0x8c>
	{
		
		Result=Operands[0];
     696:	80 91 ac 01 	lds	r24, 0x01AC
     69a:	80 93 a4 01 	sts	0x01A4, r24
     69e:	80 91 ad 01 	lds	r24, 0x01AD
     6a2:	80 93 a5 01 	sts	0x01A5, r24
     6a6:	80 91 ae 01 	lds	r24, 0x01AE
     6aa:	80 93 a6 01 	sts	0x01A6, r24
     6ae:	80 91 af 01 	lds	r24, 0x01AF
     6b2:	80 93 a7 01 	sts	0x01A7, r24
     6b6:	80 91 b0 01 	lds	r24, 0x01B0
     6ba:	80 93 a8 01 	sts	0x01A8, r24
     6be:	80 91 b1 01 	lds	r24, 0x01B1
     6c2:	80 93 a9 01 	sts	0x01A9, r24
     6c6:	80 91 b2 01 	lds	r24, 0x01B2
     6ca:	80 93 aa 01 	sts	0x01AA, r24
     6ce:	80 91 b3 01 	lds	r24, 0x01B3
     6d2:	80 93 ab 01 	sts	0x01AB, r24
		Flag=DisplayPoint;
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	80 93 60 00 	sts	0x0060, r24
		return;
     6dc:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__stack+0x10eb>
	}

if(piority==false){	
     6e0:	88 23       	and	r24, r24
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <Calculate+0x92>
     6e4:	e3 c1       	rjmp	.+966    	; 0xaac <__stack+0x24d>
	if((OperandsCounter>1))
     6e6:	22 30       	cpi	r18, 0x02	; 2
     6e8:	08 f4       	brcc	.+2      	; 0x6ec <Calculate+0x98>
     6ea:	c1 c2       	rjmp	.+1410   	; 0xc6e <__stack+0x40f>
	{
		uint8 index=0;
		switch(Operations[0])
     6ec:	80 91 1c 02 	lds	r24, 0x021C
     6f0:	8a 32       	cpi	r24, 0x2A	; 42
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <Calculate+0xa2>
     6f4:	a5 c0       	rjmp	.+330    	; 0x840 <Calculate+0x1ec>
     6f6:	8b 32       	cpi	r24, 0x2B	; 43
     6f8:	20 f4       	brcc	.+8      	; 0x702 <Calculate+0xae>
     6fa:	85 32       	cpi	r24, 0x25	; 37
     6fc:	09 f0       	breq	.+2      	; 0x700 <Calculate+0xac>
     6fe:	ce c1       	rjmp	.+924    	; 0xa9c <__stack+0x23d>
     700:	85 c1       	rjmp	.+778    	; 0xa0c <__stack+0x1ad>
     702:	8b 32       	cpi	r24, 0x2B	; 43
     704:	21 f0       	breq	.+8      	; 0x70e <Calculate+0xba>
     706:	8d 32       	cpi	r24, 0x2D	; 45
     708:	09 f0       	breq	.+2      	; 0x70c <Calculate+0xb8>
     70a:	c8 c1       	rjmp	.+912    	; 0xa9c <__stack+0x23d>
     70c:	e3 c0       	rjmp	.+454    	; 0x8d4 <__stack+0x75>
		{
			case '+':{
						Result=0;
     70e:	10 92 a4 01 	sts	0x01A4, r1
     712:	10 92 a5 01 	sts	0x01A5, r1
     716:	10 92 a6 01 	sts	0x01A6, r1
     71a:	10 92 a7 01 	sts	0x01A7, r1
     71e:	10 92 a8 01 	sts	0x01A8, r1
     722:	10 92 a9 01 	sts	0x01A9, r1
     726:	10 92 aa 01 	sts	0x01AA, r1
     72a:	10 92 ab 01 	sts	0x01AB, r1
						for(index=0;index<OperandsCounter;index++)
     72e:	22 23       	and	r18, r18
     730:	09 f4       	brne	.+2      	; 0x734 <Calculate+0xe0>
     732:	b8 c1       	rjmp	.+880    	; 0xaa4 <__stack+0x245>
     734:	ec ea       	ldi	r30, 0xAC	; 172
     736:	f1 e0       	ldi	r31, 0x01	; 1
		Flag=CalculatePoint;/*go to the next stage*/
}



void Calculate()
     738:	cf 01       	movw	r24, r30
     73a:	08 96       	adiw	r24, 0x08	; 8
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	22 0f       	add	r18, r18
     742:	33 1f       	adc	r19, r19
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	22 0f       	add	r18, r18
     74a:	33 1f       	adc	r19, r19
     74c:	82 0f       	add	r24, r18
     74e:	93 1f       	adc	r25, r19
     750:	55 24       	eor	r5, r5
     752:	aa 24       	eor	r10, r10
     754:	66 24       	eor	r6, r6
     756:	bb 24       	eor	r11, r11
     758:	cc 24       	eor	r12, r12
     75a:	dd 24       	eor	r13, r13
     75c:	d0 e0       	ldi	r29, 0x00	; 0
     75e:	99 24       	eor	r9, r9
		switch(Operations[0])
		{
			case '+':{
						Result=0;
						for(index=0;index<OperandsCounter;index++)
								Result+=Operands[index];
     760:	21 e0       	ldi	r18, 0x01	; 1
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	80 80       	ld	r8, Z
     766:	e1 80       	ldd	r14, Z+1	; 0x01
     768:	f2 80       	ldd	r15, Z+2	; 0x02
     76a:	03 81       	ldd	r16, Z+3	; 0x03
     76c:	14 81       	ldd	r17, Z+4	; 0x04
     76e:	c5 81       	ldd	r28, Z+5	; 0x05
     770:	b6 81       	ldd	r27, Z+6	; 0x06
     772:	77 80       	ldd	r7, Z+7	; 0x07
     774:	38 96       	adiw	r30, 0x08	; 8
     776:	85 0c       	add	r8, r5
     778:	42 2f       	mov	r20, r18
     77a:	85 14       	cp	r8, r5
     77c:	08 f0       	brcs	.+2      	; 0x780 <Calculate+0x12c>
     77e:	43 2f       	mov	r20, r19
     780:	ea 0c       	add	r14, r10
     782:	a2 2f       	mov	r26, r18
     784:	ea 14       	cp	r14, r10
     786:	08 f0       	brcs	.+2      	; 0x78a <Calculate+0x136>
     788:	a3 2f       	mov	r26, r19
     78a:	a4 2e       	mov	r10, r20
     78c:	ae 0c       	add	r10, r14
     78e:	42 2f       	mov	r20, r18
     790:	ae 14       	cp	r10, r14
     792:	08 f0       	brcs	.+2      	; 0x796 <Calculate+0x142>
     794:	43 2f       	mov	r20, r19
     796:	a4 2b       	or	r26, r20
     798:	f6 0c       	add	r15, r6
     79a:	72 2f       	mov	r23, r18
     79c:	f6 14       	cp	r15, r6
     79e:	08 f0       	brcs	.+2      	; 0x7a2 <Calculate+0x14e>
     7a0:	73 2f       	mov	r23, r19
     7a2:	af 0d       	add	r26, r15
     7a4:	42 2f       	mov	r20, r18
     7a6:	af 15       	cp	r26, r15
     7a8:	08 f0       	brcs	.+2      	; 0x7ac <Calculate+0x158>
     7aa:	43 2f       	mov	r20, r19
     7ac:	74 2b       	or	r23, r20
     7ae:	0b 0d       	add	r16, r11
     7b0:	62 2f       	mov	r22, r18
     7b2:	0b 15       	cp	r16, r11
     7b4:	08 f0       	brcs	.+2      	; 0x7b8 <Calculate+0x164>
     7b6:	63 2f       	mov	r22, r19
     7b8:	70 0f       	add	r23, r16
     7ba:	42 2f       	mov	r20, r18
     7bc:	70 17       	cp	r23, r16
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <Calculate+0x16e>
     7c0:	43 2f       	mov	r20, r19
     7c2:	64 2b       	or	r22, r20
     7c4:	1c 0d       	add	r17, r12
     7c6:	42 2f       	mov	r20, r18
     7c8:	1c 15       	cp	r17, r12
     7ca:	08 f0       	brcs	.+2      	; 0x7ce <Calculate+0x17a>
     7cc:	43 2f       	mov	r20, r19
     7ce:	61 0f       	add	r22, r17
     7d0:	52 2f       	mov	r21, r18
     7d2:	61 17       	cp	r22, r17
     7d4:	08 f0       	brcs	.+2      	; 0x7d8 <Calculate+0x184>
     7d6:	53 2f       	mov	r21, r19
     7d8:	45 2b       	or	r20, r21
     7da:	cd 0d       	add	r28, r13
     7dc:	52 2f       	mov	r21, r18
     7de:	cd 15       	cp	r28, r13
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <Calculate+0x190>
     7e2:	53 2f       	mov	r21, r19
     7e4:	d4 2e       	mov	r13, r20
     7e6:	dc 0e       	add	r13, r28
     7e8:	42 2f       	mov	r20, r18
     7ea:	dc 16       	cp	r13, r28
     7ec:	08 f0       	brcs	.+2      	; 0x7f0 <Calculate+0x19c>
     7ee:	43 2f       	mov	r20, r19
     7f0:	54 2b       	or	r21, r20
     7f2:	bd 0f       	add	r27, r29
     7f4:	42 2f       	mov	r20, r18
     7f6:	bd 17       	cp	r27, r29
     7f8:	08 f0       	brcs	.+2      	; 0x7fc <Calculate+0x1a8>
     7fa:	43 2f       	mov	r20, r19
     7fc:	5b 0f       	add	r21, r27
     7fe:	c2 2f       	mov	r28, r18
     800:	5b 17       	cp	r21, r27
     802:	08 f0       	brcs	.+2      	; 0x806 <Calculate+0x1b2>
     804:	c3 2f       	mov	r28, r19
     806:	4c 2b       	or	r20, r28
     808:	97 0c       	add	r9, r7
     80a:	58 2c       	mov	r5, r8
     80c:	6a 2e       	mov	r6, r26
     80e:	b7 2e       	mov	r11, r23
     810:	c6 2e       	mov	r12, r22
     812:	d5 2f       	mov	r29, r21
     814:	94 0e       	add	r9, r20
		uint8 index=0;
		switch(Operations[0])
		{
			case '+':{
						Result=0;
						for(index=0;index<OperandsCounter;index++)
     816:	e8 17       	cp	r30, r24
     818:	f9 07       	cpc	r31, r25
     81a:	09 f0       	breq	.+2      	; 0x81e <Calculate+0x1ca>
     81c:	a3 cf       	rjmp	.-186    	; 0x764 <Calculate+0x110>
     81e:	80 92 a4 01 	sts	0x01A4, r8
     822:	a0 92 a5 01 	sts	0x01A5, r10
     826:	a0 93 a6 01 	sts	0x01A6, r26
     82a:	70 93 a7 01 	sts	0x01A7, r23
     82e:	60 93 a8 01 	sts	0x01A8, r22
     832:	d0 92 a9 01 	sts	0x01A9, r13
     836:	50 93 aa 01 	sts	0x01AA, r21
     83a:	90 92 ab 01 	sts	0x01AB, r9
     83e:	32 c1       	rjmp	.+612    	; 0xaa4 <__stack+0x245>
								Result+=Operands[index];
						break;
					}
					
			case '*':{
				Result=1;/*As it's initially to -1*/
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	80 93 a4 01 	sts	0x01A4, r24
     846:	10 92 a5 01 	sts	0x01A5, r1
     84a:	10 92 a6 01 	sts	0x01A6, r1
     84e:	10 92 a7 01 	sts	0x01A7, r1
     852:	10 92 a8 01 	sts	0x01A8, r1
     856:	10 92 a9 01 	sts	0x01A9, r1
     85a:	10 92 aa 01 	sts	0x01AA, r1
     85e:	10 92 ab 01 	sts	0x01AB, r1
				for(index=0;index<OperandsCounter;index++)
     862:	22 23       	and	r18, r18
     864:	09 f4       	brne	.+2      	; 0x868 <__stack+0x9>
     866:	1e c1       	rjmp	.+572    	; 0xaa4 <__stack+0x245>
     868:	cc ea       	ldi	r28, 0xAC	; 172
     86a:	d1 e0       	ldi	r29, 0x01	; 1
		Flag=CalculatePoint;/*go to the next stage*/
}



void Calculate()
     86c:	ce 01       	movw	r24, r28
     86e:	08 96       	adiw	r24, 0x08	; 8
     870:	21 50       	subi	r18, 0x01	; 1
     872:	82 2e       	mov	r8, r18
     874:	99 24       	eor	r9, r9
     876:	88 0c       	add	r8, r8
     878:	99 1c       	adc	r9, r9
     87a:	88 0c       	add	r8, r8
     87c:	99 1c       	adc	r9, r9
     87e:	88 0c       	add	r8, r8
     880:	99 1c       	adc	r9, r9
     882:	88 0e       	add	r8, r24
     884:	99 1e       	adc	r9, r25
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
					}
					
			case '*':{
				Result=1;/*As it's initially to -1*/
				for(index=0;index<OperandsCounter;index++)
								Result*=Operands[index];
     896:	a8 80       	ld	r10, Y
     898:	b9 80       	ldd	r11, Y+1	; 0x01
     89a:	ca 80       	ldd	r12, Y+2	; 0x02
     89c:	db 80       	ldd	r13, Y+3	; 0x03
     89e:	ec 80       	ldd	r14, Y+4	; 0x04
     8a0:	fd 80       	ldd	r15, Y+5	; 0x05
     8a2:	0e 81       	ldd	r16, Y+6	; 0x06
     8a4:	1f 81       	ldd	r17, Y+7	; 0x07
     8a6:	28 96       	adiw	r28, 0x08	; 8
     8a8:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__muldi3>
						break;
					}
					
			case '*':{
				Result=1;/*As it's initially to -1*/
				for(index=0;index<OperandsCounter;index++)
     8ac:	c8 15       	cp	r28, r8
     8ae:	d9 05       	cpc	r29, r9
     8b0:	91 f7       	brne	.-28     	; 0x896 <__stack+0x37>
     8b2:	20 93 a4 01 	sts	0x01A4, r18
     8b6:	30 93 a5 01 	sts	0x01A5, r19
     8ba:	40 93 a6 01 	sts	0x01A6, r20
     8be:	50 93 a7 01 	sts	0x01A7, r21
     8c2:	60 93 a8 01 	sts	0x01A8, r22
     8c6:	70 93 a9 01 	sts	0x01A9, r23
     8ca:	80 93 aa 01 	sts	0x01AA, r24
     8ce:	90 93 ab 01 	sts	0x01AB, r25
     8d2:	e8 c0       	rjmp	.+464    	; 0xaa4 <__stack+0x245>
								Result*=Operands[index];
				break;
					}
			case '-':{
				Result=Operands[0];	/*As i use -= and Result is initially to -1,so it will give a wrong answer*/
     8d4:	8c ea       	ldi	r24, 0xAC	; 172
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	b0 91 ac 01 	lds	r27, 0x01AC
     8dc:	a0 91 ad 01 	lds	r26, 0x01AD
     8e0:	70 91 ae 01 	lds	r23, 0x01AE
     8e4:	60 91 af 01 	lds	r22, 0x01AF
     8e8:	50 91 b0 01 	lds	r21, 0x01B0
     8ec:	40 91 b1 01 	lds	r20, 0x01B1
     8f0:	30 91 b2 01 	lds	r19, 0x01B2
     8f4:	c0 91 b3 01 	lds	r28, 0x01B3
     8f8:	fc 01       	movw	r30, r24
     8fa:	38 96       	adiw	r30, 0x08	; 8
		Flag=CalculatePoint;/*go to the next stage*/
}



void Calculate()
     8fc:	8c 01       	movw	r16, r24
     8fe:	00 5f       	subi	r16, 0xF0	; 240
     900:	1f 4f       	sbci	r17, 0xFF	; 255
     902:	22 50       	subi	r18, 0x02	; 2
     904:	82 2f       	mov	r24, r18
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	80 0f       	add	r24, r16
     916:	91 1f       	adc	r25, r17
				break;
					}
			case '-':{
				Result=Operands[0];	/*As i use -= and Result is initially to -1,so it will give a wrong answer*/
				for(index=1;index<OperandsCounter;index++)
								Result-=Operands[index];
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	10 e0       	ldi	r17, 0x00	; 0
     91c:	e0 80       	ld	r14, Z
     91e:	01 81       	ldd	r16, Z+1	; 0x01
     920:	92 80       	ldd	r9, Z+2	; 0x02
     922:	d3 81       	ldd	r29, Z+3	; 0x03
     924:	a4 80       	ldd	r10, Z+4	; 0x04
     926:	f5 80       	ldd	r15, Z+5	; 0x05
     928:	c6 80       	ldd	r12, Z+6	; 0x06
     92a:	d7 80       	ldd	r13, Z+7	; 0x07
     92c:	38 96       	adiw	r30, 0x08	; 8
     92e:	bb 2e       	mov	r11, r27
     930:	be 18       	sub	r11, r14
     932:	eb 2c       	mov	r14, r11
     934:	b2 2e       	mov	r11, r18
     936:	be 15       	cp	r27, r14
     938:	08 f0       	brcs	.+2      	; 0x93c <__stack+0xdd>
     93a:	b1 2e       	mov	r11, r17
     93c:	ba 2f       	mov	r27, r26
     93e:	b0 1b       	sub	r27, r16
     940:	0b 2f       	mov	r16, r27
     942:	b2 2f       	mov	r27, r18
     944:	a0 17       	cp	r26, r16
     946:	08 f0       	brcs	.+2      	; 0x94a <__stack+0xeb>
     948:	b1 2f       	mov	r27, r17
     94a:	a0 2f       	mov	r26, r16
     94c:	ab 19       	sub	r26, r11
     94e:	b2 2e       	mov	r11, r18
     950:	0a 17       	cp	r16, r26
     952:	08 f0       	brcs	.+2      	; 0x956 <__stack+0xf7>
     954:	b1 2e       	mov	r11, r17
     956:	bb 29       	or	r27, r11
     958:	b7 2e       	mov	r11, r23
     95a:	b9 18       	sub	r11, r9
     95c:	02 2f       	mov	r16, r18
     95e:	7b 15       	cp	r23, r11
     960:	08 f0       	brcs	.+2      	; 0x964 <__stack+0x105>
     962:	01 2f       	mov	r16, r17
     964:	7b 2d       	mov	r23, r11
     966:	7b 1b       	sub	r23, r27
     968:	b2 2f       	mov	r27, r18
     96a:	b7 16       	cp	r11, r23
     96c:	08 f0       	brcs	.+2      	; 0x970 <__stack+0x111>
     96e:	b1 2f       	mov	r27, r17
     970:	0b 2b       	or	r16, r27
     972:	b6 2e       	mov	r11, r22
     974:	bd 1a       	sub	r11, r29
     976:	b2 2f       	mov	r27, r18
     978:	6b 15       	cp	r22, r11
     97a:	08 f0       	brcs	.+2      	; 0x97e <__stack+0x11f>
     97c:	b1 2f       	mov	r27, r17
     97e:	6b 2d       	mov	r22, r11
     980:	60 1b       	sub	r22, r16
     982:	d2 2f       	mov	r29, r18
     984:	b6 16       	cp	r11, r22
     986:	08 f0       	brcs	.+2      	; 0x98a <__stack+0x12b>
     988:	d1 2f       	mov	r29, r17
     98a:	bd 2b       	or	r27, r29
     98c:	b5 2e       	mov	r11, r21
     98e:	ba 18       	sub	r11, r10
     990:	02 2f       	mov	r16, r18
     992:	5b 15       	cp	r21, r11
     994:	08 f0       	brcs	.+2      	; 0x998 <__stack+0x139>
     996:	01 2f       	mov	r16, r17
     998:	5b 2d       	mov	r21, r11
     99a:	5b 1b       	sub	r21, r27
     99c:	b2 2f       	mov	r27, r18
     99e:	b5 16       	cp	r11, r21
     9a0:	08 f0       	brcs	.+2      	; 0x9a4 <__stack+0x145>
     9a2:	b1 2f       	mov	r27, r17
     9a4:	0b 2b       	or	r16, r27
     9a6:	b4 2e       	mov	r11, r20
     9a8:	bf 18       	sub	r11, r15
     9aa:	fb 2c       	mov	r15, r11
     9ac:	b2 2f       	mov	r27, r18
     9ae:	4b 15       	cp	r20, r11
     9b0:	08 f0       	brcs	.+2      	; 0x9b4 <__stack+0x155>
     9b2:	b1 2f       	mov	r27, r17
     9b4:	4f 2d       	mov	r20, r15
     9b6:	40 1b       	sub	r20, r16
     9b8:	d2 2f       	mov	r29, r18
     9ba:	f4 16       	cp	r15, r20
     9bc:	08 f0       	brcs	.+2      	; 0x9c0 <__stack+0x161>
     9be:	d1 2f       	mov	r29, r17
     9c0:	bd 2b       	or	r27, r29
     9c2:	f3 2e       	mov	r15, r19
     9c4:	fc 18       	sub	r15, r12
     9c6:	02 2f       	mov	r16, r18
     9c8:	3f 15       	cp	r19, r15
     9ca:	08 f0       	brcs	.+2      	; 0x9ce <__stack+0x16f>
     9cc:	01 2f       	mov	r16, r17
     9ce:	3f 2d       	mov	r19, r15
     9d0:	3b 1b       	sub	r19, r27
     9d2:	b2 2f       	mov	r27, r18
     9d4:	f3 16       	cp	r15, r19
     9d6:	08 f0       	brcs	.+2      	; 0x9da <__stack+0x17b>
     9d8:	b1 2f       	mov	r27, r17
     9da:	0b 2b       	or	r16, r27
     9dc:	cd 19       	sub	r28, r13
     9de:	be 2d       	mov	r27, r14
     9e0:	c0 1b       	sub	r28, r16
								Result*=Operands[index];
				break;
					}
			case '-':{
				Result=Operands[0];	/*As i use -= and Result is initially to -1,so it will give a wrong answer*/
				for(index=1;index<OperandsCounter;index++)
     9e2:	e8 17       	cp	r30, r24
     9e4:	f9 07       	cpc	r31, r25
     9e6:	09 f0       	breq	.+2      	; 0x9ea <__stack+0x18b>
     9e8:	99 cf       	rjmp	.-206    	; 0x91c <__stack+0xbd>
     9ea:	e0 92 a4 01 	sts	0x01A4, r14
     9ee:	a0 93 a5 01 	sts	0x01A5, r26
     9f2:	70 93 a6 01 	sts	0x01A6, r23
     9f6:	60 93 a7 01 	sts	0x01A7, r22
     9fa:	50 93 a8 01 	sts	0x01A8, r21
     9fe:	40 93 a9 01 	sts	0x01A9, r20
     a02:	30 93 aa 01 	sts	0x01AA, r19
     a06:	c0 93 ab 01 	sts	0x01AB, r28
     a0a:	4c c0       	rjmp	.+152    	; 0xaa4 <__stack+0x245>
								Result-=Operands[index];
				break;
					}	
			case '%':{
				Result=Operands[0]; /*As above*/
     a0c:	4c ea       	ldi	r20, 0xAC	; 172
     a0e:	51 e0       	ldi	r21, 0x01	; 1
     a10:	e0 91 ac 01 	lds	r30, 0x01AC
     a14:	30 91 ad 01 	lds	r19, 0x01AD
     a18:	f0 91 ae 01 	lds	r31, 0x01AE
     a1c:	a0 91 af 01 	lds	r26, 0x01AF
     a20:	60 91 b0 01 	lds	r22, 0x01B0
     a24:	70 91 b1 01 	lds	r23, 0x01B1
     a28:	80 91 b2 01 	lds	r24, 0x01B2
     a2c:	90 91 b3 01 	lds	r25, 0x01B3
     a30:	ea 01       	movw	r28, r20
     a32:	28 96       	adiw	r28, 0x08	; 8
		Flag=CalculatePoint;/*go to the next stage*/
}



void Calculate()
     a34:	8a 01       	movw	r16, r20
     a36:	00 5f       	subi	r16, 0xF0	; 240
     a38:	1f 4f       	sbci	r17, 0xFF	; 255
     a3a:	22 50       	subi	r18, 0x02	; 2
     a3c:	42 2f       	mov	r20, r18
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	44 0f       	add	r20, r20
     a42:	55 1f       	adc	r21, r21
     a44:	44 0f       	add	r20, r20
     a46:	55 1f       	adc	r21, r21
     a48:	44 0f       	add	r20, r20
     a4a:	55 1f       	adc	r21, r21
     a4c:	48 01       	movw	r8, r16
     a4e:	84 0e       	add	r8, r20
     a50:	95 1e       	adc	r9, r21
				break;
					}	
			case '%':{
				Result=Operands[0]; /*As above*/
				for(index=1;index<OperandsCounter;index++)
						Result/=Operands[index];
     a52:	a8 80       	ld	r10, Y
     a54:	b9 80       	ldd	r11, Y+1	; 0x01
     a56:	ca 80       	ldd	r12, Y+2	; 0x02
     a58:	db 80       	ldd	r13, Y+3	; 0x03
     a5a:	ec 80       	ldd	r14, Y+4	; 0x04
     a5c:	fd 80       	ldd	r15, Y+5	; 0x05
     a5e:	0e 81       	ldd	r16, Y+6	; 0x06
     a60:	1f 81       	ldd	r17, Y+7	; 0x07
     a62:	28 96       	adiw	r28, 0x08	; 8
     a64:	2e 2f       	mov	r18, r30
     a66:	4f 2f       	mov	r20, r31
     a68:	5a 2f       	mov	r21, r26
     a6a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__divdi3>
     a6e:	e2 2f       	mov	r30, r18
     a70:	f4 2f       	mov	r31, r20
     a72:	a5 2f       	mov	r26, r21
								Result-=Operands[index];
				break;
					}	
			case '%':{
				Result=Operands[0]; /*As above*/
				for(index=1;index<OperandsCounter;index++)
     a74:	c8 15       	cp	r28, r8
     a76:	d9 05       	cpc	r29, r9
     a78:	61 f7       	brne	.-40     	; 0xa52 <__stack+0x1f3>
     a7a:	20 93 a4 01 	sts	0x01A4, r18
     a7e:	30 93 a5 01 	sts	0x01A5, r19
     a82:	40 93 a6 01 	sts	0x01A6, r20
     a86:	50 93 a7 01 	sts	0x01A7, r21
     a8a:	60 93 a8 01 	sts	0x01A8, r22
     a8e:	70 93 a9 01 	sts	0x01A9, r23
     a92:	80 93 aa 01 	sts	0x01AA, r24
     a96:	90 93 ab 01 	sts	0x01AB, r25
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__stack+0x245>
						Result/=Operands[index];
				break;
					}
					
			default:{
				ThrowException("Calculation Error");
     a9c:	8e e7       	ldi	r24, 0x7E	; 126
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <ThrowException>
				Flag=StartPoint;
				break;
				}					
		}
		
		Flag=DisplayPoint;
     aa4:	84 e0       	ldi	r24, 0x04	; 4
     aa6:	80 93 60 00 	sts	0x0060, r24
		return;
     aaa:	4f c7       	rjmp	.+3742   	; 0x194a <__stack+0x10eb>
	}
		}	
else{	
	if((OperandsCounter>1))/*Honstly it's for 3 operands only and two different  operation*/
     aac:	22 30       	cpi	r18, 0x02	; 2
     aae:	08 f4       	brcc	.+2      	; 0xab2 <__stack+0x253>
     ab0:	de c0       	rjmp	.+444    	; 0xc6e <__stack+0x40f>
	{
		/*yeah this technique is very bad ,if you made a generic way or fast one that could be extended
		to more different operands,please content me*/
		uint8 code=0;
		if(Operations[0]=='*' && Operations[1] == '+') code=1;
     ab2:	80 91 1c 02 	lds	r24, 0x021C
     ab6:	8a 32       	cpi	r24, 0x2A	; 42
     ab8:	29 f4       	brne	.+10     	; 0xac4 <__stack+0x265>
     aba:	90 91 1d 02 	lds	r25, 0x021D
     abe:	9b 32       	cpi	r25, 0x2B	; 43
     ac0:	59 f4       	brne	.+22     	; 0xad8 <__stack+0x279>
     ac2:	48 c0       	rjmp	.+144    	; 0xb54 <__stack+0x2f5>
		else if(Operations[0]=='+' && Operations[1] == '*') code=2;
     ac4:	8b 32       	cpi	r24, 0x2B	; 43
     ac6:	41 f4       	brne	.+16     	; 0xad8 <__stack+0x279>
     ac8:	90 91 1d 02 	lds	r25, 0x021D
     acc:	9a 32       	cpi	r25, 0x2A	; 42
     ace:	09 f4       	brne	.+2      	; 0xad2 <__stack+0x273>
     ad0:	d2 c0       	rjmp	.+420    	; 0xc76 <__stack+0x417>
		else if(Operations[0]=='+' && Operations[1] == '-') code=3;
     ad2:	9d 32       	cpi	r25, 0x2D	; 45
     ad4:	41 f4       	brne	.+16     	; 0xae6 <__stack+0x287>
     ad6:	60 c1       	rjmp	.+704    	; 0xd98 <__stack+0x539>
		else if(Operations[0]=='-' && Operations[1] == '+') code=4;
     ad8:	8d 32       	cpi	r24, 0x2D	; 45
     ada:	29 f4       	brne	.+10     	; 0xae6 <__stack+0x287>
     adc:	90 91 1d 02 	lds	r25, 0x021D
     ae0:	9b 32       	cpi	r25, 0x2B	; 43
     ae2:	41 f4       	brne	.+16     	; 0xaf4 <__stack+0x295>
     ae4:	42 c2       	rjmp	.+1156   	; 0xf6a <__stack+0x70b>
		else if(Operations[0]=='*' && Operations[1] == '%') code=5;
     ae6:	8a 32       	cpi	r24, 0x2A	; 42
     ae8:	29 f4       	brne	.+10     	; 0xaf4 <__stack+0x295>
     aea:	90 91 1d 02 	lds	r25, 0x021D
     aee:	95 32       	cpi	r25, 0x25	; 37
     af0:	59 f4       	brne	.+22     	; 0xb08 <__stack+0x2a9>
     af2:	20 c3       	rjmp	.+1600   	; 0x1134 <__stack+0x8d5>
		else if(Operations[0]=='%' && Operations[1] == '*') code=6;
     af4:	85 32       	cpi	r24, 0x25	; 37
     af6:	41 f4       	brne	.+16     	; 0xb08 <__stack+0x2a9>
     af8:	90 91 1d 02 	lds	r25, 0x021D
     afc:	9a 32       	cpi	r25, 0x2A	; 42
     afe:	09 f4       	brne	.+2      	; 0xb02 <__stack+0x2a3>
     b00:	6a c3       	rjmp	.+1748   	; 0x11d6 <__stack+0x977>
		else if(Operations[0]=='%' && Operations[1] == '+') code=7;
     b02:	9b 32       	cpi	r25, 0x2B	; 43
     b04:	41 f4       	brne	.+16     	; 0xb16 <__stack+0x2b7>
     b06:	a4 c3       	rjmp	.+1864   	; 0x1250 <__stack+0x9f1>
		else if(Operations[0]=='+' && Operations[1] == '%') code=8;
     b08:	8b 32       	cpi	r24, 0x2B	; 43
     b0a:	29 f4       	brne	.+10     	; 0xb16 <__stack+0x2b7>
     b0c:	90 91 1d 02 	lds	r25, 0x021D
     b10:	95 32       	cpi	r25, 0x25	; 37
     b12:	41 f4       	brne	.+16     	; 0xb24 <__stack+0x2c5>
     b14:	27 c4       	rjmp	.+2126   	; 0x1364 <__stack+0xb05>
		else if(Operations[0]=='*' && Operations[1] == '-') code=9;
     b16:	8a 32       	cpi	r24, 0x2A	; 42
     b18:	29 f4       	brne	.+10     	; 0xb24 <__stack+0x2c5>
     b1a:	90 91 1d 02 	lds	r25, 0x021D
     b1e:	9d 32       	cpi	r25, 0x2D	; 45
     b20:	41 f4       	brne	.+16     	; 0xb32 <__stack+0x2d3>
     b22:	aa c4       	rjmp	.+2388   	; 0x1478 <__stack+0xc19>
		else if(Operations[0]=='-' && Operations[1] == '*') code=10;
     b24:	8d 32       	cpi	r24, 0x2D	; 45
     b26:	29 f4       	brne	.+10     	; 0xb32 <__stack+0x2d3>
     b28:	90 91 1d 02 	lds	r25, 0x021D
     b2c:	9a 32       	cpi	r25, 0x2A	; 42
     b2e:	49 f4       	brne	.+18     	; 0xb42 <__stack+0x2e3>
     b30:	33 c5       	rjmp	.+2662   	; 0x1598 <__stack+0xd39>
		else if(Operations[0]=='%' && Operations[1] == '-') code=11;
     b32:	85 32       	cpi	r24, 0x25	; 37
     b34:	31 f4       	brne	.+12     	; 0xb42 <__stack+0x2e3>
     b36:	80 91 1d 02 	lds	r24, 0x021D
     b3a:	8d 32       	cpi	r24, 0x2D	; 45
     b3c:	09 f0       	breq	.+2      	; 0xb40 <__stack+0x2e1>
     b3e:	00 c7       	rjmp	.+3584   	; 0x1940 <__stack+0x10e1>
     b40:	cd c5       	rjmp	.+2970   	; 0x16dc <__stack+0xe7d>
		else if(Operations[0]=='-' && Operations[1] == '%') code=12;
     b42:	8d 32       	cpi	r24, 0x2D	; 45
     b44:	09 f0       	breq	.+2      	; 0xb48 <__stack+0x2e9>
     b46:	fc c6       	rjmp	.+3576   	; 0x1940 <__stack+0x10e1>
     b48:	80 91 1d 02 	lds	r24, 0x021D
     b4c:	85 32       	cpi	r24, 0x25	; 37
     b4e:	09 f0       	breq	.+2      	; 0xb52 <__stack+0x2f3>
     b50:	f7 c6       	rjmp	.+3566   	; 0x1940 <__stack+0x10e1>
     b52:	54 c6       	rjmp	.+3240   	; 0x17fc <__stack+0xf9d>
		else code =0; 
		
		switch(code){
			case 1: Result=(Operands[0]*Operands[1])+Operands[2]; break;
     b54:	cc ea       	ldi	r28, 0xAC	; 172
     b56:	d1 e0       	ldi	r29, 0x01	; 1
     b58:	fe 01       	movw	r30, r28
     b5a:	38 96       	adiw	r30, 0x08	; 8
     b5c:	20 91 ac 01 	lds	r18, 0x01AC
     b60:	30 91 ad 01 	lds	r19, 0x01AD
     b64:	40 91 ae 01 	lds	r20, 0x01AE
     b68:	50 91 af 01 	lds	r21, 0x01AF
     b6c:	60 91 b0 01 	lds	r22, 0x01B0
     b70:	70 91 b1 01 	lds	r23, 0x01B1
     b74:	80 91 b2 01 	lds	r24, 0x01B2
     b78:	90 91 b3 01 	lds	r25, 0x01B3
     b7c:	a0 90 b4 01 	lds	r10, 0x01B4
     b80:	b1 80       	ldd	r11, Z+1	; 0x01
     b82:	c2 80       	ldd	r12, Z+2	; 0x02
     b84:	d3 80       	ldd	r13, Z+3	; 0x03
     b86:	e4 80       	ldd	r14, Z+4	; 0x04
     b88:	f5 80       	ldd	r15, Z+5	; 0x05
     b8a:	06 81       	ldd	r16, Z+6	; 0x06
     b8c:	17 81       	ldd	r17, Z+7	; 0x07
     b8e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__muldi3>
     b92:	60 96       	adiw	r28, 0x10	; 16
     b94:	f0 91 bc 01 	lds	r31, 0x01BC
     b98:	e9 81       	ldd	r30, Y+1	; 0x01
     b9a:	ea 80       	ldd	r14, Y+2	; 0x02
     b9c:	bb 81       	ldd	r27, Y+3	; 0x03
     b9e:	ac 81       	ldd	r26, Y+4	; 0x04
     ba0:	fd 80       	ldd	r15, Y+5	; 0x05
     ba2:	0e 81       	ldd	r16, Y+6	; 0x06
     ba4:	1f 81       	ldd	r17, Y+7	; 0x07
     ba6:	d2 2f       	mov	r29, r18
     ba8:	df 0f       	add	r29, r31
     baa:	c1 e0       	ldi	r28, 0x01	; 1
     bac:	d2 17       	cp	r29, r18
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <__stack+0x353>
     bb0:	c0 e0       	ldi	r28, 0x00	; 0
     bb2:	e3 0f       	add	r30, r19
     bb4:	f1 e0       	ldi	r31, 0x01	; 1
     bb6:	e3 17       	cp	r30, r19
     bb8:	08 f0       	brcs	.+2      	; 0xbbc <__stack+0x35d>
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	ce 0f       	add	r28, r30
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	ce 17       	cp	r28, r30
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <__stack+0x367>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	f2 2b       	or	r31, r18
     bc8:	34 2f       	mov	r19, r20
     bca:	3e 0d       	add	r19, r14
     bcc:	e1 e0       	ldi	r30, 0x01	; 1
     bce:	34 17       	cp	r19, r20
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <__stack+0x375>
     bd2:	e0 e0       	ldi	r30, 0x00	; 0
     bd4:	f3 0f       	add	r31, r19
     bd6:	21 e0       	ldi	r18, 0x01	; 1
     bd8:	f3 17       	cp	r31, r19
     bda:	08 f0       	brcs	.+2      	; 0xbde <__stack+0x37f>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	e2 2b       	or	r30, r18
     be0:	45 2f       	mov	r20, r21
     be2:	4b 0f       	add	r20, r27
     be4:	31 e0       	ldi	r19, 0x01	; 1
     be6:	45 17       	cp	r20, r21
     be8:	08 f0       	brcs	.+2      	; 0xbec <__stack+0x38d>
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	e4 0f       	add	r30, r20
     bee:	21 e0       	ldi	r18, 0x01	; 1
     bf0:	e4 17       	cp	r30, r20
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <__stack+0x397>
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	32 2b       	or	r19, r18
     bf8:	a6 0f       	add	r26, r22
     bfa:	41 e0       	ldi	r20, 0x01	; 1
     bfc:	a6 17       	cp	r26, r22
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <__stack+0x3a3>
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	b3 2f       	mov	r27, r19
     c04:	ba 0f       	add	r27, r26
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	ba 17       	cp	r27, r26
     c0a:	08 f0       	brcs	.+2      	; 0xc0e <__stack+0x3af>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	42 2b       	or	r20, r18
     c10:	67 2f       	mov	r22, r23
     c12:	6f 0d       	add	r22, r15
     c14:	31 e0       	ldi	r19, 0x01	; 1
     c16:	67 17       	cp	r22, r23
     c18:	08 f0       	brcs	.+2      	; 0xc1c <__stack+0x3bd>
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	46 0f       	add	r20, r22
     c1e:	21 e0       	ldi	r18, 0x01	; 1
     c20:	46 17       	cp	r20, r22
     c22:	08 f0       	brcs	.+2      	; 0xc26 <__stack+0x3c7>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	32 2b       	or	r19, r18
     c28:	58 2f       	mov	r21, r24
     c2a:	50 0f       	add	r21, r16
     c2c:	21 e0       	ldi	r18, 0x01	; 1
     c2e:	58 17       	cp	r21, r24
     c30:	08 f0       	brcs	.+2      	; 0xc34 <__stack+0x3d5>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	83 2f       	mov	r24, r19
     c36:	85 0f       	add	r24, r21
     c38:	31 e0       	ldi	r19, 0x01	; 1
     c3a:	85 17       	cp	r24, r21
     c3c:	08 f0       	brcs	.+2      	; 0xc40 <__stack+0x3e1>
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	23 2b       	or	r18, r19
     c42:	91 0f       	add	r25, r17
     c44:	29 0f       	add	r18, r25
     c46:	d0 93 a4 01 	sts	0x01A4, r29
     c4a:	c0 93 a5 01 	sts	0x01A5, r28
     c4e:	f0 93 a6 01 	sts	0x01A6, r31
     c52:	e0 93 a7 01 	sts	0x01A7, r30
     c56:	b0 93 a8 01 	sts	0x01A8, r27
     c5a:	40 93 a9 01 	sts	0x01A9, r20
     c5e:	80 93 aa 01 	sts	0x01AA, r24
     c62:	20 93 ab 01 	sts	0x01AB, r18
					ThrowException("PiorityError");
					Flag=StartPoint;
					break;
				}
		}	
		Flag=DisplayPoint;
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	80 93 60 00 	sts	0x0060, r24
		return;
     c6c:	6e c6       	rjmp	.+3292   	; 0x194a <__stack+0x10eb>
	}
		}
		
			
	Flag=DisplayPoint;
     c6e:	84 e0       	ldi	r24, 0x04	; 4
     c70:	80 93 60 00 	sts	0x0060, r24
	return;
     c74:	6a c6       	rjmp	.+3284   	; 0x194a <__stack+0x10eb>
		else if(Operations[0]=='-' && Operations[1] == '%') code=12;
		else code =0; 
		
		switch(code){
			case 1: Result=(Operands[0]*Operands[1])+Operands[2]; break;
			case 2: Result=Operands[0]+(Operands[1]*Operands[2]); break;
     c76:	ec ea       	ldi	r30, 0xAC	; 172
     c78:	f1 e0       	ldi	r31, 0x01	; 1
     c7a:	df 01       	movw	r26, r30
     c7c:	18 96       	adiw	r26, 0x08	; 8
     c7e:	70 96       	adiw	r30, 0x10	; 16
     c80:	20 91 b4 01 	lds	r18, 0x01B4
     c84:	11 96       	adiw	r26, 0x01	; 1
     c86:	3c 91       	ld	r19, X
     c88:	11 97       	sbiw	r26, 0x01	; 1
     c8a:	12 96       	adiw	r26, 0x02	; 2
     c8c:	4c 91       	ld	r20, X
     c8e:	12 97       	sbiw	r26, 0x02	; 2
     c90:	13 96       	adiw	r26, 0x03	; 3
     c92:	5c 91       	ld	r21, X
     c94:	13 97       	sbiw	r26, 0x03	; 3
     c96:	14 96       	adiw	r26, 0x04	; 4
     c98:	6c 91       	ld	r22, X
     c9a:	14 97       	sbiw	r26, 0x04	; 4
     c9c:	15 96       	adiw	r26, 0x05	; 5
     c9e:	7c 91       	ld	r23, X
     ca0:	15 97       	sbiw	r26, 0x05	; 5
     ca2:	16 96       	adiw	r26, 0x06	; 6
     ca4:	8c 91       	ld	r24, X
     ca6:	16 97       	sbiw	r26, 0x06	; 6
     ca8:	17 96       	adiw	r26, 0x07	; 7
     caa:	9c 91       	ld	r25, X
     cac:	a0 90 bc 01 	lds	r10, 0x01BC
     cb0:	b1 80       	ldd	r11, Z+1	; 0x01
     cb2:	c2 80       	ldd	r12, Z+2	; 0x02
     cb4:	d3 80       	ldd	r13, Z+3	; 0x03
     cb6:	e4 80       	ldd	r14, Z+4	; 0x04
     cb8:	f5 80       	ldd	r15, Z+5	; 0x05
     cba:	06 81       	ldd	r16, Z+6	; 0x06
     cbc:	17 81       	ldd	r17, Z+7	; 0x07
     cbe:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__muldi3>
     cc2:	f0 91 ac 01 	lds	r31, 0x01AC
     cc6:	e0 91 ad 01 	lds	r30, 0x01AD
     cca:	f0 90 ae 01 	lds	r15, 0x01AE
     cce:	00 91 af 01 	lds	r16, 0x01AF
     cd2:	a0 91 b0 01 	lds	r26, 0x01B0
     cd6:	d0 91 b1 01 	lds	r29, 0x01B1
     cda:	c0 91 b2 01 	lds	r28, 0x01B2
     cde:	10 91 b3 01 	lds	r17, 0x01B3
     ce2:	2f 0f       	add	r18, r31
     ce4:	b1 e0       	ldi	r27, 0x01	; 1
     ce6:	2f 17       	cp	r18, r31
     ce8:	08 f0       	brcs	.+2      	; 0xcec <__stack+0x48d>
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	3e 0f       	add	r19, r30
     cee:	f1 e0       	ldi	r31, 0x01	; 1
     cf0:	3e 17       	cp	r19, r30
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <__stack+0x497>
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	b3 0f       	add	r27, r19
     cf8:	e1 e0       	ldi	r30, 0x01	; 1
     cfa:	b3 17       	cp	r27, r19
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <__stack+0x4a1>
     cfe:	e0 e0       	ldi	r30, 0x00	; 0
     d00:	fe 2b       	or	r31, r30
     d02:	4f 0d       	add	r20, r15
     d04:	e1 e0       	ldi	r30, 0x01	; 1
     d06:	4f 15       	cp	r20, r15
     d08:	08 f0       	brcs	.+2      	; 0xd0c <__stack+0x4ad>
     d0a:	e0 e0       	ldi	r30, 0x00	; 0
     d0c:	f4 0f       	add	r31, r20
     d0e:	31 e0       	ldi	r19, 0x01	; 1
     d10:	f4 17       	cp	r31, r20
     d12:	08 f0       	brcs	.+2      	; 0xd16 <__stack+0x4b7>
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	e3 2b       	or	r30, r19
     d18:	50 0f       	add	r21, r16
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	50 17       	cp	r21, r16
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <__stack+0x4c3>
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	e5 0f       	add	r30, r21
     d24:	31 e0       	ldi	r19, 0x01	; 1
     d26:	e5 17       	cp	r30, r21
     d28:	08 f0       	brcs	.+2      	; 0xd2c <__stack+0x4cd>
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	43 2b       	or	r20, r19
     d2e:	6a 0f       	add	r22, r26
     d30:	51 e0       	ldi	r21, 0x01	; 1
     d32:	6a 17       	cp	r22, r26
     d34:	08 f0       	brcs	.+2      	; 0xd38 <__stack+0x4d9>
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	a4 2f       	mov	r26, r20
     d3a:	a6 0f       	add	r26, r22
     d3c:	31 e0       	ldi	r19, 0x01	; 1
     d3e:	a6 17       	cp	r26, r22
     d40:	08 f0       	brcs	.+2      	; 0xd44 <__stack+0x4e5>
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	53 2b       	or	r21, r19
     d46:	7d 0f       	add	r23, r29
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	7d 17       	cp	r23, r29
     d4c:	08 f0       	brcs	.+2      	; 0xd50 <__stack+0x4f1>
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	57 0f       	add	r21, r23
     d52:	31 e0       	ldi	r19, 0x01	; 1
     d54:	57 17       	cp	r21, r23
     d56:	08 f0       	brcs	.+2      	; 0xd5a <__stack+0x4fb>
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	43 2b       	or	r20, r19
     d5c:	8c 0f       	add	r24, r28
     d5e:	31 e0       	ldi	r19, 0x01	; 1
     d60:	8c 17       	cp	r24, r28
     d62:	08 f0       	brcs	.+2      	; 0xd66 <__stack+0x507>
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	48 0f       	add	r20, r24
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	48 17       	cp	r20, r24
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <__stack+0x511>
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	36 2b       	or	r19, r22
     d72:	91 0f       	add	r25, r17
     d74:	39 0f       	add	r19, r25
     d76:	20 93 a4 01 	sts	0x01A4, r18
     d7a:	b0 93 a5 01 	sts	0x01A5, r27
     d7e:	f0 93 a6 01 	sts	0x01A6, r31
     d82:	e0 93 a7 01 	sts	0x01A7, r30
     d86:	a0 93 a8 01 	sts	0x01A8, r26
     d8a:	50 93 a9 01 	sts	0x01A9, r21
     d8e:	40 93 aa 01 	sts	0x01AA, r20
     d92:	30 93 ab 01 	sts	0x01AB, r19
     d96:	67 cf       	rjmp	.-306    	; 0xc66 <__stack+0x407>
			case 3: Result=Operands[0]+(Operands[1]-Operands[2]); break;
     d98:	ec ea       	ldi	r30, 0xAC	; 172
     d9a:	f1 e0       	ldi	r31, 0x01	; 1
     d9c:	df 01       	movw	r26, r30
     d9e:	18 96       	adiw	r26, 0x08	; 8
     da0:	70 96       	adiw	r30, 0x10	; 16
     da2:	80 91 b4 01 	lds	r24, 0x01B4
     da6:	11 96       	adiw	r26, 0x01	; 1
     da8:	2c 91       	ld	r18, X
     daa:	11 97       	sbiw	r26, 0x01	; 1
     dac:	12 96       	adiw	r26, 0x02	; 2
     dae:	dc 91       	ld	r29, X
     db0:	12 97       	sbiw	r26, 0x02	; 2
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	7c 91       	ld	r23, X
     db6:	13 97       	sbiw	r26, 0x03	; 3
     db8:	14 96       	adiw	r26, 0x04	; 4
     dba:	6c 91       	ld	r22, X
     dbc:	14 97       	sbiw	r26, 0x04	; 4
     dbe:	15 96       	adiw	r26, 0x05	; 5
     dc0:	5c 91       	ld	r21, X
     dc2:	15 97       	sbiw	r26, 0x05	; 5
     dc4:	16 96       	adiw	r26, 0x06	; 6
     dc6:	cc 91       	ld	r28, X
     dc8:	16 97       	sbiw	r26, 0x06	; 6
     dca:	17 96       	adiw	r26, 0x07	; 7
     dcc:	3c 91       	ld	r19, X
     dce:	40 91 bc 01 	lds	r20, 0x01BC
     dd2:	91 81       	ldd	r25, Z+1	; 0x01
     dd4:	d2 80       	ldd	r13, Z+2	; 0x02
     dd6:	e3 80       	ldd	r14, Z+3	; 0x03
     dd8:	f4 80       	ldd	r15, Z+4	; 0x04
     dda:	05 81       	ldd	r16, Z+5	; 0x05
     ddc:	16 81       	ldd	r17, Z+6	; 0x06
     dde:	a7 81       	ldd	r26, Z+7	; 0x07
     de0:	b8 2f       	mov	r27, r24
     de2:	b4 1b       	sub	r27, r20
     de4:	41 e0       	ldi	r20, 0x01	; 1
     de6:	8b 17       	cp	r24, r27
     de8:	08 f0       	brcs	.+2      	; 0xdec <__stack+0x58d>
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	82 2f       	mov	r24, r18
     dee:	89 1b       	sub	r24, r25
     df0:	98 2f       	mov	r25, r24
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	29 17       	cp	r18, r25
     df6:	08 f0       	brcs	.+2      	; 0xdfa <__stack+0x59b>
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	29 2f       	mov	r18, r25
     dfc:	24 1b       	sub	r18, r20
     dfe:	41 e0       	ldi	r20, 0x01	; 1
     e00:	92 17       	cp	r25, r18
     e02:	08 f0       	brcs	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	84 2b       	or	r24, r20
     e08:	4d 2f       	mov	r20, r29
     e0a:	4d 19       	sub	r20, r13
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	d4 17       	cp	r29, r20
     e10:	08 f0       	brcs	.+2      	; 0xe14 <__stack+0x5b5>
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	e4 2f       	mov	r30, r20
     e16:	e8 1b       	sub	r30, r24
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	4e 17       	cp	r20, r30
     e1c:	08 f0       	brcs	.+2      	; 0xe20 <__stack+0x5c1>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	98 2b       	or	r25, r24
     e22:	47 2f       	mov	r20, r23
     e24:	4e 19       	sub	r20, r14
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	74 17       	cp	r23, r20
     e2a:	08 f0       	brcs	.+2      	; 0xe2e <__stack+0x5cf>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	74 2f       	mov	r23, r20
     e30:	79 1b       	sub	r23, r25
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	47 17       	cp	r20, r23
     e36:	08 f0       	brcs	.+2      	; 0xe3a <__stack+0x5db>
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	89 2b       	or	r24, r25
     e3c:	46 2f       	mov	r20, r22
     e3e:	4f 19       	sub	r20, r15
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	64 17       	cp	r22, r20
     e44:	08 f0       	brcs	.+2      	; 0xe48 <__stack+0x5e9>
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	64 2f       	mov	r22, r20
     e4a:	68 1b       	sub	r22, r24
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	46 17       	cp	r20, r22
     e50:	08 f0       	brcs	.+2      	; 0xe54 <__stack+0x5f5>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	98 2b       	or	r25, r24
     e56:	45 2f       	mov	r20, r21
     e58:	40 1b       	sub	r20, r16
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	54 17       	cp	r21, r20
     e5e:	08 f0       	brcs	.+2      	; 0xe62 <__stack+0x603>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	54 2f       	mov	r21, r20
     e64:	59 1b       	sub	r21, r25
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	45 17       	cp	r20, r21
     e6a:	08 f0       	brcs	.+2      	; 0xe6e <__stack+0x60f>
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	89 2b       	or	r24, r25
     e70:	fc 2f       	mov	r31, r28
     e72:	f1 1b       	sub	r31, r17
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	cf 17       	cp	r28, r31
     e78:	08 f0       	brcs	.+2      	; 0xe7c <__stack+0x61d>
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	4f 2f       	mov	r20, r31
     e7e:	48 1b       	sub	r20, r24
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	f4 17       	cp	r31, r20
     e84:	08 f0       	brcs	.+2      	; 0xe88 <__stack+0x629>
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	98 2b       	or	r25, r24
     e8a:	3a 1b       	sub	r19, r26
     e8c:	39 1b       	sub	r19, r25
     e8e:	90 91 ac 01 	lds	r25, 0x01AC
     e92:	80 91 ad 01 	lds	r24, 0x01AD
     e96:	f0 91 ae 01 	lds	r31, 0x01AE
     e9a:	00 91 af 01 	lds	r16, 0x01AF
     e9e:	10 91 b0 01 	lds	r17, 0x01B0
     ea2:	d0 91 b1 01 	lds	r29, 0x01B1
     ea6:	c0 91 b2 01 	lds	r28, 0x01B2
     eaa:	f0 90 b3 01 	lds	r15, 0x01B3
     eae:	b9 0f       	add	r27, r25
     eb0:	a1 e0       	ldi	r26, 0x01	; 1
     eb2:	b9 17       	cp	r27, r25
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <__stack+0x659>
     eb6:	a0 e0       	ldi	r26, 0x00	; 0
     eb8:	28 0f       	add	r18, r24
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	28 17       	cp	r18, r24
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <__stack+0x663>
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	a2 0f       	add	r26, r18
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	a2 17       	cp	r26, r18
     ec8:	08 f0       	brcs	.+2      	; 0xecc <__stack+0x66d>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	98 2b       	or	r25, r24
     ece:	ef 0f       	add	r30, r31
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	ef 17       	cp	r30, r31
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <__stack+0x679>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	f9 2f       	mov	r31, r25
     eda:	fe 0f       	add	r31, r30
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	fe 17       	cp	r31, r30
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <__stack+0x685>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	28 2b       	or	r18, r24
     ee6:	70 0f       	add	r23, r16
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	70 17       	cp	r23, r16
     eec:	08 f0       	brcs	.+2      	; 0xef0 <__stack+0x691>
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	e2 2f       	mov	r30, r18
     ef2:	e7 0f       	add	r30, r23
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	e7 17       	cp	r30, r23
     ef8:	08 f0       	brcs	.+2      	; 0xefc <__stack+0x69d>
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	98 2b       	or	r25, r24
     efe:	61 0f       	add	r22, r17
     f00:	21 e0       	ldi	r18, 0x01	; 1
     f02:	61 17       	cp	r22, r17
     f04:	08 f0       	brcs	.+2      	; 0xf08 <__stack+0x6a9>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	79 2f       	mov	r23, r25
     f0a:	76 0f       	add	r23, r22
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	76 17       	cp	r23, r22
     f10:	08 f0       	brcs	.+2      	; 0xf14 <__stack+0x6b5>
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	28 2b       	or	r18, r24
     f16:	5d 0f       	add	r21, r29
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	5d 17       	cp	r21, r29
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <__stack+0x6c1>
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	25 0f       	add	r18, r21
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	25 17       	cp	r18, r21
     f26:	08 f0       	brcs	.+2      	; 0xf2a <__stack+0x6cb>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	98 2b       	or	r25, r24
     f2c:	4c 0f       	add	r20, r28
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	4c 17       	cp	r20, r28
     f32:	08 f0       	brcs	.+2      	; 0xf36 <__stack+0x6d7>
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	59 2f       	mov	r21, r25
     f38:	54 0f       	add	r21, r20
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	54 17       	cp	r21, r20
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <__stack+0x6e3>
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	89 2b       	or	r24, r25
     f44:	3f 0d       	add	r19, r15
     f46:	83 0f       	add	r24, r19
     f48:	b0 93 a4 01 	sts	0x01A4, r27
     f4c:	a0 93 a5 01 	sts	0x01A5, r26
     f50:	f0 93 a6 01 	sts	0x01A6, r31
     f54:	e0 93 a7 01 	sts	0x01A7, r30
     f58:	70 93 a8 01 	sts	0x01A8, r23
     f5c:	20 93 a9 01 	sts	0x01A9, r18
     f60:	50 93 aa 01 	sts	0x01AA, r21
     f64:	80 93 ab 01 	sts	0x01AB, r24
     f68:	7e ce       	rjmp	.-772    	; 0xc66 <__stack+0x407>
			case 4: Result=(Operands[0]-Operands[1])+Operands[2]; break;
     f6a:	e4 eb       	ldi	r30, 0xB4	; 180
     f6c:	f1 e0       	ldi	r31, 0x01	; 1
     f6e:	90 91 ac 01 	lds	r25, 0x01AC
     f72:	80 91 ad 01 	lds	r24, 0x01AD
     f76:	30 91 ae 01 	lds	r19, 0x01AE
     f7a:	20 91 af 01 	lds	r18, 0x01AF
     f7e:	a0 91 b0 01 	lds	r26, 0x01B0
     f82:	60 91 b1 01 	lds	r22, 0x01B1
     f86:	00 91 b2 01 	lds	r16, 0x01B2
     f8a:	f0 90 b3 01 	lds	r15, 0x01B3
     f8e:	40 91 b4 01 	lds	r20, 0x01B4
     f92:	51 81       	ldd	r21, Z+1	; 0x01
     f94:	c2 81       	ldd	r28, Z+2	; 0x02
     f96:	b3 81       	ldd	r27, Z+3	; 0x03
     f98:	c4 80       	ldd	r12, Z+4	; 0x04
     f9a:	75 81       	ldd	r23, Z+5	; 0x05
     f9c:	d6 80       	ldd	r13, Z+6	; 0x06
     f9e:	e7 80       	ldd	r14, Z+7	; 0x07
     fa0:	19 2f       	mov	r17, r25
     fa2:	14 1b       	sub	r17, r20
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	91 17       	cp	r25, r17
     fa8:	08 f0       	brcs	.+2      	; 0xfac <__stack+0x74d>
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	98 2f       	mov	r25, r24
     fae:	95 1b       	sub	r25, r21
     fb0:	59 2f       	mov	r21, r25
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	85 17       	cp	r24, r21
     fb6:	08 f0       	brcs	.+2      	; 0xfba <__stack+0x75b>
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	d5 2f       	mov	r29, r21
     fbc:	d4 1b       	sub	r29, r20
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	5d 17       	cp	r21, r29
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <__stack+0x767>
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	98 2b       	or	r25, r24
     fc8:	5d 2f       	mov	r21, r29
     fca:	43 2f       	mov	r20, r19
     fcc:	4c 1b       	sub	r20, r28
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	34 17       	cp	r19, r20
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <__stack+0x777>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	c4 2f       	mov	r28, r20
     fd8:	c9 1b       	sub	r28, r25
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	4c 17       	cp	r20, r28
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <__stack+0x783>
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	89 2b       	or	r24, r25
     fe4:	4c 2f       	mov	r20, r28
     fe6:	32 2f       	mov	r19, r18
     fe8:	3b 1b       	sub	r19, r27
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	23 17       	cp	r18, r19
     fee:	08 f0       	brcs	.+2      	; 0xff2 <__stack+0x793>
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	b3 2f       	mov	r27, r19
     ff4:	b8 1b       	sub	r27, r24
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	3b 17       	cp	r19, r27
     ffa:	08 f0       	brcs	.+2      	; 0xffe <__stack+0x79f>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	98 2b       	or	r25, r24
    1000:	3b 2f       	mov	r19, r27
    1002:	2a 2f       	mov	r18, r26
    1004:	2c 19       	sub	r18, r12
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	a2 17       	cp	r26, r18
    100a:	08 f0       	brcs	.+2      	; 0x100e <__stack+0x7af>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	a2 2f       	mov	r26, r18
    1010:	a9 1b       	sub	r26, r25
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	2a 17       	cp	r18, r26
    1016:	08 f0       	brcs	.+2      	; 0x101a <__stack+0x7bb>
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	89 2b       	or	r24, r25
    101c:	2a 2f       	mov	r18, r26
    101e:	96 2f       	mov	r25, r22
    1020:	97 1b       	sub	r25, r23
    1022:	71 e0       	ldi	r23, 0x01	; 1
    1024:	69 17       	cp	r22, r25
    1026:	08 f0       	brcs	.+2      	; 0x102a <__stack+0x7cb>
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	f9 2f       	mov	r31, r25
    102c:	f8 1b       	sub	r31, r24
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	9f 17       	cp	r25, r31
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__stack+0x7d7>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	78 2b       	or	r23, r24
    1038:	9f 2f       	mov	r25, r31
    103a:	80 2f       	mov	r24, r16
    103c:	8d 19       	sub	r24, r13
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	08 17       	cp	r16, r24
    1042:	08 f0       	brcs	.+2      	; 0x1046 <__stack+0x7e7>
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	e8 2f       	mov	r30, r24
    1048:	e7 1b       	sub	r30, r23
    104a:	71 e0       	ldi	r23, 0x01	; 1
    104c:	8e 17       	cp	r24, r30
    104e:	08 f0       	brcs	.+2      	; 0x1052 <__stack+0x7f3>
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	67 2b       	or	r22, r23
    1054:	8e 2f       	mov	r24, r30
    1056:	7f 2d       	mov	r23, r15
    1058:	7e 19       	sub	r23, r14
    105a:	76 1b       	sub	r23, r22
    105c:	00 91 bc 01 	lds	r16, 0x01BC
    1060:	60 91 bd 01 	lds	r22, 0x01BD
    1064:	90 90 be 01 	lds	r9, 0x01BE
    1068:	a0 90 bf 01 	lds	r10, 0x01BF
    106c:	c0 90 c0 01 	lds	r12, 0x01C0
    1070:	d0 90 c1 01 	lds	r13, 0x01C1
    1074:	e0 90 c2 01 	lds	r14, 0x01C2
    1078:	f0 90 c3 01 	lds	r15, 0x01C3
    107c:	01 0f       	add	r16, r17
    107e:	bb 24       	eor	r11, r11
    1080:	b3 94       	inc	r11
    1082:	01 17       	cp	r16, r17
    1084:	08 f0       	brcs	.+2      	; 0x1088 <__stack+0x829>
    1086:	bb 24       	eor	r11, r11
    1088:	d6 0f       	add	r29, r22
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	d5 17       	cp	r29, r21
    108e:	08 f0       	brcs	.+2      	; 0x1092 <__stack+0x833>
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	1b 2d       	mov	r17, r11
    1094:	1d 0f       	add	r17, r29
    1096:	51 e0       	ldi	r21, 0x01	; 1
    1098:	1d 17       	cp	r17, r29
    109a:	08 f0       	brcs	.+2      	; 0x109e <__stack+0x83f>
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	65 2b       	or	r22, r21
    10a0:	c9 0d       	add	r28, r9
    10a2:	51 e0       	ldi	r21, 0x01	; 1
    10a4:	c4 17       	cp	r28, r20
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <__stack+0x84b>
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	6c 0f       	add	r22, r28
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	6c 17       	cp	r22, r28
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <__stack+0x855>
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	54 2b       	or	r21, r20
    10b6:	ba 0d       	add	r27, r10
    10b8:	41 e0       	ldi	r20, 0x01	; 1
    10ba:	b3 17       	cp	r27, r19
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <__stack+0x861>
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	5b 0f       	add	r21, r27
    10c2:	31 e0       	ldi	r19, 0x01	; 1
    10c4:	5b 17       	cp	r21, r27
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <__stack+0x86b>
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	43 2b       	or	r20, r19
    10cc:	ac 0d       	add	r26, r12
    10ce:	31 e0       	ldi	r19, 0x01	; 1
    10d0:	a2 17       	cp	r26, r18
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <__stack+0x877>
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	4a 0f       	add	r20, r26
    10d8:	21 e0       	ldi	r18, 0x01	; 1
    10da:	4a 17       	cp	r20, r26
    10dc:	08 f0       	brcs	.+2      	; 0x10e0 <__stack+0x881>
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	32 2b       	or	r19, r18
    10e2:	fd 0d       	add	r31, r13
    10e4:	21 e0       	ldi	r18, 0x01	; 1
    10e6:	f9 17       	cp	r31, r25
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <__stack+0x88d>
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f 0f       	add	r19, r31
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	3f 17       	cp	r19, r31
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <__stack+0x897>
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	29 2b       	or	r18, r25
    10f8:	ee 0d       	add	r30, r14
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	e8 17       	cp	r30, r24
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <__stack+0x8a3>
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	2e 0f       	add	r18, r30
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	2e 17       	cp	r18, r30
    1108:	08 f0       	brcs	.+2      	; 0x110c <__stack+0x8ad>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	98 2b       	or	r25, r24
    110e:	7f 0d       	add	r23, r15
    1110:	97 0f       	add	r25, r23
    1112:	00 93 a4 01 	sts	0x01A4, r16
    1116:	10 93 a5 01 	sts	0x01A5, r17
    111a:	60 93 a6 01 	sts	0x01A6, r22
    111e:	50 93 a7 01 	sts	0x01A7, r21
    1122:	40 93 a8 01 	sts	0x01A8, r20
    1126:	30 93 a9 01 	sts	0x01A9, r19
    112a:	20 93 aa 01 	sts	0x01AA, r18
    112e:	90 93 ab 01 	sts	0x01AB, r25
    1132:	99 cd       	rjmp	.-1230   	; 0xc66 <__stack+0x407>
			case 5: Result=Operands[0]*(Operands[1]/Operands[2]); break;
    1134:	ec ea       	ldi	r30, 0xAC	; 172
    1136:	f1 e0       	ldi	r31, 0x01	; 1
    1138:	df 01       	movw	r26, r30
    113a:	18 96       	adiw	r26, 0x08	; 8
    113c:	70 96       	adiw	r30, 0x10	; 16
    113e:	20 91 b4 01 	lds	r18, 0x01B4
    1142:	11 96       	adiw	r26, 0x01	; 1
    1144:	3c 91       	ld	r19, X
    1146:	11 97       	sbiw	r26, 0x01	; 1
    1148:	12 96       	adiw	r26, 0x02	; 2
    114a:	4c 91       	ld	r20, X
    114c:	12 97       	sbiw	r26, 0x02	; 2
    114e:	13 96       	adiw	r26, 0x03	; 3
    1150:	5c 91       	ld	r21, X
    1152:	13 97       	sbiw	r26, 0x03	; 3
    1154:	14 96       	adiw	r26, 0x04	; 4
    1156:	6c 91       	ld	r22, X
    1158:	14 97       	sbiw	r26, 0x04	; 4
    115a:	15 96       	adiw	r26, 0x05	; 5
    115c:	7c 91       	ld	r23, X
    115e:	15 97       	sbiw	r26, 0x05	; 5
    1160:	16 96       	adiw	r26, 0x06	; 6
    1162:	8c 91       	ld	r24, X
    1164:	16 97       	sbiw	r26, 0x06	; 6
    1166:	17 96       	adiw	r26, 0x07	; 7
    1168:	9c 91       	ld	r25, X
    116a:	a0 90 bc 01 	lds	r10, 0x01BC
    116e:	b1 80       	ldd	r11, Z+1	; 0x01
    1170:	c2 80       	ldd	r12, Z+2	; 0x02
    1172:	d3 80       	ldd	r13, Z+3	; 0x03
    1174:	e4 80       	ldd	r14, Z+4	; 0x04
    1176:	f5 80       	ldd	r15, Z+5	; 0x05
    1178:	06 81       	ldd	r16, Z+6	; 0x06
    117a:	17 81       	ldd	r17, Z+7	; 0x07
    117c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__divdi3>
    1180:	a2 2e       	mov	r10, r18
    1182:	b3 2e       	mov	r11, r19
    1184:	c4 2e       	mov	r12, r20
    1186:	d5 2e       	mov	r13, r21
    1188:	e6 2e       	mov	r14, r22
    118a:	f7 2e       	mov	r15, r23
    118c:	08 2f       	mov	r16, r24
    118e:	19 2f       	mov	r17, r25
    1190:	20 91 ac 01 	lds	r18, 0x01AC
    1194:	30 91 ad 01 	lds	r19, 0x01AD
    1198:	40 91 ae 01 	lds	r20, 0x01AE
    119c:	50 91 af 01 	lds	r21, 0x01AF
    11a0:	60 91 b0 01 	lds	r22, 0x01B0
    11a4:	70 91 b1 01 	lds	r23, 0x01B1
    11a8:	80 91 b2 01 	lds	r24, 0x01B2
    11ac:	90 91 b3 01 	lds	r25, 0x01B3
    11b0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__muldi3>
    11b4:	20 93 a4 01 	sts	0x01A4, r18
    11b8:	30 93 a5 01 	sts	0x01A5, r19
    11bc:	40 93 a6 01 	sts	0x01A6, r20
    11c0:	50 93 a7 01 	sts	0x01A7, r21
    11c4:	60 93 a8 01 	sts	0x01A8, r22
    11c8:	70 93 a9 01 	sts	0x01A9, r23
    11cc:	80 93 aa 01 	sts	0x01AA, r24
    11d0:	90 93 ab 01 	sts	0x01AB, r25
    11d4:	48 cd       	rjmp	.-1392   	; 0xc66 <__stack+0x407>
			case 6: Result=(Operands[0]/Operands[1])*Operands[2]; break;
    11d6:	cc ea       	ldi	r28, 0xAC	; 172
    11d8:	d1 e0       	ldi	r29, 0x01	; 1
    11da:	fe 01       	movw	r30, r28
    11dc:	38 96       	adiw	r30, 0x08	; 8
    11de:	20 91 ac 01 	lds	r18, 0x01AC
    11e2:	30 91 ad 01 	lds	r19, 0x01AD
    11e6:	40 91 ae 01 	lds	r20, 0x01AE
    11ea:	50 91 af 01 	lds	r21, 0x01AF
    11ee:	60 91 b0 01 	lds	r22, 0x01B0
    11f2:	70 91 b1 01 	lds	r23, 0x01B1
    11f6:	80 91 b2 01 	lds	r24, 0x01B2
    11fa:	90 91 b3 01 	lds	r25, 0x01B3
    11fe:	a0 90 b4 01 	lds	r10, 0x01B4
    1202:	b1 80       	ldd	r11, Z+1	; 0x01
    1204:	c2 80       	ldd	r12, Z+2	; 0x02
    1206:	d3 80       	ldd	r13, Z+3	; 0x03
    1208:	e4 80       	ldd	r14, Z+4	; 0x04
    120a:	f5 80       	ldd	r15, Z+5	; 0x05
    120c:	06 81       	ldd	r16, Z+6	; 0x06
    120e:	17 81       	ldd	r17, Z+7	; 0x07
    1210:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__divdi3>
    1214:	fe 01       	movw	r30, r28
    1216:	70 96       	adiw	r30, 0x10	; 16
    1218:	a0 90 bc 01 	lds	r10, 0x01BC
    121c:	b1 80       	ldd	r11, Z+1	; 0x01
    121e:	c2 80       	ldd	r12, Z+2	; 0x02
    1220:	d3 80       	ldd	r13, Z+3	; 0x03
    1222:	e4 80       	ldd	r14, Z+4	; 0x04
    1224:	f5 80       	ldd	r15, Z+5	; 0x05
    1226:	06 81       	ldd	r16, Z+6	; 0x06
    1228:	17 81       	ldd	r17, Z+7	; 0x07
    122a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__muldi3>
    122e:	20 93 a4 01 	sts	0x01A4, r18
    1232:	30 93 a5 01 	sts	0x01A5, r19
    1236:	40 93 a6 01 	sts	0x01A6, r20
    123a:	50 93 a7 01 	sts	0x01A7, r21
    123e:	60 93 a8 01 	sts	0x01A8, r22
    1242:	70 93 a9 01 	sts	0x01A9, r23
    1246:	80 93 aa 01 	sts	0x01AA, r24
    124a:	90 93 ab 01 	sts	0x01AB, r25
    124e:	0b cd       	rjmp	.-1514   	; 0xc66 <__stack+0x407>
			case 7: Result=Operands[0]/Operands[1]+Operands[2]; break;
    1250:	cc ea       	ldi	r28, 0xAC	; 172
    1252:	d1 e0       	ldi	r29, 0x01	; 1
    1254:	fe 01       	movw	r30, r28
    1256:	38 96       	adiw	r30, 0x08	; 8
    1258:	20 91 ac 01 	lds	r18, 0x01AC
    125c:	30 91 ad 01 	lds	r19, 0x01AD
    1260:	40 91 ae 01 	lds	r20, 0x01AE
    1264:	50 91 af 01 	lds	r21, 0x01AF
    1268:	60 91 b0 01 	lds	r22, 0x01B0
    126c:	70 91 b1 01 	lds	r23, 0x01B1
    1270:	80 91 b2 01 	lds	r24, 0x01B2
    1274:	90 91 b3 01 	lds	r25, 0x01B3
    1278:	a0 90 b4 01 	lds	r10, 0x01B4
    127c:	b1 80       	ldd	r11, Z+1	; 0x01
    127e:	c2 80       	ldd	r12, Z+2	; 0x02
    1280:	d3 80       	ldd	r13, Z+3	; 0x03
    1282:	e4 80       	ldd	r14, Z+4	; 0x04
    1284:	f5 80       	ldd	r15, Z+5	; 0x05
    1286:	06 81       	ldd	r16, Z+6	; 0x06
    1288:	17 81       	ldd	r17, Z+7	; 0x07
    128a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__divdi3>
    128e:	60 96       	adiw	r28, 0x10	; 16
    1290:	f0 91 bc 01 	lds	r31, 0x01BC
    1294:	e9 81       	ldd	r30, Y+1	; 0x01
    1296:	ea 80       	ldd	r14, Y+2	; 0x02
    1298:	bb 81       	ldd	r27, Y+3	; 0x03
    129a:	ac 81       	ldd	r26, Y+4	; 0x04
    129c:	fd 80       	ldd	r15, Y+5	; 0x05
    129e:	0e 81       	ldd	r16, Y+6	; 0x06
    12a0:	1f 81       	ldd	r17, Y+7	; 0x07
    12a2:	d2 2f       	mov	r29, r18
    12a4:	df 0f       	add	r29, r31
    12a6:	c1 e0       	ldi	r28, 0x01	; 1
    12a8:	d2 17       	cp	r29, r18
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <__stack+0xa4f>
    12ac:	c0 e0       	ldi	r28, 0x00	; 0
    12ae:	e3 0f       	add	r30, r19
    12b0:	f1 e0       	ldi	r31, 0x01	; 1
    12b2:	e3 17       	cp	r30, r19
    12b4:	08 f0       	brcs	.+2      	; 0x12b8 <__stack+0xa59>
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	ce 0f       	add	r28, r30
    12ba:	21 e0       	ldi	r18, 0x01	; 1
    12bc:	ce 17       	cp	r28, r30
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <__stack+0xa63>
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	f2 2b       	or	r31, r18
    12c4:	34 2f       	mov	r19, r20
    12c6:	3e 0d       	add	r19, r14
    12c8:	e1 e0       	ldi	r30, 0x01	; 1
    12ca:	34 17       	cp	r19, r20
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <__stack+0xa71>
    12ce:	e0 e0       	ldi	r30, 0x00	; 0
    12d0:	f3 0f       	add	r31, r19
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	f3 17       	cp	r31, r19
    12d6:	08 f0       	brcs	.+2      	; 0x12da <__stack+0xa7b>
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	e2 2b       	or	r30, r18
    12dc:	45 2f       	mov	r20, r21
    12de:	4b 0f       	add	r20, r27
    12e0:	31 e0       	ldi	r19, 0x01	; 1
    12e2:	45 17       	cp	r20, r21
    12e4:	08 f0       	brcs	.+2      	; 0x12e8 <__stack+0xa89>
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	e4 0f       	add	r30, r20
    12ea:	21 e0       	ldi	r18, 0x01	; 1
    12ec:	e4 17       	cp	r30, r20
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <__stack+0xa93>
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	32 2b       	or	r19, r18
    12f4:	a6 0f       	add	r26, r22
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	a6 17       	cp	r26, r22
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <__stack+0xa9f>
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	b3 2f       	mov	r27, r19
    1300:	ba 0f       	add	r27, r26
    1302:	21 e0       	ldi	r18, 0x01	; 1
    1304:	ba 17       	cp	r27, r26
    1306:	08 f0       	brcs	.+2      	; 0x130a <__stack+0xaab>
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	42 2b       	or	r20, r18
    130c:	67 2f       	mov	r22, r23
    130e:	6f 0d       	add	r22, r15
    1310:	31 e0       	ldi	r19, 0x01	; 1
    1312:	67 17       	cp	r22, r23
    1314:	08 f0       	brcs	.+2      	; 0x1318 <__stack+0xab9>
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	46 0f       	add	r20, r22
    131a:	21 e0       	ldi	r18, 0x01	; 1
    131c:	46 17       	cp	r20, r22
    131e:	08 f0       	brcs	.+2      	; 0x1322 <__stack+0xac3>
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	32 2b       	or	r19, r18
    1324:	58 2f       	mov	r21, r24
    1326:	50 0f       	add	r21, r16
    1328:	21 e0       	ldi	r18, 0x01	; 1
    132a:	58 17       	cp	r21, r24
    132c:	08 f0       	brcs	.+2      	; 0x1330 <__stack+0xad1>
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	83 2f       	mov	r24, r19
    1332:	85 0f       	add	r24, r21
    1334:	31 e0       	ldi	r19, 0x01	; 1
    1336:	85 17       	cp	r24, r21
    1338:	08 f0       	brcs	.+2      	; 0x133c <__stack+0xadd>
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	23 2b       	or	r18, r19
    133e:	91 0f       	add	r25, r17
    1340:	29 0f       	add	r18, r25
    1342:	d0 93 a4 01 	sts	0x01A4, r29
    1346:	c0 93 a5 01 	sts	0x01A5, r28
    134a:	f0 93 a6 01 	sts	0x01A6, r31
    134e:	e0 93 a7 01 	sts	0x01A7, r30
    1352:	b0 93 a8 01 	sts	0x01A8, r27
    1356:	40 93 a9 01 	sts	0x01A9, r20
    135a:	80 93 aa 01 	sts	0x01AA, r24
    135e:	20 93 ab 01 	sts	0x01AB, r18
    1362:	81 cc       	rjmp	.-1790   	; 0xc66 <__stack+0x407>
			case 8: Result=Operands[0]/Operands[1]+Operands[2]; break;
    1364:	cc ea       	ldi	r28, 0xAC	; 172
    1366:	d1 e0       	ldi	r29, 0x01	; 1
    1368:	fe 01       	movw	r30, r28
    136a:	38 96       	adiw	r30, 0x08	; 8
    136c:	20 91 ac 01 	lds	r18, 0x01AC
    1370:	30 91 ad 01 	lds	r19, 0x01AD
    1374:	40 91 ae 01 	lds	r20, 0x01AE
    1378:	50 91 af 01 	lds	r21, 0x01AF
    137c:	60 91 b0 01 	lds	r22, 0x01B0
    1380:	70 91 b1 01 	lds	r23, 0x01B1
    1384:	80 91 b2 01 	lds	r24, 0x01B2
    1388:	90 91 b3 01 	lds	r25, 0x01B3
    138c:	a0 90 b4 01 	lds	r10, 0x01B4
    1390:	b1 80       	ldd	r11, Z+1	; 0x01
    1392:	c2 80       	ldd	r12, Z+2	; 0x02
    1394:	d3 80       	ldd	r13, Z+3	; 0x03
    1396:	e4 80       	ldd	r14, Z+4	; 0x04
    1398:	f5 80       	ldd	r15, Z+5	; 0x05
    139a:	06 81       	ldd	r16, Z+6	; 0x06
    139c:	17 81       	ldd	r17, Z+7	; 0x07
    139e:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__divdi3>
    13a2:	60 96       	adiw	r28, 0x10	; 16
    13a4:	f0 91 bc 01 	lds	r31, 0x01BC
    13a8:	e9 81       	ldd	r30, Y+1	; 0x01
    13aa:	ea 80       	ldd	r14, Y+2	; 0x02
    13ac:	bb 81       	ldd	r27, Y+3	; 0x03
    13ae:	ac 81       	ldd	r26, Y+4	; 0x04
    13b0:	fd 80       	ldd	r15, Y+5	; 0x05
    13b2:	0e 81       	ldd	r16, Y+6	; 0x06
    13b4:	1f 81       	ldd	r17, Y+7	; 0x07
    13b6:	d2 2f       	mov	r29, r18
    13b8:	df 0f       	add	r29, r31
    13ba:	c1 e0       	ldi	r28, 0x01	; 1
    13bc:	d2 17       	cp	r29, r18
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <__stack+0xb63>
    13c0:	c0 e0       	ldi	r28, 0x00	; 0
    13c2:	e3 0f       	add	r30, r19
    13c4:	f1 e0       	ldi	r31, 0x01	; 1
    13c6:	e3 17       	cp	r30, r19
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <__stack+0xb6d>
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	ce 0f       	add	r28, r30
    13ce:	21 e0       	ldi	r18, 0x01	; 1
    13d0:	ce 17       	cp	r28, r30
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <__stack+0xb77>
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	f2 2b       	or	r31, r18
    13d8:	34 2f       	mov	r19, r20
    13da:	3e 0d       	add	r19, r14
    13dc:	e1 e0       	ldi	r30, 0x01	; 1
    13de:	34 17       	cp	r19, r20
    13e0:	08 f0       	brcs	.+2      	; 0x13e4 <__stack+0xb85>
    13e2:	e0 e0       	ldi	r30, 0x00	; 0
    13e4:	f3 0f       	add	r31, r19
    13e6:	21 e0       	ldi	r18, 0x01	; 1
    13e8:	f3 17       	cp	r31, r19
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <__stack+0xb8f>
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	e2 2b       	or	r30, r18
    13f0:	45 2f       	mov	r20, r21
    13f2:	4b 0f       	add	r20, r27
    13f4:	31 e0       	ldi	r19, 0x01	; 1
    13f6:	45 17       	cp	r20, r21
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <__stack+0xb9d>
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	e4 0f       	add	r30, r20
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	e4 17       	cp	r30, r20
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__stack+0xba7>
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	32 2b       	or	r19, r18
    1408:	a6 0f       	add	r26, r22
    140a:	41 e0       	ldi	r20, 0x01	; 1
    140c:	a6 17       	cp	r26, r22
    140e:	08 f0       	brcs	.+2      	; 0x1412 <__stack+0xbb3>
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	b3 2f       	mov	r27, r19
    1414:	ba 0f       	add	r27, r26
    1416:	21 e0       	ldi	r18, 0x01	; 1
    1418:	ba 17       	cp	r27, r26
    141a:	08 f0       	brcs	.+2      	; 0x141e <__stack+0xbbf>
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	42 2b       	or	r20, r18
    1420:	67 2f       	mov	r22, r23
    1422:	6f 0d       	add	r22, r15
    1424:	31 e0       	ldi	r19, 0x01	; 1
    1426:	67 17       	cp	r22, r23
    1428:	08 f0       	brcs	.+2      	; 0x142c <__stack+0xbcd>
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	46 0f       	add	r20, r22
    142e:	21 e0       	ldi	r18, 0x01	; 1
    1430:	46 17       	cp	r20, r22
    1432:	08 f0       	brcs	.+2      	; 0x1436 <__stack+0xbd7>
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	32 2b       	or	r19, r18
    1438:	58 2f       	mov	r21, r24
    143a:	50 0f       	add	r21, r16
    143c:	21 e0       	ldi	r18, 0x01	; 1
    143e:	58 17       	cp	r21, r24
    1440:	08 f0       	brcs	.+2      	; 0x1444 <__stack+0xbe5>
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	83 2f       	mov	r24, r19
    1446:	85 0f       	add	r24, r21
    1448:	31 e0       	ldi	r19, 0x01	; 1
    144a:	85 17       	cp	r24, r21
    144c:	08 f0       	brcs	.+2      	; 0x1450 <__stack+0xbf1>
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	23 2b       	or	r18, r19
    1452:	91 0f       	add	r25, r17
    1454:	29 0f       	add	r18, r25
    1456:	d0 93 a4 01 	sts	0x01A4, r29
    145a:	c0 93 a5 01 	sts	0x01A5, r28
    145e:	f0 93 a6 01 	sts	0x01A6, r31
    1462:	e0 93 a7 01 	sts	0x01A7, r30
    1466:	b0 93 a8 01 	sts	0x01A8, r27
    146a:	40 93 a9 01 	sts	0x01A9, r20
    146e:	80 93 aa 01 	sts	0x01AA, r24
    1472:	20 93 ab 01 	sts	0x01AB, r18
    1476:	f7 cb       	rjmp	.-2066   	; 0xc66 <__stack+0x407>
			case 9: Result= Operands[0]*Operands[1]-Operands[2]; break;
    1478:	cc ea       	ldi	r28, 0xAC	; 172
    147a:	d1 e0       	ldi	r29, 0x01	; 1
    147c:	fe 01       	movw	r30, r28
    147e:	38 96       	adiw	r30, 0x08	; 8
    1480:	20 91 ac 01 	lds	r18, 0x01AC
    1484:	30 91 ad 01 	lds	r19, 0x01AD
    1488:	40 91 ae 01 	lds	r20, 0x01AE
    148c:	50 91 af 01 	lds	r21, 0x01AF
    1490:	60 91 b0 01 	lds	r22, 0x01B0
    1494:	70 91 b1 01 	lds	r23, 0x01B1
    1498:	80 91 b2 01 	lds	r24, 0x01B2
    149c:	90 91 b3 01 	lds	r25, 0x01B3
    14a0:	a0 90 b4 01 	lds	r10, 0x01B4
    14a4:	b1 80       	ldd	r11, Z+1	; 0x01
    14a6:	c2 80       	ldd	r12, Z+2	; 0x02
    14a8:	d3 80       	ldd	r13, Z+3	; 0x03
    14aa:	e4 80       	ldd	r14, Z+4	; 0x04
    14ac:	f5 80       	ldd	r15, Z+5	; 0x05
    14ae:	06 81       	ldd	r16, Z+6	; 0x06
    14b0:	17 81       	ldd	r17, Z+7	; 0x07
    14b2:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__muldi3>
    14b6:	60 96       	adiw	r28, 0x10	; 16
    14b8:	f0 91 bc 01 	lds	r31, 0x01BC
    14bc:	e9 81       	ldd	r30, Y+1	; 0x01
    14be:	da 80       	ldd	r13, Y+2	; 0x02
    14c0:	eb 80       	ldd	r14, Y+3	; 0x03
    14c2:	fc 80       	ldd	r15, Y+4	; 0x04
    14c4:	0d 81       	ldd	r16, Y+5	; 0x05
    14c6:	1e 81       	ldd	r17, Y+6	; 0x06
    14c8:	cf 81       	ldd	r28, Y+7	; 0x07
    14ca:	b2 2f       	mov	r27, r18
    14cc:	bf 1b       	sub	r27, r31
    14ce:	f1 e0       	ldi	r31, 0x01	; 1
    14d0:	2b 17       	cp	r18, r27
    14d2:	08 f0       	brcs	.+2      	; 0x14d6 <__stack+0xc77>
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	23 2f       	mov	r18, r19
    14d8:	2e 1b       	sub	r18, r30
    14da:	e1 e0       	ldi	r30, 0x01	; 1
    14dc:	32 17       	cp	r19, r18
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <__stack+0xc83>
    14e0:	e0 e0       	ldi	r30, 0x00	; 0
    14e2:	a2 2f       	mov	r26, r18
    14e4:	af 1b       	sub	r26, r31
    14e6:	31 e0       	ldi	r19, 0x01	; 1
    14e8:	2a 17       	cp	r18, r26
    14ea:	08 f0       	brcs	.+2      	; 0x14ee <__stack+0xc8f>
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	e3 2b       	or	r30, r19
    14f0:	34 2f       	mov	r19, r20
    14f2:	3d 19       	sub	r19, r13
    14f4:	21 e0       	ldi	r18, 0x01	; 1
    14f6:	43 17       	cp	r20, r19
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <__stack+0xc9d>
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	f3 2f       	mov	r31, r19
    14fe:	fe 1b       	sub	r31, r30
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	3f 17       	cp	r19, r31
    1504:	08 f0       	brcs	.+2      	; 0x1508 <__stack+0xca9>
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	24 2b       	or	r18, r20
    150a:	45 2f       	mov	r20, r21
    150c:	4e 19       	sub	r20, r14
    150e:	31 e0       	ldi	r19, 0x01	; 1
    1510:	54 17       	cp	r21, r20
    1512:	08 f0       	brcs	.+2      	; 0x1516 <__stack+0xcb7>
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	e4 2f       	mov	r30, r20
    1518:	e2 1b       	sub	r30, r18
    151a:	21 e0       	ldi	r18, 0x01	; 1
    151c:	4e 17       	cp	r20, r30
    151e:	08 f0       	brcs	.+2      	; 0x1522 <__stack+0xcc3>
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	32 2b       	or	r19, r18
    1524:	46 2f       	mov	r20, r22
    1526:	4f 19       	sub	r20, r15
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	64 17       	cp	r22, r20
    152c:	08 f0       	brcs	.+2      	; 0x1530 <__stack+0xcd1>
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	64 2f       	mov	r22, r20
    1532:	63 1b       	sub	r22, r19
    1534:	31 e0       	ldi	r19, 0x01	; 1
    1536:	46 17       	cp	r20, r22
    1538:	08 f0       	brcs	.+2      	; 0x153c <__stack+0xcdd>
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	23 2b       	or	r18, r19
    153e:	47 2f       	mov	r20, r23
    1540:	40 1b       	sub	r20, r16
    1542:	31 e0       	ldi	r19, 0x01	; 1
    1544:	74 17       	cp	r23, r20
    1546:	08 f0       	brcs	.+2      	; 0x154a <__stack+0xceb>
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	54 2f       	mov	r21, r20
    154c:	52 1b       	sub	r21, r18
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	45 17       	cp	r20, r21
    1552:	08 f0       	brcs	.+2      	; 0x1556 <__stack+0xcf7>
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	32 2b       	or	r19, r18
    1558:	48 2f       	mov	r20, r24
    155a:	41 1b       	sub	r20, r17
    155c:	21 e0       	ldi	r18, 0x01	; 1
    155e:	84 17       	cp	r24, r20
    1560:	08 f0       	brcs	.+2      	; 0x1564 <__stack+0xd05>
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	84 2f       	mov	r24, r20
    1566:	83 1b       	sub	r24, r19
    1568:	31 e0       	ldi	r19, 0x01	; 1
    156a:	48 17       	cp	r20, r24
    156c:	08 f0       	brcs	.+2      	; 0x1570 <__stack+0xd11>
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	23 2b       	or	r18, r19
    1572:	9c 1b       	sub	r25, r28
    1574:	92 1b       	sub	r25, r18
    1576:	b0 93 a4 01 	sts	0x01A4, r27
    157a:	a0 93 a5 01 	sts	0x01A5, r26
    157e:	f0 93 a6 01 	sts	0x01A6, r31
    1582:	e0 93 a7 01 	sts	0x01A7, r30
    1586:	60 93 a8 01 	sts	0x01A8, r22
    158a:	50 93 a9 01 	sts	0x01A9, r21
    158e:	80 93 aa 01 	sts	0x01AA, r24
    1592:	90 93 ab 01 	sts	0x01AB, r25
    1596:	67 cb       	rjmp	.-2354   	; 0xc66 <__stack+0x407>
			case 10: Result=Operands[0]-Operands[1]*Operands[2]; break;
    1598:	ec ea       	ldi	r30, 0xAC	; 172
    159a:	f1 e0       	ldi	r31, 0x01	; 1
    159c:	df 01       	movw	r26, r30
    159e:	18 96       	adiw	r26, 0x08	; 8
    15a0:	70 96       	adiw	r30, 0x10	; 16
    15a2:	20 91 b4 01 	lds	r18, 0x01B4
    15a6:	11 96       	adiw	r26, 0x01	; 1
    15a8:	3c 91       	ld	r19, X
    15aa:	11 97       	sbiw	r26, 0x01	; 1
    15ac:	12 96       	adiw	r26, 0x02	; 2
    15ae:	4c 91       	ld	r20, X
    15b0:	12 97       	sbiw	r26, 0x02	; 2
    15b2:	13 96       	adiw	r26, 0x03	; 3
    15b4:	5c 91       	ld	r21, X
    15b6:	13 97       	sbiw	r26, 0x03	; 3
    15b8:	14 96       	adiw	r26, 0x04	; 4
    15ba:	6c 91       	ld	r22, X
    15bc:	14 97       	sbiw	r26, 0x04	; 4
    15be:	15 96       	adiw	r26, 0x05	; 5
    15c0:	7c 91       	ld	r23, X
    15c2:	15 97       	sbiw	r26, 0x05	; 5
    15c4:	16 96       	adiw	r26, 0x06	; 6
    15c6:	8c 91       	ld	r24, X
    15c8:	16 97       	sbiw	r26, 0x06	; 6
    15ca:	17 96       	adiw	r26, 0x07	; 7
    15cc:	9c 91       	ld	r25, X
    15ce:	a0 90 bc 01 	lds	r10, 0x01BC
    15d2:	b1 80       	ldd	r11, Z+1	; 0x01
    15d4:	c2 80       	ldd	r12, Z+2	; 0x02
    15d6:	d3 80       	ldd	r13, Z+3	; 0x03
    15d8:	e4 80       	ldd	r14, Z+4	; 0x04
    15da:	f5 80       	ldd	r15, Z+5	; 0x05
    15dc:	06 81       	ldd	r16, Z+6	; 0x06
    15de:	17 81       	ldd	r17, Z+7	; 0x07
    15e0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__muldi3>
    15e4:	f0 90 ac 01 	lds	r15, 0x01AC
    15e8:	a0 91 ad 01 	lds	r26, 0x01AD
    15ec:	f0 91 ae 01 	lds	r31, 0x01AE
    15f0:	e0 91 af 01 	lds	r30, 0x01AF
    15f4:	00 91 b0 01 	lds	r16, 0x01B0
    15f8:	d0 91 b1 01 	lds	r29, 0x01B1
    15fc:	c0 91 b2 01 	lds	r28, 0x01B2
    1600:	10 91 b3 01 	lds	r17, 0x01B3
    1604:	bf 2d       	mov	r27, r15
    1606:	b2 1b       	sub	r27, r18
    1608:	ee 24       	eor	r14, r14
    160a:	e3 94       	inc	r14
    160c:	fb 16       	cp	r15, r27
    160e:	08 f0       	brcs	.+2      	; 0x1612 <__stack+0xdb3>
    1610:	ee 24       	eor	r14, r14
    1612:	ba 2e       	mov	r11, r26
    1614:	b3 1a       	sub	r11, r19
    1616:	3b 2d       	mov	r19, r11
    1618:	21 e0       	ldi	r18, 0x01	; 1
    161a:	ab 15       	cp	r26, r11
    161c:	08 f0       	brcs	.+2      	; 0x1620 <__stack+0xdc1>
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	a3 2f       	mov	r26, r19
    1622:	ae 19       	sub	r26, r14
    1624:	ff 24       	eor	r15, r15
    1626:	f3 94       	inc	r15
    1628:	3a 17       	cp	r19, r26
    162a:	08 f0       	brcs	.+2      	; 0x162e <__stack+0xdcf>
    162c:	ff 24       	eor	r15, r15
    162e:	2f 29       	or	r18, r15
    1630:	3f 2f       	mov	r19, r31
    1632:	34 1b       	sub	r19, r20
    1634:	43 2f       	mov	r20, r19
    1636:	31 e0       	ldi	r19, 0x01	; 1
    1638:	f4 17       	cp	r31, r20
    163a:	08 f0       	brcs	.+2      	; 0x163e <__stack+0xddf>
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	f4 2f       	mov	r31, r20
    1640:	f2 1b       	sub	r31, r18
    1642:	21 e0       	ldi	r18, 0x01	; 1
    1644:	4f 17       	cp	r20, r31
    1646:	08 f0       	brcs	.+2      	; 0x164a <__stack+0xdeb>
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	32 2b       	or	r19, r18
    164c:	4e 2f       	mov	r20, r30
    164e:	45 1b       	sub	r20, r21
    1650:	21 e0       	ldi	r18, 0x01	; 1
    1652:	e4 17       	cp	r30, r20
    1654:	08 f0       	brcs	.+2      	; 0x1658 <__stack+0xdf9>
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	e4 2f       	mov	r30, r20
    165a:	e3 1b       	sub	r30, r19
    165c:	31 e0       	ldi	r19, 0x01	; 1
    165e:	4e 17       	cp	r20, r30
    1660:	08 f0       	brcs	.+2      	; 0x1664 <__stack+0xe05>
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	23 2b       	or	r18, r19
    1666:	40 2f       	mov	r20, r16
    1668:	46 1b       	sub	r20, r22
    166a:	31 e0       	ldi	r19, 0x01	; 1
    166c:	04 17       	cp	r16, r20
    166e:	08 f0       	brcs	.+2      	; 0x1672 <__stack+0xe13>
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	64 2f       	mov	r22, r20
    1674:	62 1b       	sub	r22, r18
    1676:	21 e0       	ldi	r18, 0x01	; 1
    1678:	46 17       	cp	r20, r22
    167a:	08 f0       	brcs	.+2      	; 0x167e <__stack+0xe1f>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	32 2b       	or	r19, r18
    1680:	4d 2f       	mov	r20, r29
    1682:	47 1b       	sub	r20, r23
    1684:	21 e0       	ldi	r18, 0x01	; 1
    1686:	d4 17       	cp	r29, r20
    1688:	08 f0       	brcs	.+2      	; 0x168c <__stack+0xe2d>
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	54 2f       	mov	r21, r20
    168e:	53 1b       	sub	r21, r19
    1690:	31 e0       	ldi	r19, 0x01	; 1
    1692:	45 17       	cp	r20, r21
    1694:	08 f0       	brcs	.+2      	; 0x1698 <__stack+0xe39>
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	23 2b       	or	r18, r19
    169a:	3c 2f       	mov	r19, r28
    169c:	38 1b       	sub	r19, r24
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	c3 17       	cp	r28, r19
    16a2:	08 f0       	brcs	.+2      	; 0x16a6 <__stack+0xe47>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	43 2f       	mov	r20, r19
    16a8:	42 1b       	sub	r20, r18
    16aa:	24 2f       	mov	r18, r20
    16ac:	41 e0       	ldi	r20, 0x01	; 1
    16ae:	32 17       	cp	r19, r18
    16b0:	08 f0       	brcs	.+2      	; 0x16b4 <__stack+0xe55>
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	84 2b       	or	r24, r20
    16b6:	19 1b       	sub	r17, r25
    16b8:	18 1b       	sub	r17, r24
    16ba:	b0 93 a4 01 	sts	0x01A4, r27
    16be:	a0 93 a5 01 	sts	0x01A5, r26
    16c2:	f0 93 a6 01 	sts	0x01A6, r31
    16c6:	e0 93 a7 01 	sts	0x01A7, r30
    16ca:	60 93 a8 01 	sts	0x01A8, r22
    16ce:	50 93 a9 01 	sts	0x01A9, r21
    16d2:	20 93 aa 01 	sts	0x01AA, r18
    16d6:	10 93 ab 01 	sts	0x01AB, r17
    16da:	c5 ca       	rjmp	.-2678   	; 0xc66 <__stack+0x407>
			case 11: Result= Operands[0]/Operands[1]-Operands[2];break;
    16dc:	cc ea       	ldi	r28, 0xAC	; 172
    16de:	d1 e0       	ldi	r29, 0x01	; 1
    16e0:	fe 01       	movw	r30, r28
    16e2:	38 96       	adiw	r30, 0x08	; 8
    16e4:	20 91 ac 01 	lds	r18, 0x01AC
    16e8:	30 91 ad 01 	lds	r19, 0x01AD
    16ec:	40 91 ae 01 	lds	r20, 0x01AE
    16f0:	50 91 af 01 	lds	r21, 0x01AF
    16f4:	60 91 b0 01 	lds	r22, 0x01B0
    16f8:	70 91 b1 01 	lds	r23, 0x01B1
    16fc:	80 91 b2 01 	lds	r24, 0x01B2
    1700:	90 91 b3 01 	lds	r25, 0x01B3
    1704:	a0 90 b4 01 	lds	r10, 0x01B4
    1708:	b1 80       	ldd	r11, Z+1	; 0x01
    170a:	c2 80       	ldd	r12, Z+2	; 0x02
    170c:	d3 80       	ldd	r13, Z+3	; 0x03
    170e:	e4 80       	ldd	r14, Z+4	; 0x04
    1710:	f5 80       	ldd	r15, Z+5	; 0x05
    1712:	06 81       	ldd	r16, Z+6	; 0x06
    1714:	17 81       	ldd	r17, Z+7	; 0x07
    1716:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__divdi3>
    171a:	60 96       	adiw	r28, 0x10	; 16
    171c:	f0 91 bc 01 	lds	r31, 0x01BC
    1720:	e9 81       	ldd	r30, Y+1	; 0x01
    1722:	da 80       	ldd	r13, Y+2	; 0x02
    1724:	eb 80       	ldd	r14, Y+3	; 0x03
    1726:	fc 80       	ldd	r15, Y+4	; 0x04
    1728:	0d 81       	ldd	r16, Y+5	; 0x05
    172a:	1e 81       	ldd	r17, Y+6	; 0x06
    172c:	cf 81       	ldd	r28, Y+7	; 0x07
    172e:	b2 2f       	mov	r27, r18
    1730:	bf 1b       	sub	r27, r31
    1732:	f1 e0       	ldi	r31, 0x01	; 1
    1734:	2b 17       	cp	r18, r27
    1736:	08 f0       	brcs	.+2      	; 0x173a <__stack+0xedb>
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	23 2f       	mov	r18, r19
    173c:	2e 1b       	sub	r18, r30
    173e:	e1 e0       	ldi	r30, 0x01	; 1
    1740:	32 17       	cp	r19, r18
    1742:	08 f0       	brcs	.+2      	; 0x1746 <__stack+0xee7>
    1744:	e0 e0       	ldi	r30, 0x00	; 0
    1746:	a2 2f       	mov	r26, r18
    1748:	af 1b       	sub	r26, r31
    174a:	31 e0       	ldi	r19, 0x01	; 1
    174c:	2a 17       	cp	r18, r26
    174e:	08 f0       	brcs	.+2      	; 0x1752 <__stack+0xef3>
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	e3 2b       	or	r30, r19
    1754:	34 2f       	mov	r19, r20
    1756:	3d 19       	sub	r19, r13
    1758:	21 e0       	ldi	r18, 0x01	; 1
    175a:	43 17       	cp	r20, r19
    175c:	08 f0       	brcs	.+2      	; 0x1760 <__stack+0xf01>
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	f3 2f       	mov	r31, r19
    1762:	fe 1b       	sub	r31, r30
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	3f 17       	cp	r19, r31
    1768:	08 f0       	brcs	.+2      	; 0x176c <__stack+0xf0d>
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	24 2b       	or	r18, r20
    176e:	45 2f       	mov	r20, r21
    1770:	4e 19       	sub	r20, r14
    1772:	31 e0       	ldi	r19, 0x01	; 1
    1774:	54 17       	cp	r21, r20
    1776:	08 f0       	brcs	.+2      	; 0x177a <__stack+0xf1b>
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	e4 2f       	mov	r30, r20
    177c:	e2 1b       	sub	r30, r18
    177e:	21 e0       	ldi	r18, 0x01	; 1
    1780:	4e 17       	cp	r20, r30
    1782:	08 f0       	brcs	.+2      	; 0x1786 <__stack+0xf27>
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	32 2b       	or	r19, r18
    1788:	46 2f       	mov	r20, r22
    178a:	4f 19       	sub	r20, r15
    178c:	21 e0       	ldi	r18, 0x01	; 1
    178e:	64 17       	cp	r22, r20
    1790:	08 f0       	brcs	.+2      	; 0x1794 <__stack+0xf35>
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	64 2f       	mov	r22, r20
    1796:	63 1b       	sub	r22, r19
    1798:	31 e0       	ldi	r19, 0x01	; 1
    179a:	46 17       	cp	r20, r22
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <__stack+0xf41>
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	23 2b       	or	r18, r19
    17a2:	47 2f       	mov	r20, r23
    17a4:	40 1b       	sub	r20, r16
    17a6:	31 e0       	ldi	r19, 0x01	; 1
    17a8:	74 17       	cp	r23, r20
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <__stack+0xf4f>
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	54 2f       	mov	r21, r20
    17b0:	52 1b       	sub	r21, r18
    17b2:	21 e0       	ldi	r18, 0x01	; 1
    17b4:	45 17       	cp	r20, r21
    17b6:	08 f0       	brcs	.+2      	; 0x17ba <__stack+0xf5b>
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	32 2b       	or	r19, r18
    17bc:	48 2f       	mov	r20, r24
    17be:	41 1b       	sub	r20, r17
    17c0:	21 e0       	ldi	r18, 0x01	; 1
    17c2:	84 17       	cp	r24, r20
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <__stack+0xf69>
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	84 2f       	mov	r24, r20
    17ca:	83 1b       	sub	r24, r19
    17cc:	31 e0       	ldi	r19, 0x01	; 1
    17ce:	48 17       	cp	r20, r24
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <__stack+0xf75>
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	23 2b       	or	r18, r19
    17d6:	9c 1b       	sub	r25, r28
    17d8:	92 1b       	sub	r25, r18
    17da:	b0 93 a4 01 	sts	0x01A4, r27
    17de:	a0 93 a5 01 	sts	0x01A5, r26
    17e2:	f0 93 a6 01 	sts	0x01A6, r31
    17e6:	e0 93 a7 01 	sts	0x01A7, r30
    17ea:	60 93 a8 01 	sts	0x01A8, r22
    17ee:	50 93 a9 01 	sts	0x01A9, r21
    17f2:	80 93 aa 01 	sts	0x01AA, r24
    17f6:	90 93 ab 01 	sts	0x01AB, r25
    17fa:	35 ca       	rjmp	.-2966   	; 0xc66 <__stack+0x407>
			case 12: Result= Operands[0]-Operands[1]/Operands[2];break;
    17fc:	ec ea       	ldi	r30, 0xAC	; 172
    17fe:	f1 e0       	ldi	r31, 0x01	; 1
    1800:	df 01       	movw	r26, r30
    1802:	18 96       	adiw	r26, 0x08	; 8
    1804:	70 96       	adiw	r30, 0x10	; 16
    1806:	20 91 b4 01 	lds	r18, 0x01B4
    180a:	11 96       	adiw	r26, 0x01	; 1
    180c:	3c 91       	ld	r19, X
    180e:	11 97       	sbiw	r26, 0x01	; 1
    1810:	12 96       	adiw	r26, 0x02	; 2
    1812:	4c 91       	ld	r20, X
    1814:	12 97       	sbiw	r26, 0x02	; 2
    1816:	13 96       	adiw	r26, 0x03	; 3
    1818:	5c 91       	ld	r21, X
    181a:	13 97       	sbiw	r26, 0x03	; 3
    181c:	14 96       	adiw	r26, 0x04	; 4
    181e:	6c 91       	ld	r22, X
    1820:	14 97       	sbiw	r26, 0x04	; 4
    1822:	15 96       	adiw	r26, 0x05	; 5
    1824:	7c 91       	ld	r23, X
    1826:	15 97       	sbiw	r26, 0x05	; 5
    1828:	16 96       	adiw	r26, 0x06	; 6
    182a:	8c 91       	ld	r24, X
    182c:	16 97       	sbiw	r26, 0x06	; 6
    182e:	17 96       	adiw	r26, 0x07	; 7
    1830:	9c 91       	ld	r25, X
    1832:	a0 90 bc 01 	lds	r10, 0x01BC
    1836:	b1 80       	ldd	r11, Z+1	; 0x01
    1838:	c2 80       	ldd	r12, Z+2	; 0x02
    183a:	d3 80       	ldd	r13, Z+3	; 0x03
    183c:	e4 80       	ldd	r14, Z+4	; 0x04
    183e:	f5 80       	ldd	r15, Z+5	; 0x05
    1840:	06 81       	ldd	r16, Z+6	; 0x06
    1842:	17 81       	ldd	r17, Z+7	; 0x07
    1844:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__divdi3>
    1848:	f0 90 ac 01 	lds	r15, 0x01AC
    184c:	a0 91 ad 01 	lds	r26, 0x01AD
    1850:	f0 91 ae 01 	lds	r31, 0x01AE
    1854:	e0 91 af 01 	lds	r30, 0x01AF
    1858:	00 91 b0 01 	lds	r16, 0x01B0
    185c:	d0 91 b1 01 	lds	r29, 0x01B1
    1860:	c0 91 b2 01 	lds	r28, 0x01B2
    1864:	10 91 b3 01 	lds	r17, 0x01B3
    1868:	bf 2d       	mov	r27, r15
    186a:	b2 1b       	sub	r27, r18
    186c:	ee 24       	eor	r14, r14
    186e:	e3 94       	inc	r14
    1870:	fb 16       	cp	r15, r27
    1872:	08 f0       	brcs	.+2      	; 0x1876 <__stack+0x1017>
    1874:	ee 24       	eor	r14, r14
    1876:	ba 2e       	mov	r11, r26
    1878:	b3 1a       	sub	r11, r19
    187a:	3b 2d       	mov	r19, r11
    187c:	21 e0       	ldi	r18, 0x01	; 1
    187e:	ab 15       	cp	r26, r11
    1880:	08 f0       	brcs	.+2      	; 0x1884 <__stack+0x1025>
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	a3 2f       	mov	r26, r19
    1886:	ae 19       	sub	r26, r14
    1888:	ff 24       	eor	r15, r15
    188a:	f3 94       	inc	r15
    188c:	3a 17       	cp	r19, r26
    188e:	08 f0       	brcs	.+2      	; 0x1892 <__stack+0x1033>
    1890:	ff 24       	eor	r15, r15
    1892:	2f 29       	or	r18, r15
    1894:	3f 2f       	mov	r19, r31
    1896:	34 1b       	sub	r19, r20
    1898:	43 2f       	mov	r20, r19
    189a:	31 e0       	ldi	r19, 0x01	; 1
    189c:	f4 17       	cp	r31, r20
    189e:	08 f0       	brcs	.+2      	; 0x18a2 <__stack+0x1043>
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	f4 2f       	mov	r31, r20
    18a4:	f2 1b       	sub	r31, r18
    18a6:	21 e0       	ldi	r18, 0x01	; 1
    18a8:	4f 17       	cp	r20, r31
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <__stack+0x104f>
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	32 2b       	or	r19, r18
    18b0:	4e 2f       	mov	r20, r30
    18b2:	45 1b       	sub	r20, r21
    18b4:	21 e0       	ldi	r18, 0x01	; 1
    18b6:	e4 17       	cp	r30, r20
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <__stack+0x105d>
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	e4 2f       	mov	r30, r20
    18be:	e3 1b       	sub	r30, r19
    18c0:	31 e0       	ldi	r19, 0x01	; 1
    18c2:	4e 17       	cp	r20, r30
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <__stack+0x1069>
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	23 2b       	or	r18, r19
    18ca:	40 2f       	mov	r20, r16
    18cc:	46 1b       	sub	r20, r22
    18ce:	31 e0       	ldi	r19, 0x01	; 1
    18d0:	04 17       	cp	r16, r20
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <__stack+0x1077>
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	64 2f       	mov	r22, r20
    18d8:	62 1b       	sub	r22, r18
    18da:	21 e0       	ldi	r18, 0x01	; 1
    18dc:	46 17       	cp	r20, r22
    18de:	08 f0       	brcs	.+2      	; 0x18e2 <__stack+0x1083>
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	32 2b       	or	r19, r18
    18e4:	4d 2f       	mov	r20, r29
    18e6:	47 1b       	sub	r20, r23
    18e8:	21 e0       	ldi	r18, 0x01	; 1
    18ea:	d4 17       	cp	r29, r20
    18ec:	08 f0       	brcs	.+2      	; 0x18f0 <__stack+0x1091>
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	54 2f       	mov	r21, r20
    18f2:	53 1b       	sub	r21, r19
    18f4:	31 e0       	ldi	r19, 0x01	; 1
    18f6:	45 17       	cp	r20, r21
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <__stack+0x109d>
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	23 2b       	or	r18, r19
    18fe:	3c 2f       	mov	r19, r28
    1900:	38 1b       	sub	r19, r24
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	c3 17       	cp	r28, r19
    1906:	08 f0       	brcs	.+2      	; 0x190a <__stack+0x10ab>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	43 2f       	mov	r20, r19
    190c:	42 1b       	sub	r20, r18
    190e:	24 2f       	mov	r18, r20
    1910:	41 e0       	ldi	r20, 0x01	; 1
    1912:	32 17       	cp	r19, r18
    1914:	08 f0       	brcs	.+2      	; 0x1918 <__stack+0x10b9>
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	84 2b       	or	r24, r20
    191a:	19 1b       	sub	r17, r25
    191c:	18 1b       	sub	r17, r24
    191e:	b0 93 a4 01 	sts	0x01A4, r27
    1922:	a0 93 a5 01 	sts	0x01A5, r26
    1926:	f0 93 a6 01 	sts	0x01A6, r31
    192a:	e0 93 a7 01 	sts	0x01A7, r30
    192e:	60 93 a8 01 	sts	0x01A8, r22
    1932:	50 93 a9 01 	sts	0x01A9, r21
    1936:	20 93 aa 01 	sts	0x01AA, r18
    193a:	10 93 ab 01 	sts	0x01AB, r17
    193e:	93 c9       	rjmp	.-3290   	; 0xc66 <__stack+0x407>
					
			default:
				{
					ThrowException("PiorityError");
    1940:	80 e9       	ldi	r24, 0x90	; 144
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 1f 02 	call	0x43e	; 0x43e <ThrowException>
					Flag=StartPoint;
					break;
    1948:	8e c9       	rjmp	.-3300   	; 0xc66 <__stack+0x407>
		}
		
			
	Flag=DisplayPoint;
	return;
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	ff 90       	pop	r15
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	bf 90       	pop	r11
    195c:	af 90       	pop	r10
    195e:	9f 90       	pop	r9
    1960:	8f 90       	pop	r8
    1962:	7f 90       	pop	r7
    1964:	6f 90       	pop	r6
    1966:	5f 90       	pop	r5
    1968:	08 95       	ret

0000196a <KeyPad_4x4_adjustKeyNumber>:

#elif (N_col == 4)
 
uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
	switch(button_number)
    196a:	88 30       	cpi	r24, 0x08	; 8
    196c:	81 f1       	breq	.+96     	; 0x19ce <KeyPad_4x4_adjustKeyNumber+0x64>
    196e:	89 30       	cpi	r24, 0x09	; 9
    1970:	80 f4       	brcc	.+32     	; 0x1992 <KeyPad_4x4_adjustKeyNumber+0x28>
    1972:	84 30       	cpi	r24, 0x04	; 4
    1974:	21 f1       	breq	.+72     	; 0x19be <KeyPad_4x4_adjustKeyNumber+0x54>
    1976:	85 30       	cpi	r24, 0x05	; 5
    1978:	38 f4       	brcc	.+14     	; 0x1988 <KeyPad_4x4_adjustKeyNumber+0x1e>
    197a:	82 30       	cpi	r24, 0x02	; 2
    197c:	c1 f1       	breq	.+112    	; 0x19ee <KeyPad_4x4_adjustKeyNumber+0x84>
    197e:	83 30       	cpi	r24, 0x03	; 3
    1980:	e0 f4       	brcc	.+56     	; 0x19ba <KeyPad_4x4_adjustKeyNumber+0x50>
    1982:	81 30       	cpi	r24, 0x01	; 1
    1984:	a9 f5       	brne	.+106    	; 0x19f0 <KeyPad_4x4_adjustKeyNumber+0x86>
    1986:	17 c0       	rjmp	.+46     	; 0x19b6 <KeyPad_4x4_adjustKeyNumber+0x4c>
    1988:	86 30       	cpi	r24, 0x06	; 6
    198a:	e9 f0       	breq	.+58     	; 0x19c6 <KeyPad_4x4_adjustKeyNumber+0x5c>
    198c:	87 30       	cpi	r24, 0x07	; 7
    198e:	e8 f4       	brcc	.+58     	; 0x19ca <KeyPad_4x4_adjustKeyNumber+0x60>
    1990:	18 c0       	rjmp	.+48     	; 0x19c2 <KeyPad_4x4_adjustKeyNumber+0x58>
    1992:	8c 30       	cpi	r24, 0x0C	; 12
    1994:	21 f1       	breq	.+72     	; 0x19de <KeyPad_4x4_adjustKeyNumber+0x74>
    1996:	8d 30       	cpi	r24, 0x0D	; 13
    1998:	28 f4       	brcc	.+10     	; 0x19a4 <KeyPad_4x4_adjustKeyNumber+0x3a>
    199a:	8a 30       	cpi	r24, 0x0A	; 10
    199c:	e1 f0       	breq	.+56     	; 0x19d6 <KeyPad_4x4_adjustKeyNumber+0x6c>
    199e:	8b 30       	cpi	r24, 0x0B	; 11
    19a0:	e0 f4       	brcc	.+56     	; 0x19da <KeyPad_4x4_adjustKeyNumber+0x70>
    19a2:	17 c0       	rjmp	.+46     	; 0x19d2 <KeyPad_4x4_adjustKeyNumber+0x68>
    19a4:	8e 30       	cpi	r24, 0x0E	; 14
    19a6:	e9 f0       	breq	.+58     	; 0x19e2 <KeyPad_4x4_adjustKeyNumber+0x78>
    19a8:	8e 30       	cpi	r24, 0x0E	; 14
    19aa:	10 f1       	brcs	.+68     	; 0x19f0 <KeyPad_4x4_adjustKeyNumber+0x86>
    19ac:	8f 30       	cpi	r24, 0x0F	; 15
    19ae:	d9 f0       	breq	.+54     	; 0x19e6 <KeyPad_4x4_adjustKeyNumber+0x7c>
    19b0:	80 31       	cpi	r24, 0x10	; 16
    19b2:	f1 f4       	brne	.+60     	; 0x19f0 <KeyPad_4x4_adjustKeyNumber+0x86>
    19b4:	1a c0       	rjmp	.+52     	; 0x19ea <KeyPad_4x4_adjustKeyNumber+0x80>
	{
		case 1: return 7; 
    19b6:	87 e0       	ldi	r24, 0x07	; 7
    19b8:	08 95       	ret
				break;
		case 2: return 8; 
				break;
		case 3: return 9; 
    19ba:	89 e0       	ldi	r24, 0x09	; 9
    19bc:	08 95       	ret
				break;
		case 4: return '%'; // ASCII Code of %
    19be:	85 e2       	ldi	r24, 0x25	; 37
    19c0:	08 95       	ret
				break;
		case 5: return 4; 
    19c2:	84 e0       	ldi	r24, 0x04	; 4
    19c4:	08 95       	ret
				break;
		case 6: return 5;
    19c6:	85 e0       	ldi	r24, 0x05	; 5
    19c8:	08 95       	ret
				break;
		case 7: return 6; 
    19ca:	86 e0       	ldi	r24, 0x06	; 6
    19cc:	08 95       	ret
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    19ce:	8a e2       	ldi	r24, 0x2A	; 42
    19d0:	08 95       	ret
				break;		
		case 9: return 1; 
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	08 95       	ret
				break;
		case 10: return 2; 
    19d6:	82 e0       	ldi	r24, 0x02	; 2
    19d8:	08 95       	ret
				break;
		case 11: return 3; 
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	08 95       	ret
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    19de:	8d e2       	ldi	r24, 0x2D	; 45
    19e0:	08 95       	ret
				break;
		case 13: return 13;  /* ASCII of Enter */
				break;			
		case 14: return 0; 
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	08 95       	ret
				break;
		case 15: return '='; /* ASCII Code of '=' */
    19e6:	8d e3       	ldi	r24, 0x3D	; 61
    19e8:	08 95       	ret
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    19ea:	8b e2       	ldi	r24, 0x2B	; 43
    19ec:	08 95       	ret
{
	switch(button_number)
	{
		case 1: return 7; 
				break;
		case 2: return 8; 
    19ee:	88 e0       	ldi	r24, 0x08	; 8
				break;
		case 16: return '+'; /* ASCII Code of '+' */
				break;
		default: return button_number;								 						
	}
} 
    19f0:	08 95       	ret

000019f2 <KeyPad_getPressedKey>:
#include "keypad.h"
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    19f2:	80 e0       	ldi	r24, 0x00	; 0
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    19f4:	60 e1       	ldi	r22, 0x10	; 16
    19f6:	70 e0       	ldi	r23, 0x00	; 0
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    19f8:	e1 e0       	ldi	r30, 0x01	; 1
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
#include "keypad.h"
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    19fc:	a0 e0       	ldi	r26, 0x00	; 0
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    19fe:	9b 01       	movw	r18, r22
    1a00:	08 2e       	mov	r0, r24
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <KeyPad_getPressedKey+0x16>
    1a04:	22 0f       	add	r18, r18
    1a06:	33 1f       	adc	r19, r19
    1a08:	0a 94       	dec	r0
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <KeyPad_getPressedKey+0x12>
    1a0c:	2a bb       	out	0x1a, r18	; 26
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1a0e:	20 95       	com	r18
    1a10:	2b bb       	out	0x1b, r18	; 27
			for(row=0;row<N_row;row++) /* loop for rows */
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1a12:	c8 9b       	sbis	0x19, 0	; 25
    1a14:	0d c0       	rjmp	.+26     	; 0x1a30 <KeyPad_getPressedKey+0x3e>
    1a16:	9f 01       	movw	r18, r30
    1a18:	92 2f       	mov	r25, r18
    1a1a:	49 b3       	in	r20, 0x19	; 25
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <KeyPad_getPressedKey+0x34>
    1a22:	55 95       	asr	r21
    1a24:	47 95       	ror	r20
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <KeyPad_getPressedKey+0x30>
    1a2a:	40 fd       	sbrc	r20, 0
    1a2c:	09 c0       	rjmp	.+18     	; 0x1a40 <KeyPad_getPressedKey+0x4e>
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <KeyPad_getPressedKey+0x40>
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1a30:	90 e0       	ldi	r25, 0x00	; 0
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	99 0f       	add	r25, r25
    1a36:	99 0f       	add	r25, r25
    1a38:	89 0f       	add	r24, r25
    1a3a:	0e 94 b5 0c 	call	0x196a	; 0x196a <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1a3e:	08 95       	ret
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1a40:	2f 5f       	subi	r18, 0xFF	; 255
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1a44:	24 30       	cpi	r18, 0x04	; 4
    1a46:	31 05       	cpc	r19, r1
    1a48:	39 f7       	brne	.-50     	; 0x1a18 <KeyPad_getPressedKey+0x26>
#include "keypad.h"
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1a4a:	8f 5f       	subi	r24, 0xFF	; 255
    1a4c:	84 30       	cpi	r24, 0x04	; 4
    1a4e:	b8 f2       	brcs	.-82     	; 0x19fe <KeyPad_getPressedKey+0xc>
    1a50:	8a 2f       	mov	r24, r26
    1a52:	d5 cf       	rjmp	.-86     	; 0x19fe <KeyPad_getPressedKey+0xc>

00001a54 <powerOf>:
		default: return button_number;								 						
	}
} 

uint32 powerOf(uint8 x,uint8 y)
{
    1a54:	4f 92       	push	r4
    1a56:	5f 92       	push	r5
    1a58:	6f 92       	push	r6
    1a5a:	7f 92       	push	r7
    1a5c:	8f 92       	push	r8
    1a5e:	9f 92       	push	r9
    1a60:	af 92       	push	r10
    1a62:	bf 92       	push	r11
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
	uint32 val=1,index=0;
	for(index=1;index<=y;index++)
    1a70:	46 2e       	mov	r4, r22
    1a72:	55 24       	eor	r5, r5
    1a74:	66 24       	eor	r6, r6
    1a76:	77 24       	eor	r7, r7
    1a78:	41 14       	cp	r4, r1
    1a7a:	51 04       	cpc	r5, r1
    1a7c:	61 04       	cpc	r6, r1
    1a7e:	71 04       	cpc	r7, r1
    1a80:	f9 f0       	breq	.+62     	; 0x1ac0 <powerOf+0x6c>
    1a82:	cc 24       	eor	r12, r12
    1a84:	dd 24       	eor	r13, r13
    1a86:	76 01       	movw	r14, r12
    1a88:	c3 94       	inc	r12
	}
} 

uint32 powerOf(uint8 x,uint8 y)
{
	uint32 val=1,index=0;
    1a8a:	01 e0       	ldi	r16, 0x01	; 1
    1a8c:	10 e0       	ldi	r17, 0x00	; 0
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
	for(index=1;index<=y;index++)
	val*=x;
    1a92:	88 2e       	mov	r8, r24
    1a94:	99 24       	eor	r9, r9
    1a96:	aa 24       	eor	r10, r10
    1a98:	bb 24       	eor	r11, r11
    1a9a:	c9 01       	movw	r24, r18
    1a9c:	b8 01       	movw	r22, r16
    1a9e:	a5 01       	movw	r20, r10
    1aa0:	94 01       	movw	r18, r8
    1aa2:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    1aa6:	8b 01       	movw	r16, r22
    1aa8:	9c 01       	movw	r18, r24
} 

uint32 powerOf(uint8 x,uint8 y)
{
	uint32 val=1,index=0;
	for(index=1;index<=y;index++)
    1aaa:	08 94       	sec
    1aac:	c1 1c       	adc	r12, r1
    1aae:	d1 1c       	adc	r13, r1
    1ab0:	e1 1c       	adc	r14, r1
    1ab2:	f1 1c       	adc	r15, r1
    1ab4:	4c 14       	cp	r4, r12
    1ab6:	5d 04       	cpc	r5, r13
    1ab8:	6e 04       	cpc	r6, r14
    1aba:	7f 04       	cpc	r7, r15
    1abc:	70 f7       	brcc	.-36     	; 0x1a9a <powerOf+0x46>
    1abe:	04 c0       	rjmp	.+8      	; 0x1ac8 <powerOf+0x74>
	}
} 

uint32 powerOf(uint8 x,uint8 y)
{
	uint32 val=1,index=0;
    1ac0:	01 e0       	ldi	r16, 0x01	; 1
    1ac2:	10 e0       	ldi	r17, 0x00	; 0
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
	for(index=1;index<=y;index++)
	val*=x;
	return val;
}
    1ac8:	60 2f       	mov	r22, r16
    1aca:	71 2f       	mov	r23, r17
    1acc:	82 2f       	mov	r24, r18
    1ace:	93 2f       	mov	r25, r19
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	ff 90       	pop	r15
    1ad6:	ef 90       	pop	r14
    1ad8:	df 90       	pop	r13
    1ada:	cf 90       	pop	r12
    1adc:	bf 90       	pop	r11
    1ade:	af 90       	pop	r10
    1ae0:	9f 90       	pop	r9
    1ae2:	8f 90       	pop	r8
    1ae4:	7f 90       	pop	r7
    1ae6:	6f 90       	pop	r6
    1ae8:	5f 90       	pop	r5
    1aea:	4f 90       	pop	r4
    1aec:	08 95       	ret

00001aee <KeyPad_getSeriesOfPressedNumbers>:

uint32 KeyPad_getSeriesOfPressedNumbers(uint8 len)
{
    1aee:	8f 92       	push	r8
    1af0:	9f 92       	push	r9
    1af2:	af 92       	push	r10
    1af4:	bf 92       	push	r11
    1af6:	cf 92       	push	r12
    1af8:	df 92       	push	r13
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	08 2f       	mov	r16, r24
	}
	
	if(!(value >= 0)) return -1;
	
	return value;
}
    1b0c:	8d b6       	in	r8, 0x3d	; 61
    1b0e:	9e b6       	in	r9, 0x3e	; 62
	return val;
}

uint32 KeyPad_getSeriesOfPressedNumbers(uint8 len)
{
	uint8 SeriesOfpressedKeys[len];/*Only C99,VLA feature*/
    1b10:	a8 2e       	mov	r10, r24
    1b12:	bb 24       	eor	r11, r11
    1b14:	8d b7       	in	r24, 0x3d	; 61
    1b16:	9e b7       	in	r25, 0x3e	; 62
    1b18:	8a 19       	sub	r24, r10
    1b1a:	9b 09       	sbc	r25, r11
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	9e bf       	out	0x3e, r25	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	8d bf       	out	0x3d, r24	; 61
    1b26:	cd b6       	in	r12, 0x3d	; 61
    1b28:	de b6       	in	r13, 0x3e	; 62
    1b2a:	08 94       	sec
    1b2c:	c1 1c       	adc	r12, r1
    1b2e:	d1 1c       	adc	r13, r1
	uint8 index; /*Used For Looping*/
	uint32 value=0; /*The return Number,Only unsigned !*/

	for(index=0;index<len;index++)
    1b30:	00 23       	and	r16, r16
    1b32:	99 f1       	breq	.+102    	; 0x1b9a <KeyPad_getSeriesOfPressedNumbers+0xac>
    1b34:	76 01       	movw	r14, r12
    1b36:	10 e0       	ldi	r17, 0x00	; 0
	{
		SeriesOfpressedKeys[index]=KeyPad_getPressedKey();
    1b38:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <KeyPad_getPressedKey>
    1b3c:	d7 01       	movw	r26, r14
    1b3e:	8d 93       	st	X+, r24
    1b40:	7d 01       	movw	r14, r26
    1b42:	8f e5       	ldi	r24, 0x5F	; 95
    1b44:	9a ee       	ldi	r25, 0xEA	; 234
    1b46:	a0 e0       	ldi	r26, 0x00	; 0
    1b48:	81 50       	subi	r24, 0x01	; 1
    1b4a:	90 40       	sbci	r25, 0x00	; 0
    1b4c:	a0 40       	sbci	r26, 0x00	; 0
    1b4e:	e1 f7       	brne	.-8      	; 0x1b48 <KeyPad_getSeriesOfPressedNumbers+0x5a>
    1b50:	00 c0       	rjmp	.+0      	; 0x1b52 <KeyPad_getSeriesOfPressedNumbers+0x64>
    1b52:	00 00       	nop
{
	uint8 SeriesOfpressedKeys[len];/*Only C99,VLA feature*/
	uint8 index; /*Used For Looping*/
	uint32 value=0; /*The return Number,Only unsigned !*/

	for(index=0;index<len;index++)
    1b54:	1f 5f       	subi	r17, 0xFF	; 255
    1b56:	10 17       	cp	r17, r16
    1b58:	79 f7       	brne	.-34     	; 0x1b38 <KeyPad_getSeriesOfPressedNumbers+0x4a>
	for(index=1;index<=y;index++)
	val*=x;
	return val;
}

uint32 KeyPad_getSeriesOfPressedNumbers(uint8 len)
    1b5a:	ac 0c       	add	r10, r12
    1b5c:	bd 1c       	adc	r11, r13
    1b5e:	cc 24       	eor	r12, r12
    1b60:	dd 24       	eor	r13, r13
    1b62:	76 01       	movw	r14, r12
    1b64:	10 e0       	ldi	r17, 0x00	; 0
{
	uint8 SeriesOfpressedKeys[len];/*Only C99,VLA feature*/
	uint8 index; /*Used For Looping*/
	uint32 value=0; /*The return Number,Only unsigned !*/

	for(index=0;index<len;index++)
    1b66:	08 94       	sec
    1b68:	a1 08       	sbc	r10, r1
    1b6a:	b1 08       	sbc	r11, r1
		_delay_ms(300);
	}

	for(index=0;index<len;index++)
	{
		value+=SeriesOfpressedKeys[len-index-1]*powerOf(10,index);
    1b6c:	8a e0       	ldi	r24, 0x0A	; 10
    1b6e:	61 2f       	mov	r22, r17
    1b70:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <powerOf>
    1b74:	9b 01       	movw	r18, r22
    1b76:	ac 01       	movw	r20, r24
    1b78:	d5 01       	movw	r26, r10
    1b7a:	6c 91       	ld	r22, X
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	c8 0e       	add	r12, r24
    1b8c:	d9 1e       	adc	r13, r25
    1b8e:	ea 1e       	adc	r14, r26
    1b90:	fb 1e       	adc	r15, r27
	{
		SeriesOfpressedKeys[index]=KeyPad_getPressedKey();
		_delay_ms(300);
	}

	for(index=0;index<len;index++)
    1b92:	1f 5f       	subi	r17, 0xFF	; 255
    1b94:	10 17       	cp	r17, r16
    1b96:	39 f7       	brne	.-50     	; 0x1b66 <KeyPad_getSeriesOfPressedNumbers+0x78>
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <KeyPad_getSeriesOfPressedNumbers+0xb2>
{
	uint8 SeriesOfpressedKeys[len];/*Only C99,VLA feature*/
	uint8 index; /*Used For Looping*/
	uint32 value=0; /*The return Number,Only unsigned !*/

	for(index=0;index<len;index++)
    1b9a:	cc 24       	eor	r12, r12
    1b9c:	dd 24       	eor	r13, r13
    1b9e:	76 01       	movw	r14, r12
	}
	
	if(!(value >= 0)) return -1;
	
	return value;
}
    1ba0:	6c 2d       	mov	r22, r12
    1ba2:	7d 2d       	mov	r23, r13
    1ba4:	8e 2d       	mov	r24, r14
    1ba6:	9f 2d       	mov	r25, r15
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	9e be       	out	0x3e, r9	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	8d be       	out	0x3d, r8	; 61
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	bf 90       	pop	r11
    1bc4:	af 90       	pop	r10
    1bc6:	9f 90       	pop	r9
    1bc8:	8f 90       	pop	r8
    1bca:	08 95       	ret

00001bcc <LCD_sendCommand>:
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
}

void LCD_sendCommand(uint8 command)
{
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1bcc:	90 98       	cbi	0x12, 0	; 18
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1bce:	91 98       	cbi	0x12, 1	; 18
    1bd0:	e9 ef       	ldi	r30, 0xF9	; 249
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	31 97       	sbiw	r30, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_sendCommand+0x8>
    1bd8:	00 c0       	rjmp	.+0      	; 0x1bda <LCD_sendCommand+0xe>
    1bda:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1bdc:	92 9a       	sbi	0x12, 2	; 18
    1bde:	e9 ef       	ldi	r30, 0xF9	; 249
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	31 97       	sbiw	r30, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LCD_sendCommand+0x16>
    1be6:	00 c0       	rjmp	.+0      	; 0x1be8 <LCD_sendCommand+0x1c>
    1be8:	00 00       	nop
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */ 
    1bea:	85 bb       	out	0x15, r24	; 21
    1bec:	89 ef       	ldi	r24, 0xF9	; 249
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_sendCommand+0x24>
    1bf4:	00 c0       	rjmp	.+0      	; 0x1bf6 <LCD_sendCommand+0x2a>
    1bf6:	00 00       	nop
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1bf8:	92 98       	cbi	0x12, 2	; 18
    1bfa:	e9 ef       	ldi	r30, 0xF9	; 249
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	31 97       	sbiw	r30, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_sendCommand+0x32>
    1c02:	00 c0       	rjmp	.+0      	; 0x1c04 <LCD_sendCommand+0x38>
    1c04:	00 00       	nop
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    1c06:	08 95       	ret

00001c08 <LCD_init>:

#include "lcd.h"

void LCD_init(void)
{
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1c08:	81 b3       	in	r24, 0x11	; 17
    1c0a:	87 60       	ori	r24, 0x07	; 7
    1c0c:	81 bb       	out	0x11, r24	; 17
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode ? */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	84 bb       	out	0x14, r24	; 20
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1c12:	88 e3       	ldi	r24, 0x38	; 56
    1c14:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_STATE); /* cursor off */
    1c18:	8e e0       	ldi	r24, 0x0E	; 14
    1c1a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <LCD_sendCommand>
}
    1c24:	08 95       	ret

00001c26 <LCD_displayCharacter>:
	#endif	
}

void LCD_displayCharacter(uint8 data)
{
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1c26:	90 9a       	sbi	0x12, 0	; 18
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1c28:	91 98       	cbi	0x12, 1	; 18
    1c2a:	e9 ef       	ldi	r30, 0xF9	; 249
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	31 97       	sbiw	r30, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_displayCharacter+0x8>
    1c32:	00 c0       	rjmp	.+0      	; 0x1c34 <LCD_displayCharacter+0xe>
    1c34:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1c36:	92 9a       	sbi	0x12, 2	; 18
    1c38:	e9 ef       	ldi	r30, 0xF9	; 249
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	31 97       	sbiw	r30, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_displayCharacter+0x16>
    1c40:	00 c0       	rjmp	.+0      	; 0x1c42 <LCD_displayCharacter+0x1c>
    1c42:	00 00       	nop
		
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
		_delay_ms(1); /* delay for processing Th = 13ns */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT = data; /* out the required data to the data bus D0 --> D7 */
    1c44:	85 bb       	out	0x15, r24	; 21
    1c46:	89 ef       	ldi	r24, 0xF9	; 249
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <LCD_displayCharacter+0x24>
    1c4e:	00 c0       	rjmp	.+0      	; 0x1c50 <LCD_displayCharacter+0x2a>
    1c50:	00 00       	nop
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c52:	92 98       	cbi	0x12, 2	; 18
    1c54:	e9 ef       	ldi	r30, 0xF9	; 249
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	31 97       	sbiw	r30, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_displayCharacter+0x32>
    1c5c:	00 c0       	rjmp	.+0      	; 0x1c5e <LCD_displayCharacter+0x38>
    1c5e:	00 00       	nop
		_delay_ms(1); /* delay for processing Th = 13ns */
	#endif	
}
    1c60:	08 95       	ret

00001c62 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	8c 01       	movw	r16, r24
	uint8 i = 0;
	while(Str[i] != '\0')
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	80 81       	ld	r24, Z
    1c6e:	88 23       	and	r24, r24
    1c70:	51 f0       	breq	.+20     	; 0x1c86 <LCD_displayString+0x24>
	#endif	
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
    1c72:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1c74:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_displayCharacter>
		i++;
    1c78:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	ec 0f       	add	r30, r28
    1c7e:	f1 1d       	adc	r31, r1
    1c80:	80 81       	ld	r24, Z
    1c82:	88 23       	and	r24, r24
    1c84:	b9 f7       	brne	.-18     	; 0x1c74 <LCD_displayString+0x12>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	08 95       	ret

00001c8e <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	39 f0       	breq	.+14     	; 0x1ca0 <LCD_goToRowColumn+0x12>
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	70 f0       	brcs	.+28     	; 0x1cb2 <LCD_goToRowColumn+0x24>
    1c96:	82 30       	cpi	r24, 0x02	; 2
    1c98:	31 f0       	breq	.+12     	; 0x1ca6 <LCD_goToRowColumn+0x18>
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	59 f4       	brne	.+22     	; 0x1cb4 <LCD_goToRowColumn+0x26>
    1c9e:	06 c0       	rjmp	.+12     	; 0x1cac <LCD_goToRowColumn+0x1e>
	{
		case 0:
				Address=col;
				break;
		case 1:
				Address=col+0x40;
    1ca0:	96 2f       	mov	r25, r22
    1ca2:	90 5c       	subi	r25, 0xC0	; 192
				break;
    1ca4:	07 c0       	rjmp	.+14     	; 0x1cb4 <LCD_goToRowColumn+0x26>
		case 2:
				Address=col+0x10;
    1ca6:	96 2f       	mov	r25, r22
    1ca8:	90 5f       	subi	r25, 0xF0	; 240
				break;
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <LCD_goToRowColumn+0x26>
		case 3:
				Address=col+0x50;
    1cac:	96 2f       	mov	r25, r22
    1cae:	90 5b       	subi	r25, 0xB0	; 176
				break;
    1cb0:	01 c0       	rjmp	.+2      	; 0x1cb4 <LCD_goToRowColumn+0x26>
	
	/* first of all calculate the required address */
	switch(row)
	{
		case 0:
				Address=col;
    1cb2:	96 2f       	mov	r25, r22
				Address=col+0x50;
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); /*0x80+Address*/
    1cb4:	89 2f       	mov	r24, r25
    1cb6:	80 68       	ori	r24, 0x80	; 128
    1cb8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <LCD_sendCommand>
}
    1cbc:	08 95       	ret

00001cbe <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1cc4:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1cc8:	ce 01       	movw	r24, r28
    1cca:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <LCD_displayString>
}
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <LCD_sendCommand>
}
    1cda:	08 95       	ret

00001cdc <LCD_Signed_Int64_ToString>:
	return 0;
}


void LCD_Signed_Int64_ToString(sint64 data)
{
    1cdc:	2f 92       	push	r2
    1cde:	3f 92       	push	r3
    1ce0:	4f 92       	push	r4
    1ce2:	5f 92       	push	r5
    1ce4:	6f 92       	push	r6
    1ce6:	7f 92       	push	r7
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	63 97       	sbiw	r28, 0x13	; 19
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	2a 8b       	std	Y+18, r18	; 0x12
    1d12:	39 8b       	std	Y+17, r19	; 0x11
    1d14:	24 2e       	mov	r2, r20
    1d16:	35 2e       	mov	r3, r21
    1d18:	46 2e       	mov	r4, r22
    1d1a:	57 2e       	mov	r5, r23
    1d1c:	78 2e       	mov	r7, r24
    1d1e:	89 2e       	mov	r8, r25
	char buf[16]={0};
    1d20:	fe 01       	movw	r30, r28
    1d22:	31 96       	adiw	r30, 0x01	; 1
    1d24:	80 e1       	ldi	r24, 0x10	; 16
    1d26:	df 01       	movw	r26, r30
    1d28:	1d 92       	st	X+, r1
    1d2a:	8a 95       	dec	r24
    1d2c:	e9 f7       	brne	.-6      	; 0x1d28 <LCD_Signed_Int64_ToString+0x4c>
	sint64 sum = num;
	uint8 i = 0;
	uint8 digit;
	uint8 Negative=0;
	
	if(sum < 0){
    1d2e:	99 23       	and	r25, r25
    1d30:	14 f0       	brlt	.+4      	; 0x1d36 <LCD_Signed_Int64_ToString+0x5a>
static uint8 Signed_Int64_ToASCI(sint64 num, uint8* str, uint8 len, uint8 base)
{
	sint64 sum = num;
	uint8 i = 0;
	uint8 digit;
	uint8 Negative=0;
    1d32:	1b 8a       	std	Y+19, r1	; 0x13
    1d34:	5a c0       	rjmp	.+180    	; 0x1dea <LCD_Signed_Int64_ToString+0x10e>
	
	if(sum < 0){
		sum=-sum;
    1d36:	4a 89       	ldd	r20, Y+18	; 0x12
    1d38:	41 95       	neg	r20
    1d3a:	21 e0       	ldi	r18, 0x01	; 1
    1d3c:	14 16       	cp	r1, r20
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <LCD_Signed_Int64_ToString+0x66>
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	89 89       	ldd	r24, Y+17	; 0x11
    1d44:	81 95       	neg	r24
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	18 16       	cp	r1, r24
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <LCD_Signed_Int64_ToString+0x72>
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	38 2f       	mov	r19, r24
    1d50:	32 1b       	sub	r19, r18
    1d52:	21 e0       	ldi	r18, 0x01	; 1
    1d54:	83 17       	cp	r24, r19
    1d56:	08 f0       	brcs	.+2      	; 0x1d5a <LCD_Signed_Int64_ToString+0x7e>
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	92 2b       	or	r25, r18
    1d5c:	22 2d       	mov	r18, r2
    1d5e:	21 95       	neg	r18
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	12 16       	cp	r1, r18
    1d64:	08 f0       	brcs	.+2      	; 0x1d68 <LCD_Signed_Int64_ToString+0x8c>
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	22 2e       	mov	r2, r18
    1d6a:	29 1a       	sub	r2, r25
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	22 15       	cp	r18, r2
    1d70:	08 f0       	brcs	.+2      	; 0x1d74 <LCD_Signed_Int64_ToString+0x98>
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	89 2b       	or	r24, r25
    1d76:	23 2d       	mov	r18, r3
    1d78:	21 95       	neg	r18
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	12 16       	cp	r1, r18
    1d7e:	08 f0       	brcs	.+2      	; 0x1d82 <LCD_Signed_Int64_ToString+0xa6>
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	32 2e       	mov	r3, r18
    1d84:	38 1a       	sub	r3, r24
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	23 15       	cp	r18, r3
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <LCD_Signed_Int64_ToString+0xb2>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	98 2b       	or	r25, r24
    1d90:	24 2d       	mov	r18, r4
    1d92:	21 95       	neg	r18
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	12 16       	cp	r1, r18
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <LCD_Signed_Int64_ToString+0xc0>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	42 2e       	mov	r4, r18
    1d9e:	49 1a       	sub	r4, r25
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	24 15       	cp	r18, r4
    1da4:	08 f0       	brcs	.+2      	; 0x1da8 <LCD_Signed_Int64_ToString+0xcc>
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	89 2b       	or	r24, r25
    1daa:	25 2d       	mov	r18, r5
    1dac:	21 95       	neg	r18
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	12 16       	cp	r1, r18
    1db2:	08 f0       	brcs	.+2      	; 0x1db6 <LCD_Signed_Int64_ToString+0xda>
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	52 2e       	mov	r5, r18
    1db8:	58 1a       	sub	r5, r24
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	25 15       	cp	r18, r5
    1dbe:	08 f0       	brcs	.+2      	; 0x1dc2 <LCD_Signed_Int64_ToString+0xe6>
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	98 2b       	or	r25, r24
    1dc4:	27 2d       	mov	r18, r7
    1dc6:	21 95       	neg	r18
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	12 16       	cp	r1, r18
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <LCD_Signed_Int64_ToString+0xf4>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	72 2e       	mov	r7, r18
    1dd2:	79 1a       	sub	r7, r25
    1dd4:	91 e0       	ldi	r25, 0x01	; 1
    1dd6:	27 15       	cp	r18, r7
    1dd8:	08 f0       	brcs	.+2      	; 0x1ddc <LCD_Signed_Int64_ToString+0x100>
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	89 2b       	or	r24, r25
    1dde:	81 94       	neg	r8
    1de0:	4a 8b       	std	Y+18, r20	; 0x12
    1de2:	39 8b       	std	Y+17, r19	; 0x11
    1de4:	88 1a       	sub	r8, r24
		Negative=1;
    1de6:	b1 e0       	ldi	r27, 0x01	; 1
    1de8:	bb 8b       	std	Y+19, r27	; 0x13
    1dea:	66 24       	eor	r6, r6
    1dec:	63 94       	inc	r6
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <LCD_Signed_Int64_ToString+0x116>
		if (digit < 0xA)
			str[i++] = '0' + digit;
		else
			str[i++] = 'A' + digit - 0xA;
		sum /= base;
	}while (sum > 0);
    1df0:	68 2e       	mov	r6, r24
	uint8 i = 0;
	uint8 digit;
	uint8 Negative=0;
	
	if(sum < 0){
		sum=-sum;
    1df2:	96 2c       	mov	r9, r6
    1df4:	9a 94       	dec	r9
		Negative=1;
	}
	
	do
	{
		digit = sum % base;
    1df6:	2a 89       	ldd	r18, Y+18	; 0x12
    1df8:	39 89       	ldd	r19, Y+17	; 0x11
    1dfa:	42 2d       	mov	r20, r2
    1dfc:	53 2d       	mov	r21, r3
    1dfe:	64 2d       	mov	r22, r4
    1e00:	75 2d       	mov	r23, r5
    1e02:	87 2d       	mov	r24, r7
    1e04:	98 2d       	mov	r25, r8
    1e06:	0f 2e       	mov	r0, r31
    1e08:	fa e0       	ldi	r31, 0x0A	; 10
    1e0a:	af 2e       	mov	r10, r31
    1e0c:	f0 2d       	mov	r31, r0
    1e0e:	bb 24       	eor	r11, r11
    1e10:	cc 24       	eor	r12, r12
    1e12:	dd 24       	eor	r13, r13
    1e14:	ee 24       	eor	r14, r14
    1e16:	ff 24       	eor	r15, r15
    1e18:	00 e0       	ldi	r16, 0x00	; 0
    1e1a:	10 e0       	ldi	r17, 0x00	; 0
    1e1c:	0e 94 28 18 	call	0x3050	; 0x3050 <__moddi3>
		if (digit < 0xA)
    1e20:	2a 30       	cpi	r18, 0x0A	; 10
    1e22:	48 f4       	brcc	.+18     	; 0x1e36 <LCD_Signed_Int64_ToString+0x15a>
			str[i++] = '0' + digit;
    1e24:	e1 e0       	ldi	r30, 0x01	; 1
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	ec 0f       	add	r30, r28
    1e2a:	fd 1f       	adc	r31, r29
    1e2c:	e9 0d       	add	r30, r9
    1e2e:	f1 1d       	adc	r31, r1
    1e30:	20 5d       	subi	r18, 0xD0	; 208
    1e32:	20 83       	st	Z, r18
    1e34:	08 c0       	rjmp	.+16     	; 0x1e46 <LCD_Signed_Int64_ToString+0x16a>
		else
			str[i++] = 'A' + digit - 0xA;
    1e36:	e1 e0       	ldi	r30, 0x01	; 1
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	ec 0f       	add	r30, r28
    1e3c:	fd 1f       	adc	r31, r29
    1e3e:	e9 0d       	add	r30, r9
    1e40:	f1 1d       	adc	r31, r1
    1e42:	29 5c       	subi	r18, 0xC9	; 201
    1e44:	20 83       	st	Z, r18
		sum /= base;
    1e46:	2a 89       	ldd	r18, Y+18	; 0x12
    1e48:	39 89       	ldd	r19, Y+17	; 0x11
    1e4a:	42 2d       	mov	r20, r2
    1e4c:	53 2d       	mov	r21, r3
    1e4e:	64 2d       	mov	r22, r4
    1e50:	75 2d       	mov	r23, r5
    1e52:	87 2d       	mov	r24, r7
    1e54:	98 2d       	mov	r25, r8
    1e56:	0f 2e       	mov	r0, r31
    1e58:	fa e0       	ldi	r31, 0x0A	; 10
    1e5a:	af 2e       	mov	r10, r31
    1e5c:	f0 2d       	mov	r31, r0
    1e5e:	bb 24       	eor	r11, r11
    1e60:	cc 24       	eor	r12, r12
    1e62:	dd 24       	eor	r13, r13
    1e64:	ee 24       	eor	r14, r14
    1e66:	ff 24       	eor	r15, r15
    1e68:	00 e0       	ldi	r16, 0x00	; 0
    1e6a:	10 e0       	ldi	r17, 0x00	; 0
    1e6c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <__divdi3>
    1e70:	2a 8b       	std	Y+18, r18	; 0x12
    1e72:	39 8b       	std	Y+17, r19	; 0x11
    1e74:	24 2e       	mov	r2, r20
    1e76:	35 2e       	mov	r3, r21
    1e78:	46 2e       	mov	r4, r22
    1e7a:	57 2e       	mov	r5, r23
    1e7c:	78 2e       	mov	r7, r24
    1e7e:	89 2e       	mov	r8, r25
    1e80:	86 2d       	mov	r24, r6
    1e82:	8f 5f       	subi	r24, 0xFF	; 255
	}while (sum > 0);
    1e84:	18 14       	cp	r1, r8
    1e86:	0c f4       	brge	.+2      	; 0x1e8a <LCD_Signed_Int64_ToString+0x1ae>
    1e88:	b3 cf       	rjmp	.-154    	; 0x1df0 <LCD_Signed_Int64_ToString+0x114>
    1e8a:	88 20       	and	r8, r8
    1e8c:	09 f5       	brne	.+66     	; 0x1ed0 <LCD_Signed_Int64_ToString+0x1f4>
    1e8e:	77 20       	and	r7, r7
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <LCD_Signed_Int64_ToString+0x1b8>
    1e92:	ae cf       	rjmp	.-164    	; 0x1df0 <LCD_Signed_Int64_ToString+0x114>
    1e94:	77 20       	and	r7, r7
    1e96:	e1 f4       	brne	.+56     	; 0x1ed0 <LCD_Signed_Int64_ToString+0x1f4>
    1e98:	55 20       	and	r5, r5
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <LCD_Signed_Int64_ToString+0x1c2>
    1e9c:	a9 cf       	rjmp	.-174    	; 0x1df0 <LCD_Signed_Int64_ToString+0x114>
    1e9e:	55 20       	and	r5, r5
    1ea0:	b9 f4       	brne	.+46     	; 0x1ed0 <LCD_Signed_Int64_ToString+0x1f4>
    1ea2:	44 20       	and	r4, r4
    1ea4:	09 f0       	breq	.+2      	; 0x1ea8 <LCD_Signed_Int64_ToString+0x1cc>
    1ea6:	a4 cf       	rjmp	.-184    	; 0x1df0 <LCD_Signed_Int64_ToString+0x114>
    1ea8:	44 20       	and	r4, r4
    1eaa:	91 f4       	brne	.+36     	; 0x1ed0 <LCD_Signed_Int64_ToString+0x1f4>
    1eac:	33 20       	and	r3, r3
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <LCD_Signed_Int64_ToString+0x1d6>
    1eb0:	9f cf       	rjmp	.-194    	; 0x1df0 <LCD_Signed_Int64_ToString+0x114>
    1eb2:	33 20       	and	r3, r3
    1eb4:	69 f4       	brne	.+26     	; 0x1ed0 <LCD_Signed_Int64_ToString+0x1f4>
    1eb6:	22 20       	and	r2, r2
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <LCD_Signed_Int64_ToString+0x1e0>
    1eba:	9a cf       	rjmp	.-204    	; 0x1df0 <LCD_Signed_Int64_ToString+0x114>
    1ebc:	22 20       	and	r2, r2
    1ebe:	41 f4       	brne	.+16     	; 0x1ed0 <LCD_Signed_Int64_ToString+0x1f4>
    1ec0:	33 23       	and	r19, r19
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <LCD_Signed_Int64_ToString+0x1ea>
    1ec4:	95 cf       	rjmp	.-214    	; 0x1df0 <LCD_Signed_Int64_ToString+0x114>
    1ec6:	33 23       	and	r19, r19
    1ec8:	19 f4       	brne	.+6      	; 0x1ed0 <LCD_Signed_Int64_ToString+0x1f4>
    1eca:	22 23       	and	r18, r18
    1ecc:	09 f0       	breq	.+2      	; 0x1ed0 <LCD_Signed_Int64_ToString+0x1f4>
    1ece:	90 cf       	rjmp	.-224    	; 0x1df0 <LCD_Signed_Int64_ToString+0x114>

	if(Negative) str[i]='-';
    1ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed2:	88 23       	and	r24, r24
    1ed4:	29 f0       	breq	.+10     	; 0x1ee0 <LCD_Signed_Int64_ToString+0x204>
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e6 0d       	add	r30, r6
    1eda:	f1 1d       	adc	r31, r1
    1edc:	8d e2       	ldi	r24, 0x2D	; 45
    1ede:	81 83       	std	Z+1, r24	; 0x01
	++i;
    1ee0:	63 94       	inc	r6
	str[i] = '\0';
    1ee2:	e1 e0       	ldi	r30, 0x01	; 1
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	ec 0f       	add	r30, r28
    1ee8:	fd 1f       	adc	r31, r29
    1eea:	e6 0d       	add	r30, r6
    1eec:	f1 1d       	adc	r31, r1
    1eee:	10 82       	st	Z, r1
	strrev(str);
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <strrev>

void LCD_Signed_Int64_ToString(sint64 data)
{
	char buf[16]={0};
	Signed_Int64_ToASCI(data,buf,16,10);
	LCD_displayString(buf);
    1ef8:	ce 01       	movw	r24, r28
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <LCD_displayString>
}
    1f00:	63 96       	adiw	r28, 0x13	; 19
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	df 90       	pop	r13
    1f1a:	cf 90       	pop	r12
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	9f 90       	pop	r9
    1f22:	8f 90       	pop	r8
    1f24:	7f 90       	pop	r7
    1f26:	6f 90       	pop	r6
    1f28:	5f 90       	pop	r5
    1f2a:	4f 90       	pop	r4
    1f2c:	3f 90       	pop	r3
    1f2e:	2f 90       	pop	r2
    1f30:	08 95       	ret

00001f32 <__muldi3>:
    1f32:	a0 e3       	ldi	r26, 0x30	; 48
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ef e9       	ldi	r30, 0x9F	; 159
    1f38:	ff e0       	ldi	r31, 0x0F	; 15
    1f3a:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__prologue_saves__+0x4>
    1f3e:	29 8f       	std	Y+25, r18	; 0x19
    1f40:	3a 8f       	std	Y+26, r19	; 0x1a
    1f42:	4b 8f       	std	Y+27, r20	; 0x1b
    1f44:	5c 8f       	std	Y+28, r21	; 0x1c
    1f46:	6d 8f       	std	Y+29, r22	; 0x1d
    1f48:	7e 8f       	std	Y+30, r23	; 0x1e
    1f4a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f4c:	98 a3       	lds	r25, 0x58
    1f4e:	a9 8a       	std	Y+17, r10	; 0x11
    1f50:	ba 8a       	std	Y+18, r11	; 0x12
    1f52:	cb 8a       	std	Y+19, r12	; 0x13
    1f54:	dc 8a       	std	Y+20, r13	; 0x14
    1f56:	ed 8a       	std	Y+21, r14	; 0x15
    1f58:	fe 8a       	std	Y+22, r15	; 0x16
    1f5a:	0f 8b       	std	Y+23, r16	; 0x17
    1f5c:	18 8f       	std	Y+24, r17	; 0x18
    1f5e:	09 8d       	ldd	r16, Y+25	; 0x19
    1f60:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1f62:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1f64:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1f66:	09 a3       	lds	r16, 0x59
    1f68:	1a a3       	lds	r17, 0x5a
    1f6a:	2b a3       	lds	r18, 0x5b
    1f6c:	3c a3       	lds	r19, 0x5c
    1f6e:	68 01       	movw	r12, r16
    1f70:	79 01       	movw	r14, r18
    1f72:	8f ef       	ldi	r24, 0xFF	; 255
    1f74:	9f ef       	ldi	r25, 0xFF	; 255
    1f76:	a0 e0       	ldi	r26, 0x00	; 0
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	c8 22       	and	r12, r24
    1f7c:	d9 22       	and	r13, r25
    1f7e:	ea 22       	and	r14, r26
    1f80:	fb 22       	and	r15, r27
    1f82:	89 01       	movw	r16, r18
    1f84:	22 27       	eor	r18, r18
    1f86:	33 27       	eor	r19, r19
    1f88:	09 a7       	lds	r16, 0x79
    1f8a:	1a a7       	lds	r17, 0x7a
    1f8c:	2b a7       	lds	r18, 0x7b
    1f8e:	3c a7       	lds	r19, 0x7c
    1f90:	09 89       	ldd	r16, Y+17	; 0x11
    1f92:	1a 89       	ldd	r17, Y+18	; 0x12
    1f94:	2b 89       	ldd	r18, Y+19	; 0x13
    1f96:	3c 89       	ldd	r19, Y+20	; 0x14
    1f98:	0d a3       	lds	r16, 0x5d
    1f9a:	1e a3       	lds	r17, 0x5e
    1f9c:	2f a3       	lds	r18, 0x5f
    1f9e:	38 a7       	lds	r19, 0x78
    1fa0:	48 01       	movw	r8, r16
    1fa2:	59 01       	movw	r10, r18
    1fa4:	88 22       	and	r8, r24
    1fa6:	99 22       	and	r9, r25
    1fa8:	aa 22       	and	r10, r26
    1faa:	bb 22       	and	r11, r27
    1fac:	29 01       	movw	r4, r18
    1fae:	66 24       	eor	r6, r6
    1fb0:	77 24       	eor	r7, r7
    1fb2:	c5 01       	movw	r24, r10
    1fb4:	b4 01       	movw	r22, r8
    1fb6:	a7 01       	movw	r20, r14
    1fb8:	96 01       	movw	r18, r12
    1fba:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    1fbe:	6d a7       	lds	r22, 0x7d
    1fc0:	7e a7       	lds	r23, 0x7e
    1fc2:	8f a7       	lds	r24, 0x7f
    1fc4:	98 ab       	sts	0x58, r25
    1fc6:	c3 01       	movw	r24, r6
    1fc8:	b2 01       	movw	r22, r4
    1fca:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    1fce:	6b 01       	movw	r12, r22
    1fd0:	7c 01       	movw	r14, r24
    1fd2:	c5 01       	movw	r24, r10
    1fd4:	b4 01       	movw	r22, r8
    1fd6:	29 a5       	lds	r18, 0x69
    1fd8:	3a a5       	lds	r19, 0x6a
    1fda:	4b a5       	lds	r20, 0x6b
    1fdc:	5c a5       	lds	r21, 0x6c
    1fde:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    1fe2:	4b 01       	movw	r8, r22
    1fe4:	5c 01       	movw	r10, r24
    1fe6:	c3 01       	movw	r24, r6
    1fe8:	b2 01       	movw	r22, r4
    1fea:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    1fee:	ab 01       	movw	r20, r22
    1ff0:	bc 01       	movw	r22, r24
    1ff2:	c8 0c       	add	r12, r8
    1ff4:	d9 1c       	adc	r13, r9
    1ff6:	ea 1c       	adc	r14, r10
    1ff8:	fb 1c       	adc	r15, r11
    1ffa:	0d a5       	lds	r16, 0x6d
    1ffc:	1e a5       	lds	r17, 0x6e
    1ffe:	2f a5       	lds	r18, 0x6f
    2000:	38 a9       	sts	0x48, r19
    2002:	c9 01       	movw	r24, r18
    2004:	aa 27       	eor	r26, r26
    2006:	bb 27       	eor	r27, r27
    2008:	c8 0e       	add	r12, r24
    200a:	d9 1e       	adc	r13, r25
    200c:	ea 1e       	adc	r14, r26
    200e:	fb 1e       	adc	r15, r27
    2010:	c8 14       	cp	r12, r8
    2012:	d9 04       	cpc	r13, r9
    2014:	ea 04       	cpc	r14, r10
    2016:	fb 04       	cpc	r15, r11
    2018:	20 f4       	brcc	.+8      	; 0x2022 <__muldi3+0xf0>
    201a:	40 50       	subi	r20, 0x00	; 0
    201c:	50 40       	sbci	r21, 0x00	; 0
    201e:	6f 4f       	sbci	r22, 0xFF	; 255
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	c7 01       	movw	r24, r14
    2024:	aa 27       	eor	r26, r26
    2026:	bb 27       	eor	r27, r27
    2028:	84 0f       	add	r24, r20
    202a:	95 1f       	adc	r25, r21
    202c:	a6 1f       	adc	r26, r22
    202e:	b7 1f       	adc	r27, r23
    2030:	8d 83       	std	Y+5, r24	; 0x05
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	af 83       	std	Y+7, r26	; 0x07
    2036:	b8 87       	std	Y+8, r27	; 0x08
    2038:	76 01       	movw	r14, r12
    203a:	dd 24       	eor	r13, r13
    203c:	cc 24       	eor	r12, r12
    203e:	4d a5       	lds	r20, 0x6d
    2040:	5e a5       	lds	r21, 0x6e
    2042:	6f a5       	lds	r22, 0x6f
    2044:	78 a9       	sts	0x48, r23
    2046:	60 70       	andi	r22, 0x00	; 0
    2048:	70 70       	andi	r23, 0x00	; 0
    204a:	c4 0e       	add	r12, r20
    204c:	d5 1e       	adc	r13, r21
    204e:	e6 1e       	adc	r14, r22
    2050:	f7 1e       	adc	r15, r23
    2052:	c9 82       	std	Y+1, r12	; 0x01
    2054:	da 82       	std	Y+2, r13	; 0x02
    2056:	eb 82       	std	Y+3, r14	; 0x03
    2058:	fc 82       	std	Y+4, r15	; 0x04
    205a:	1c 2d       	mov	r17, r12
    205c:	0a 81       	ldd	r16, Y+2	; 0x02
    205e:	8b 80       	ldd	r8, Y+3	; 0x03
    2060:	4c 80       	ldd	r4, Y+4	; 0x04
    2062:	8d 87       	std	Y+13, r24	; 0x0d
    2064:	8e 81       	ldd	r24, Y+6	; 0x06
    2066:	8e 87       	std	Y+14, r24	; 0x0e
    2068:	8f 81       	ldd	r24, Y+7	; 0x07
    206a:	8f 87       	std	Y+15, r24	; 0x0f
    206c:	88 85       	ldd	r24, Y+8	; 0x08
    206e:	88 8b       	std	Y+16, r24	; 0x10
    2070:	2d 89       	ldd	r18, Y+21	; 0x15
    2072:	3e 89       	ldd	r19, Y+22	; 0x16
    2074:	4f 89       	ldd	r20, Y+23	; 0x17
    2076:	58 8d       	ldd	r21, Y+24	; 0x18
    2078:	69 a1       	lds	r22, 0x49
    207a:	7a a1       	lds	r23, 0x4a
    207c:	8b a1       	lds	r24, 0x4b
    207e:	9c a1       	lds	r25, 0x4c
    2080:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2084:	6b 01       	movw	r12, r22
    2086:	7c 01       	movw	r14, r24
    2088:	2d 8d       	ldd	r18, Y+29	; 0x1d
    208a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    208c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    208e:	58 a1       	lds	r21, 0x48
    2090:	6d a1       	lds	r22, 0x4d
    2092:	7e a1       	lds	r23, 0x4e
    2094:	8f a1       	lds	r24, 0x4f
    2096:	98 a5       	lds	r25, 0x68
    2098:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	c8 0e       	add	r12, r24
    20a2:	d9 1e       	adc	r13, r25
    20a4:	ea 1e       	adc	r14, r26
    20a6:	fb 1e       	adc	r15, r27
    20a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ac:	af 85       	ldd	r26, Y+15	; 0x0f
    20ae:	b8 89       	ldd	r27, Y+16	; 0x10
    20b0:	8c 0d       	add	r24, r12
    20b2:	9d 1d       	adc	r25, r13
    20b4:	ae 1d       	adc	r26, r14
    20b6:	bf 1d       	adc	r27, r15
    20b8:	8d 87       	std	Y+13, r24	; 0x0d
    20ba:	9e 87       	std	Y+14, r25	; 0x0e
    20bc:	af 87       	std	Y+15, r26	; 0x0f
    20be:	b8 8b       	std	Y+16, r27	; 0x10
    20c0:	68 2f       	mov	r22, r24
    20c2:	7e 85       	ldd	r23, Y+14	; 0x0e
    20c4:	21 2f       	mov	r18, r17
    20c6:	30 2f       	mov	r19, r16
    20c8:	48 2d       	mov	r20, r8
    20ca:	54 2d       	mov	r21, r4
    20cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ce:	98 89       	ldd	r25, Y+16	; 0x10
    20d0:	e0 96       	adiw	r28, 0x30	; 48
    20d2:	e0 e1       	ldi	r30, 0x10	; 16
    20d4:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__epilogue_restores__+0x4>

000020d8 <__divdi3>:
    20d8:	a8 e4       	ldi	r26, 0x48	; 72
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e2 e7       	ldi	r30, 0x72	; 114
    20de:	f0 e1       	ldi	r31, 0x10	; 16
    20e0:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <__prologue_saves__+0x2>
    20e4:	f5 01       	movw	r30, r10
    20e6:	29 a3       	lds	r18, 0x59
    20e8:	3a a3       	lds	r19, 0x5a
    20ea:	4b a3       	lds	r20, 0x5b
    20ec:	5c a3       	lds	r21, 0x5c
    20ee:	6d a3       	lds	r22, 0x5d
    20f0:	7e a3       	lds	r23, 0x5e
    20f2:	8f a3       	lds	r24, 0x5f
    20f4:	98 a7       	lds	r25, 0x78
    20f6:	a9 8e       	std	Y+25, r10	; 0x19
    20f8:	fa 8f       	std	Y+26, r31	; 0x1a
    20fa:	cb 8e       	std	Y+27, r12	; 0x1b
    20fc:	dc 8e       	std	Y+28, r13	; 0x1c
    20fe:	ed 8e       	std	Y+29, r14	; 0x1d
    2100:	fe 8e       	std	Y+30, r15	; 0x1e
    2102:	0f 8f       	std	Y+31, r16	; 0x1f
    2104:	18 a3       	lds	r17, 0x58
    2106:	8d a0       	lds	r24, 0x8d
    2108:	9e a0       	lds	r25, 0x8e
    210a:	af a0       	lds	r26, 0x8f
    210c:	b8 a4       	lds	r27, 0xa8
    210e:	b7 fe       	sbrs	r11, 7
    2110:	67 c0       	rjmp	.+206    	; 0x21e0 <__divdi3+0x108>
    2112:	21 95       	neg	r18
    2114:	b1 e0       	ldi	r27, 0x01	; 1
    2116:	12 16       	cp	r1, r18
    2118:	08 f0       	brcs	.+2      	; 0x211c <__divdi3+0x44>
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	31 95       	neg	r19
    211e:	a1 e0       	ldi	r26, 0x01	; 1
    2120:	13 16       	cp	r1, r19
    2122:	08 f0       	brcs	.+2      	; 0x2126 <__divdi3+0x4e>
    2124:	a0 e0       	ldi	r26, 0x00	; 0
    2126:	b3 2e       	mov	r11, r19
    2128:	bb 1a       	sub	r11, r27
    212a:	bb 2d       	mov	r27, r11
    212c:	88 24       	eor	r8, r8
    212e:	83 94       	inc	r8
    2130:	3b 15       	cp	r19, r11
    2132:	08 f0       	brcs	.+2      	; 0x2136 <__divdi3+0x5e>
    2134:	88 24       	eor	r8, r8
    2136:	a8 29       	or	r26, r8
    2138:	41 95       	neg	r20
    213a:	31 e0       	ldi	r19, 0x01	; 1
    213c:	14 16       	cp	r1, r20
    213e:	08 f0       	brcs	.+2      	; 0x2142 <__divdi3+0x6a>
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	b4 2e       	mov	r11, r20
    2144:	ba 1a       	sub	r11, r26
    2146:	ab 2d       	mov	r26, r11
    2148:	88 24       	eor	r8, r8
    214a:	83 94       	inc	r8
    214c:	4b 15       	cp	r20, r11
    214e:	08 f0       	brcs	.+2      	; 0x2152 <__divdi3+0x7a>
    2150:	88 24       	eor	r8, r8
    2152:	38 29       	or	r19, r8
    2154:	51 95       	neg	r21
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	15 16       	cp	r1, r21
    215a:	08 f0       	brcs	.+2      	; 0x215e <__divdi3+0x86>
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	45 2e       	mov	r4, r21
    2160:	43 1a       	sub	r4, r19
    2162:	31 e0       	ldi	r19, 0x01	; 1
    2164:	54 15       	cp	r21, r4
    2166:	08 f0       	brcs	.+2      	; 0x216a <__divdi3+0x92>
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	43 2b       	or	r20, r19
    216c:	61 95       	neg	r22
    216e:	31 e0       	ldi	r19, 0x01	; 1
    2170:	16 16       	cp	r1, r22
    2172:	08 f0       	brcs	.+2      	; 0x2176 <__divdi3+0x9e>
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	86 2e       	mov	r8, r22
    2178:	84 1a       	sub	r8, r20
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	68 15       	cp	r22, r8
    217e:	08 f0       	brcs	.+2      	; 0x2182 <__divdi3+0xaa>
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	34 2b       	or	r19, r20
    2184:	71 95       	neg	r23
    2186:	41 e0       	ldi	r20, 0x01	; 1
    2188:	17 16       	cp	r1, r23
    218a:	08 f0       	brcs	.+2      	; 0x218e <__divdi3+0xb6>
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	57 2f       	mov	r21, r23
    2190:	53 1b       	sub	r21, r19
    2192:	31 e0       	ldi	r19, 0x01	; 1
    2194:	75 17       	cp	r23, r21
    2196:	08 f0       	brcs	.+2      	; 0x219a <__divdi3+0xc2>
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	43 2b       	or	r20, r19
    219c:	81 95       	neg	r24
    219e:	31 e0       	ldi	r19, 0x01	; 1
    21a0:	18 16       	cp	r1, r24
    21a2:	08 f0       	brcs	.+2      	; 0x21a6 <__divdi3+0xce>
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	68 2f       	mov	r22, r24
    21a8:	64 1b       	sub	r22, r20
    21aa:	46 2f       	mov	r20, r22
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	84 17       	cp	r24, r20
    21b0:	08 f0       	brcs	.+2      	; 0x21b4 <__divdi3+0xdc>
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	36 2b       	or	r19, r22
    21b6:	91 95       	neg	r25
    21b8:	93 1b       	sub	r25, r19
    21ba:	29 a3       	lds	r18, 0x59
    21bc:	ba a3       	lds	r27, 0x5a
    21be:	ab a3       	lds	r26, 0x5b
    21c0:	4c a2       	lds	r20, 0x9c
    21c2:	8d a2       	lds	r24, 0x9d
    21c4:	5e a3       	lds	r21, 0x5e
    21c6:	4f a3       	lds	r20, 0x5f
    21c8:	98 a7       	lds	r25, 0x78
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	9f ef       	ldi	r25, 0xFF	; 255
    21ce:	af ef       	ldi	r26, 0xFF	; 255
    21d0:	bf ef       	ldi	r27, 0xFF	; 255
    21d2:	25 96       	adiw	r28, 0x05	; 5
    21d4:	8c af       	sts	0x7c, r24
    21d6:	9d af       	sts	0x7d, r25
    21d8:	ae af       	sts	0x7e, r26
    21da:	bf af       	sts	0x7f, r27
    21dc:	25 97       	sbiw	r28, 0x05	; 5
    21de:	06 c0       	rjmp	.+12     	; 0x21ec <__divdi3+0x114>
    21e0:	25 96       	adiw	r28, 0x05	; 5
    21e2:	1c ae       	sts	0xbc, r17
    21e4:	1d ae       	sts	0xbd, r17
    21e6:	1e ae       	sts	0xbe, r17
    21e8:	1f ae       	sts	0xbf, r17
    21ea:	25 97       	sbiw	r28, 0x05	; 5
    21ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21f0:	af 8d       	ldd	r26, Y+31	; 0x1f
    21f2:	b8 a1       	lds	r27, 0x48
    21f4:	b7 ff       	sbrs	r27, 7
    21f6:	68 c0       	rjmp	.+208    	; 0x22c8 <__divdi3+0x1f0>
    21f8:	25 96       	adiw	r28, 0x05	; 5
    21fa:	2c ad       	sts	0x6c, r18
    21fc:	3d ad       	sts	0x6d, r19
    21fe:	4e ad       	sts	0x6e, r20
    2200:	5f ad       	sts	0x6f, r21
    2202:	25 97       	sbiw	r28, 0x05	; 5
    2204:	20 95       	com	r18
    2206:	30 95       	com	r19
    2208:	40 95       	com	r20
    220a:	50 95       	com	r21
    220c:	25 96       	adiw	r28, 0x05	; 5
    220e:	2c af       	sts	0x7c, r18
    2210:	3d af       	sts	0x7d, r19
    2212:	4e af       	sts	0x7e, r20
    2214:	5f af       	sts	0x7f, r21
    2216:	25 97       	sbiw	r28, 0x05	; 5
    2218:	e1 95       	neg	r30
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	1e 16       	cp	r1, r30
    221e:	08 f0       	brcs	.+2      	; 0x2222 <__divdi3+0x14a>
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	f1 95       	neg	r31
    2224:	91 e0       	ldi	r25, 0x01	; 1
    2226:	1f 16       	cp	r1, r31
    2228:	08 f0       	brcs	.+2      	; 0x222c <__divdi3+0x154>
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	4f 2f       	mov	r20, r31
    222e:	48 1b       	sub	r20, r24
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	f4 17       	cp	r31, r20
    2234:	08 f0       	brcs	.+2      	; 0x2238 <__divdi3+0x160>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	98 2b       	or	r25, r24
    223a:	c1 94       	neg	r12
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	1c 14       	cp	r1, r12
    2240:	08 f0       	brcs	.+2      	; 0x2244 <__divdi3+0x16c>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	6c 2d       	mov	r22, r12
    2246:	69 1b       	sub	r22, r25
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	c6 16       	cp	r12, r22
    224c:	08 f0       	brcs	.+2      	; 0x2250 <__divdi3+0x178>
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	89 2b       	or	r24, r25
    2252:	d1 94       	neg	r13
    2254:	91 e0       	ldi	r25, 0x01	; 1
    2256:	1d 14       	cp	r1, r13
    2258:	08 f0       	brcs	.+2      	; 0x225c <__divdi3+0x184>
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	5d 2d       	mov	r21, r13
    225e:	58 1b       	sub	r21, r24
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	d5 16       	cp	r13, r21
    2264:	08 f0       	brcs	.+2      	; 0x2268 <__divdi3+0x190>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	98 2b       	or	r25, r24
    226a:	e1 94       	neg	r14
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	1e 14       	cp	r1, r14
    2270:	08 f0       	brcs	.+2      	; 0x2274 <__divdi3+0x19c>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	3e 2d       	mov	r19, r14
    2276:	39 1b       	sub	r19, r25
    2278:	91 e0       	ldi	r25, 0x01	; 1
    227a:	e3 16       	cp	r14, r19
    227c:	08 f0       	brcs	.+2      	; 0x2280 <__divdi3+0x1a8>
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	89 2b       	or	r24, r25
    2282:	f1 94       	neg	r15
    2284:	91 e0       	ldi	r25, 0x01	; 1
    2286:	1f 14       	cp	r1, r15
    2288:	08 f0       	brcs	.+2      	; 0x228c <__divdi3+0x1b4>
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	2f 2d       	mov	r18, r15
    228e:	28 1b       	sub	r18, r24
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	f2 16       	cp	r15, r18
    2294:	08 f0       	brcs	.+2      	; 0x2298 <__divdi3+0x1c0>
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	98 2b       	or	r25, r24
    229a:	01 95       	neg	r16
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	10 16       	cp	r1, r16
    22a0:	08 f0       	brcs	.+2      	; 0x22a4 <__divdi3+0x1cc>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	70 2f       	mov	r23, r16
    22a6:	79 1b       	sub	r23, r25
    22a8:	97 2f       	mov	r25, r23
    22aa:	71 e0       	ldi	r23, 0x01	; 1
    22ac:	09 17       	cp	r16, r25
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <__divdi3+0x1da>
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	87 2b       	or	r24, r23
    22b4:	11 95       	neg	r17
    22b6:	18 1b       	sub	r17, r24
    22b8:	e9 8f       	std	Y+25, r30	; 0x19
    22ba:	4a 8f       	std	Y+26, r20	; 0x1a
    22bc:	6b 8f       	std	Y+27, r22	; 0x1b
    22be:	5c 8f       	std	Y+28, r21	; 0x1c
    22c0:	3d 8f       	std	Y+29, r19	; 0x1d
    22c2:	2e 8f       	std	Y+30, r18	; 0x1e
    22c4:	9f 8f       	std	Y+31, r25	; 0x1f
    22c6:	18 a3       	lds	r17, 0x58
    22c8:	79 8d       	ldd	r23, Y+25	; 0x19
    22ca:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22cc:	5b 8d       	ldd	r21, Y+27	; 0x1b
    22ce:	4c 8d       	ldd	r20, Y+28	; 0x1c
    22d0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    22d2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    22d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22d6:	88 a1       	lds	r24, 0x48
    22d8:	e9 a1       	lds	r30, 0x49
    22da:	e9 8b       	std	Y+17, r30	; 0x11
    22dc:	ea a1       	lds	r30, 0x4a
    22de:	ea 8b       	std	Y+18, r30	; 0x12
    22e0:	eb a1       	lds	r30, 0x4b
    22e2:	eb 8b       	std	Y+19, r30	; 0x13
    22e4:	ec a1       	lds	r30, 0x4c
    22e6:	ec 8b       	std	Y+20, r30	; 0x14
    22e8:	ed a1       	lds	r30, 0x4d
    22ea:	ed 8b       	std	Y+21, r30	; 0x15
    22ec:	ee a1       	lds	r30, 0x4e
    22ee:	ee 8b       	std	Y+22, r30	; 0x16
    22f0:	ef a1       	lds	r30, 0x4f
    22f2:	ef 8b       	std	Y+23, r30	; 0x17
    22f4:	e8 a5       	lds	r30, 0x68
    22f6:	e8 8f       	std	Y+24, r30	; 0x18
    22f8:	79 87       	std	Y+9, r23	; 0x09
    22fa:	6a 87       	std	Y+10, r22	; 0x0a
    22fc:	5b 87       	std	Y+11, r21	; 0x0b
    22fe:	4c 87       	std	Y+12, r20	; 0x0c
    2300:	3d 87       	std	Y+13, r19	; 0x0d
    2302:	2e 87       	std	Y+14, r18	; 0x0e
    2304:	9f 87       	std	Y+15, r25	; 0x0f
    2306:	88 8b       	std	Y+16, r24	; 0x10
    2308:	89 84       	ldd	r8, Y+9	; 0x09
    230a:	9a 84       	ldd	r9, Y+10	; 0x0a
    230c:	ab 84       	ldd	r10, Y+11	; 0x0b
    230e:	bc 84       	ldd	r11, Y+12	; 0x0c
    2310:	8d 85       	ldd	r24, Y+13	; 0x0d
    2312:	9e 85       	ldd	r25, Y+14	; 0x0e
    2314:	af 85       	ldd	r26, Y+15	; 0x0f
    2316:	b8 89       	ldd	r27, Y+16	; 0x10
    2318:	e9 88       	ldd	r14, Y+17	; 0x11
    231a:	fa 88       	ldd	r15, Y+18	; 0x12
    231c:	0b 89       	ldd	r16, Y+19	; 0x13
    231e:	1c 89       	ldd	r17, Y+20	; 0x14
    2320:	ed aa       	sts	0x9d, r30
    2322:	fe aa       	sts	0x9e, r31
    2324:	0f ab       	sts	0x5f, r16
    2326:	18 af       	sts	0x78, r17
    2328:	cd 88       	ldd	r12, Y+21	; 0x15
    232a:	de 88       	ldd	r13, Y+22	; 0x16
    232c:	ef 88       	ldd	r14, Y+23	; 0x17
    232e:	f8 8c       	ldd	r15, Y+24	; 0x18
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	a1 05       	cpc	r26, r1
    2334:	b1 05       	cpc	r27, r1
    2336:	09 f0       	breq	.+2      	; 0x233a <__divdi3+0x262>
    2338:	bd c3       	rjmp	.+1914   	; 0x2ab4 <__divdi3+0x9dc>
    233a:	c8 14       	cp	r12, r8
    233c:	d9 04       	cpc	r13, r9
    233e:	ea 04       	cpc	r14, r10
    2340:	fb 04       	cpc	r15, r11
    2342:	08 f0       	brcs	.+2      	; 0x2346 <__divdi3+0x26e>
    2344:	4d c1       	rjmp	.+666    	; 0x25e0 <__divdi3+0x508>
    2346:	00 e0       	ldi	r16, 0x00	; 0
    2348:	80 16       	cp	r8, r16
    234a:	00 e0       	ldi	r16, 0x00	; 0
    234c:	90 06       	cpc	r9, r16
    234e:	01 e0       	ldi	r16, 0x01	; 1
    2350:	a0 06       	cpc	r10, r16
    2352:	00 e0       	ldi	r16, 0x00	; 0
    2354:	b0 06       	cpc	r11, r16
    2356:	58 f4       	brcc	.+22     	; 0x236e <__divdi3+0x296>
    2358:	1f ef       	ldi	r17, 0xFF	; 255
    235a:	81 16       	cp	r8, r17
    235c:	91 04       	cpc	r9, r1
    235e:	a1 04       	cpc	r10, r1
    2360:	b1 04       	cpc	r11, r1
    2362:	09 f0       	breq	.+2      	; 0x2366 <__divdi3+0x28e>
    2364:	90 f4       	brcc	.+36     	; 0x238a <__divdi3+0x2b2>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	dc 01       	movw	r26, r24
    236c:	17 c0       	rjmp	.+46     	; 0x239c <__divdi3+0x2c4>
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	82 16       	cp	r8, r18
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	92 06       	cpc	r9, r18
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	a2 06       	cpc	r10, r18
    237a:	21 e0       	ldi	r18, 0x01	; 1
    237c:	b2 06       	cpc	r11, r18
    237e:	50 f4       	brcc	.+20     	; 0x2394 <__divdi3+0x2bc>
    2380:	80 e1       	ldi	r24, 0x10	; 16
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a0 e0       	ldi	r26, 0x00	; 0
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	09 c0       	rjmp	.+18     	; 0x239c <__divdi3+0x2c4>
    238a:	88 e0       	ldi	r24, 0x08	; 8
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a0 e0       	ldi	r26, 0x00	; 0
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	04 c0       	rjmp	.+8      	; 0x239c <__divdi3+0x2c4>
    2394:	88 e1       	ldi	r24, 0x18	; 24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 e0       	ldi	r26, 0x00	; 0
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	b5 01       	movw	r22, r10
    239e:	a4 01       	movw	r20, r8
    23a0:	08 2e       	mov	r0, r24
    23a2:	04 c0       	rjmp	.+8      	; 0x23ac <__divdi3+0x2d4>
    23a4:	76 95       	lsr	r23
    23a6:	67 95       	ror	r22
    23a8:	57 95       	ror	r21
    23aa:	47 95       	ror	r20
    23ac:	0a 94       	dec	r0
    23ae:	d2 f7       	brpl	.-12     	; 0x23a4 <__divdi3+0x2cc>
    23b0:	fa 01       	movw	r30, r20
    23b2:	e3 56       	subi	r30, 0x63	; 99
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	20 81       	ld	r18, Z
    23b8:	40 e2       	ldi	r20, 0x20	; 32
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	60 e0       	ldi	r22, 0x00	; 0
    23be:	70 e0       	ldi	r23, 0x00	; 0
    23c0:	48 1b       	sub	r20, r24
    23c2:	59 0b       	sbc	r21, r25
    23c4:	6a 0b       	sbc	r22, r26
    23c6:	7b 0b       	sbc	r23, r27
    23c8:	42 1b       	sub	r20, r18
    23ca:	51 09       	sbc	r21, r1
    23cc:	61 09       	sbc	r22, r1
    23ce:	71 09       	sbc	r23, r1
    23d0:	41 15       	cp	r20, r1
    23d2:	51 05       	cpc	r21, r1
    23d4:	61 05       	cpc	r22, r1
    23d6:	71 05       	cpc	r23, r1
    23d8:	a1 f1       	breq	.+104    	; 0x2442 <__divdi3+0x36a>
    23da:	04 2e       	mov	r0, r20
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <__divdi3+0x30e>
    23de:	88 0c       	add	r8, r8
    23e0:	99 1c       	adc	r9, r9
    23e2:	aa 1c       	adc	r10, r10
    23e4:	bb 1c       	adc	r11, r11
    23e6:	0a 94       	dec	r0
    23e8:	d2 f7       	brpl	.-12     	; 0x23de <__divdi3+0x306>
    23ea:	97 01       	movw	r18, r14
    23ec:	86 01       	movw	r16, r12
    23ee:	04 2e       	mov	r0, r20
    23f0:	04 c0       	rjmp	.+8      	; 0x23fa <__divdi3+0x322>
    23f2:	00 0f       	add	r16, r16
    23f4:	11 1f       	adc	r17, r17
    23f6:	22 1f       	adc	r18, r18
    23f8:	33 1f       	adc	r19, r19
    23fa:	0a 94       	dec	r0
    23fc:	d2 f7       	brpl	.-12     	; 0x23f2 <__divdi3+0x31a>
    23fe:	80 e2       	ldi	r24, 0x20	; 32
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	84 1b       	sub	r24, r20
    2404:	95 0b       	sbc	r25, r21
    2406:	cd a8       	sts	0x8d, r28
    2408:	de a8       	sts	0x8e, r29
    240a:	ef a8       	sts	0x8f, r30
    240c:	f8 ac       	sts	0xa8, r31
    240e:	04 c0       	rjmp	.+8      	; 0x2418 <__divdi3+0x340>
    2410:	f6 94       	lsr	r15
    2412:	e7 94       	ror	r14
    2414:	d7 94       	ror	r13
    2416:	c7 94       	ror	r12
    2418:	8a 95       	dec	r24
    241a:	d2 f7       	brpl	.-12     	; 0x2410 <__divdi3+0x338>
    241c:	c0 2a       	or	r12, r16
    241e:	d1 2a       	or	r13, r17
    2420:	e2 2a       	or	r14, r18
    2422:	f3 2a       	or	r15, r19
    2424:	0d a9       	sts	0x4d, r16
    2426:	1e a9       	sts	0x4e, r17
    2428:	2f a9       	sts	0x4f, r18
    242a:	38 ad       	sts	0x68, r19
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <__divdi3+0x35e>
    242e:	00 0f       	add	r16, r16
    2430:	11 1f       	adc	r17, r17
    2432:	22 1f       	adc	r18, r18
    2434:	33 1f       	adc	r19, r19
    2436:	4a 95       	dec	r20
    2438:	d2 f7       	brpl	.-12     	; 0x242e <__divdi3+0x356>
    243a:	0d ab       	sts	0x5d, r16
    243c:	1e ab       	sts	0x5e, r17
    243e:	2f ab       	sts	0x5f, r18
    2440:	38 af       	sts	0x78, r19
    2442:	25 01       	movw	r4, r10
    2444:	66 24       	eor	r6, r6
    2446:	77 24       	eor	r7, r7
    2448:	95 01       	movw	r18, r10
    244a:	84 01       	movw	r16, r8
    244c:	20 70       	andi	r18, 0x00	; 0
    244e:	30 70       	andi	r19, 0x00	; 0
    2450:	09 ab       	sts	0x59, r16
    2452:	1a ab       	sts	0x5a, r17
    2454:	2b ab       	sts	0x5b, r18
    2456:	3c ab       	sts	0x5c, r19
    2458:	c7 01       	movw	r24, r14
    245a:	b6 01       	movw	r22, r12
    245c:	a3 01       	movw	r20, r6
    245e:	92 01       	movw	r18, r4
    2460:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2464:	2d a7       	lds	r18, 0x7d
    2466:	3e a7       	lds	r19, 0x7e
    2468:	4f a7       	lds	r20, 0x7f
    246a:	58 ab       	sts	0x58, r21
    246c:	69 a7       	lds	r22, 0x79
    246e:	7a a7       	lds	r23, 0x7a
    2470:	8b a7       	lds	r24, 0x7b
    2472:	9c a7       	lds	r25, 0x7c
    2474:	c7 01       	movw	r24, r14
    2476:	b6 01       	movw	r22, r12
    2478:	a3 01       	movw	r20, r6
    247a:	92 01       	movw	r18, r4
    247c:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2480:	ca 01       	movw	r24, r20
    2482:	b9 01       	movw	r22, r18
    2484:	29 a9       	sts	0x49, r18
    2486:	3a a9       	sts	0x4a, r19
    2488:	4b a9       	sts	0x4b, r20
    248a:	5c a9       	sts	0x4c, r21
    248c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2490:	ab 01       	movw	r20, r22
    2492:	bc 01       	movw	r22, r24
    2494:	09 a5       	lds	r16, 0x69
    2496:	1a a5       	lds	r17, 0x6a
    2498:	2b a5       	lds	r18, 0x6b
    249a:	3c a5       	lds	r19, 0x6c
    249c:	78 01       	movw	r14, r16
    249e:	dd 24       	eor	r13, r13
    24a0:	cc 24       	eor	r12, r12
    24a2:	0d a9       	sts	0x4d, r16
    24a4:	1e a9       	sts	0x4e, r17
    24a6:	2f a9       	sts	0x4f, r18
    24a8:	38 ad       	sts	0x68, r19
    24aa:	c9 01       	movw	r24, r18
    24ac:	aa 27       	eor	r26, r26
    24ae:	bb 27       	eor	r27, r27
    24b0:	c8 2a       	or	r12, r24
    24b2:	d9 2a       	or	r13, r25
    24b4:	ea 2a       	or	r14, r26
    24b6:	fb 2a       	or	r15, r27
    24b8:	0d a5       	lds	r16, 0x6d
    24ba:	1e a5       	lds	r17, 0x6e
    24bc:	2f a5       	lds	r18, 0x6f
    24be:	38 a9       	sts	0x48, r19
    24c0:	c4 16       	cp	r12, r20
    24c2:	d5 06       	cpc	r13, r21
    24c4:	e6 06       	cpc	r14, r22
    24c6:	f7 06       	cpc	r15, r23
    24c8:	38 f5       	brcc	.+78     	; 0x2518 <__divdi3+0x440>
    24ca:	01 50       	subi	r16, 0x01	; 1
    24cc:	10 40       	sbci	r17, 0x00	; 0
    24ce:	20 40       	sbci	r18, 0x00	; 0
    24d0:	30 40       	sbci	r19, 0x00	; 0
    24d2:	09 a7       	lds	r16, 0x79
    24d4:	1a a7       	lds	r17, 0x7a
    24d6:	2b a7       	lds	r18, 0x7b
    24d8:	3c a7       	lds	r19, 0x7c
    24da:	c8 0c       	add	r12, r8
    24dc:	d9 1c       	adc	r13, r9
    24de:	ea 1c       	adc	r14, r10
    24e0:	fb 1c       	adc	r15, r11
    24e2:	c8 14       	cp	r12, r8
    24e4:	d9 04       	cpc	r13, r9
    24e6:	ea 04       	cpc	r14, r10
    24e8:	fb 04       	cpc	r15, r11
    24ea:	d0 f0       	brcs	.+52     	; 0x2520 <__divdi3+0x448>
    24ec:	c4 16       	cp	r12, r20
    24ee:	d5 06       	cpc	r13, r21
    24f0:	e6 06       	cpc	r14, r22
    24f2:	f7 06       	cpc	r15, r23
    24f4:	a8 f4       	brcc	.+42     	; 0x2520 <__divdi3+0x448>
    24f6:	0d a5       	lds	r16, 0x6d
    24f8:	1e a5       	lds	r17, 0x6e
    24fa:	2f a5       	lds	r18, 0x6f
    24fc:	38 a9       	sts	0x48, r19
    24fe:	02 50       	subi	r16, 0x02	; 2
    2500:	10 40       	sbci	r17, 0x00	; 0
    2502:	20 40       	sbci	r18, 0x00	; 0
    2504:	30 40       	sbci	r19, 0x00	; 0
    2506:	09 a7       	lds	r16, 0x79
    2508:	1a a7       	lds	r17, 0x7a
    250a:	2b a7       	lds	r18, 0x7b
    250c:	3c a7       	lds	r19, 0x7c
    250e:	c8 0c       	add	r12, r8
    2510:	d9 1c       	adc	r13, r9
    2512:	ea 1c       	adc	r14, r10
    2514:	fb 1c       	adc	r15, r11
    2516:	04 c0       	rjmp	.+8      	; 0x2520 <__divdi3+0x448>
    2518:	09 a7       	lds	r16, 0x79
    251a:	1a a7       	lds	r17, 0x7a
    251c:	2b a7       	lds	r18, 0x7b
    251e:	3c a7       	lds	r19, 0x7c
    2520:	c4 1a       	sub	r12, r20
    2522:	d5 0a       	sbc	r13, r21
    2524:	e6 0a       	sbc	r14, r22
    2526:	f7 0a       	sbc	r15, r23
    2528:	c7 01       	movw	r24, r14
    252a:	b6 01       	movw	r22, r12
    252c:	a3 01       	movw	r20, r6
    252e:	92 01       	movw	r18, r4
    2530:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2534:	2d a7       	lds	r18, 0x7d
    2536:	3e a7       	lds	r19, 0x7e
    2538:	4f a7       	lds	r20, 0x7f
    253a:	58 ab       	sts	0x58, r21
    253c:	69 af       	sts	0x79, r22
    253e:	7a af       	sts	0x7a, r23
    2540:	8b af       	sts	0x7b, r24
    2542:	9c af       	sts	0x7c, r25
    2544:	c7 01       	movw	r24, r14
    2546:	b6 01       	movw	r22, r12
    2548:	a3 01       	movw	r20, r6
    254a:	92 01       	movw	r18, r4
    254c:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2550:	ca 01       	movw	r24, r20
    2552:	b9 01       	movw	r22, r18
    2554:	29 a9       	sts	0x49, r18
    2556:	3a a9       	sts	0x4a, r19
    2558:	4b a9       	sts	0x4b, r20
    255a:	5c a9       	sts	0x4c, r21
    255c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2560:	6b 01       	movw	r12, r22
    2562:	7c 01       	movw	r14, r24
    2564:	49 ad       	sts	0x69, r20
    2566:	5a ad       	sts	0x6a, r21
    2568:	6b ad       	sts	0x6b, r22
    256a:	7c ad       	sts	0x6c, r23
    256c:	9a 01       	movw	r18, r20
    256e:	11 27       	eor	r17, r17
    2570:	00 27       	eor	r16, r16
    2572:	4d a9       	sts	0x4d, r20
    2574:	5e a9       	sts	0x4e, r21
    2576:	6f a9       	sts	0x4f, r22
    2578:	78 ad       	sts	0x68, r23
    257a:	60 70       	andi	r22, 0x00	; 0
    257c:	70 70       	andi	r23, 0x00	; 0
    257e:	04 2b       	or	r16, r20
    2580:	15 2b       	or	r17, r21
    2582:	26 2b       	or	r18, r22
    2584:	37 2b       	or	r19, r23
    2586:	8d a5       	lds	r24, 0x6d
    2588:	9e a5       	lds	r25, 0x6e
    258a:	af a5       	lds	r26, 0x6f
    258c:	b8 a9       	sts	0x48, r27
    258e:	0c 15       	cp	r16, r12
    2590:	1d 05       	cpc	r17, r13
    2592:	2e 05       	cpc	r18, r14
    2594:	3f 05       	cpc	r19, r15
    2596:	c0 f4       	brcc	.+48     	; 0x25c8 <__divdi3+0x4f0>
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	a1 09       	sbc	r26, r1
    259c:	b1 09       	sbc	r27, r1
    259e:	08 0d       	add	r16, r8
    25a0:	19 1d       	adc	r17, r9
    25a2:	2a 1d       	adc	r18, r10
    25a4:	3b 1d       	adc	r19, r11
    25a6:	08 15       	cp	r16, r8
    25a8:	19 05       	cpc	r17, r9
    25aa:	2a 05       	cpc	r18, r10
    25ac:	3b 05       	cpc	r19, r11
    25ae:	60 f0       	brcs	.+24     	; 0x25c8 <__divdi3+0x4f0>
    25b0:	0c 15       	cp	r16, r12
    25b2:	1d 05       	cpc	r17, r13
    25b4:	2e 05       	cpc	r18, r14
    25b6:	3f 05       	cpc	r19, r15
    25b8:	38 f4       	brcc	.+14     	; 0x25c8 <__divdi3+0x4f0>
    25ba:	8d a5       	lds	r24, 0x6d
    25bc:	9e a5       	lds	r25, 0x6e
    25be:	af a5       	lds	r26, 0x6f
    25c0:	b8 a9       	sts	0x48, r27
    25c2:	02 97       	sbiw	r24, 0x02	; 2
    25c4:	a1 09       	sbc	r26, r1
    25c6:	b1 09       	sbc	r27, r1
    25c8:	09 a5       	lds	r16, 0x69
    25ca:	1a a5       	lds	r17, 0x6a
    25cc:	2b a5       	lds	r18, 0x6b
    25ce:	3c a5       	lds	r19, 0x6c
    25d0:	78 01       	movw	r14, r16
    25d2:	dd 24       	eor	r13, r13
    25d4:	cc 24       	eor	r12, r12
    25d6:	c8 2a       	or	r12, r24
    25d8:	d9 2a       	or	r13, r25
    25da:	ea 2a       	or	r14, r26
    25dc:	fb 2a       	or	r15, r27
    25de:	b7 c4       	rjmp	.+2414   	; 0x2f4e <__divdi3+0xe76>
    25e0:	81 14       	cp	r8, r1
    25e2:	91 04       	cpc	r9, r1
    25e4:	a1 04       	cpc	r10, r1
    25e6:	b1 04       	cpc	r11, r1
    25e8:	51 f4       	brne	.+20     	; 0x25fe <__divdi3+0x526>
    25ea:	61 e0       	ldi	r22, 0x01	; 1
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	a5 01       	movw	r20, r10
    25f4:	94 01       	movw	r18, r8
    25f6:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    25fa:	49 01       	movw	r8, r18
    25fc:	5a 01       	movw	r10, r20
    25fe:	10 e0       	ldi	r17, 0x00	; 0
    2600:	81 16       	cp	r8, r17
    2602:	10 e0       	ldi	r17, 0x00	; 0
    2604:	91 06       	cpc	r9, r17
    2606:	11 e0       	ldi	r17, 0x01	; 1
    2608:	a1 06       	cpc	r10, r17
    260a:	10 e0       	ldi	r17, 0x00	; 0
    260c:	b1 06       	cpc	r11, r17
    260e:	58 f4       	brcc	.+22     	; 0x2626 <__divdi3+0x54e>
    2610:	2f ef       	ldi	r18, 0xFF	; 255
    2612:	82 16       	cp	r8, r18
    2614:	91 04       	cpc	r9, r1
    2616:	a1 04       	cpc	r10, r1
    2618:	b1 04       	cpc	r11, r1
    261a:	09 f0       	breq	.+2      	; 0x261e <__divdi3+0x546>
    261c:	90 f4       	brcc	.+36     	; 0x2642 <__divdi3+0x56a>
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	dc 01       	movw	r26, r24
    2624:	17 c0       	rjmp	.+46     	; 0x2654 <__divdi3+0x57c>
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	83 16       	cp	r8, r19
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	93 06       	cpc	r9, r19
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	a3 06       	cpc	r10, r19
    2632:	31 e0       	ldi	r19, 0x01	; 1
    2634:	b3 06       	cpc	r11, r19
    2636:	50 f4       	brcc	.+20     	; 0x264c <__divdi3+0x574>
    2638:	80 e1       	ldi	r24, 0x10	; 16
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a0 e0       	ldi	r26, 0x00	; 0
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	09 c0       	rjmp	.+18     	; 0x2654 <__divdi3+0x57c>
    2642:	88 e0       	ldi	r24, 0x08	; 8
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a0 e0       	ldi	r26, 0x00	; 0
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	04 c0       	rjmp	.+8      	; 0x2654 <__divdi3+0x57c>
    264c:	88 e1       	ldi	r24, 0x18	; 24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a0 e0       	ldi	r26, 0x00	; 0
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	b5 01       	movw	r22, r10
    2656:	a4 01       	movw	r20, r8
    2658:	08 2e       	mov	r0, r24
    265a:	04 c0       	rjmp	.+8      	; 0x2664 <__divdi3+0x58c>
    265c:	76 95       	lsr	r23
    265e:	67 95       	ror	r22
    2660:	57 95       	ror	r21
    2662:	47 95       	ror	r20
    2664:	0a 94       	dec	r0
    2666:	d2 f7       	brpl	.-12     	; 0x265c <__divdi3+0x584>
    2668:	fa 01       	movw	r30, r20
    266a:	e3 56       	subi	r30, 0x63	; 99
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	20 81       	ld	r18, Z
    2670:	ac 01       	movw	r20, r24
    2672:	bd 01       	movw	r22, r26
    2674:	42 0f       	add	r20, r18
    2676:	51 1d       	adc	r21, r1
    2678:	61 1d       	adc	r22, r1
    267a:	71 1d       	adc	r23, r1
    267c:	80 e2       	ldi	r24, 0x20	; 32
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	a0 e0       	ldi	r26, 0x00	; 0
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	84 1b       	sub	r24, r20
    2686:	95 0b       	sbc	r25, r21
    2688:	a6 0b       	sbc	r26, r22
    268a:	b7 0b       	sbc	r27, r23
    268c:	51 f4       	brne	.+20     	; 0x26a2 <__divdi3+0x5ca>
    268e:	c8 18       	sub	r12, r8
    2690:	d9 08       	sbc	r13, r9
    2692:	ea 08       	sbc	r14, r10
    2694:	fb 08       	sbc	r15, r11
    2696:	f1 e0       	ldi	r31, 0x01	; 1
    2698:	4f 2e       	mov	r4, r31
    269a:	51 2c       	mov	r5, r1
    269c:	61 2c       	mov	r6, r1
    269e:	71 2c       	mov	r7, r1
    26a0:	28 c1       	rjmp	.+592    	; 0x28f2 <__divdi3+0x81a>
    26a2:	08 2e       	mov	r0, r24
    26a4:	04 c0       	rjmp	.+8      	; 0x26ae <__divdi3+0x5d6>
    26a6:	88 0c       	add	r8, r8
    26a8:	99 1c       	adc	r9, r9
    26aa:	aa 1c       	adc	r10, r10
    26ac:	bb 1c       	adc	r11, r11
    26ae:	0a 94       	dec	r0
    26b0:	d2 f7       	brpl	.-12     	; 0x26a6 <__divdi3+0x5ce>
    26b2:	97 01       	movw	r18, r14
    26b4:	86 01       	movw	r16, r12
    26b6:	04 2e       	mov	r0, r20
    26b8:	04 c0       	rjmp	.+8      	; 0x26c2 <__divdi3+0x5ea>
    26ba:	36 95       	lsr	r19
    26bc:	27 95       	ror	r18
    26be:	17 95       	ror	r17
    26c0:	07 95       	ror	r16
    26c2:	0a 94       	dec	r0
    26c4:	d2 f7       	brpl	.-12     	; 0x26ba <__divdi3+0x5e2>
    26c6:	09 ab       	sts	0x59, r16
    26c8:	1a ab       	sts	0x5a, r17
    26ca:	2b ab       	sts	0x5b, r18
    26cc:	3c ab       	sts	0x5c, r19
    26ce:	97 01       	movw	r18, r14
    26d0:	86 01       	movw	r16, r12
    26d2:	08 2e       	mov	r0, r24
    26d4:	04 c0       	rjmp	.+8      	; 0x26de <__divdi3+0x606>
    26d6:	00 0f       	add	r16, r16
    26d8:	11 1f       	adc	r17, r17
    26da:	22 1f       	adc	r18, r18
    26dc:	33 1f       	adc	r19, r19
    26de:	0a 94       	dec	r0
    26e0:	d2 f7       	brpl	.-12     	; 0x26d6 <__divdi3+0x5fe>
    26e2:	0d a7       	lds	r16, 0x7d
    26e4:	1e a7       	lds	r17, 0x7e
    26e6:	2f a7       	lds	r18, 0x7f
    26e8:	38 ab       	sts	0x58, r19
    26ea:	ed a8       	sts	0x8d, r30
    26ec:	fe a8       	sts	0x8e, r31
    26ee:	0f a9       	sts	0x4f, r16
    26f0:	18 ad       	sts	0x68, r17
    26f2:	04 c0       	rjmp	.+8      	; 0x26fc <__divdi3+0x624>
    26f4:	16 95       	lsr	r17
    26f6:	07 95       	ror	r16
    26f8:	f7 94       	ror	r15
    26fa:	e7 94       	ror	r14
    26fc:	4a 95       	dec	r20
    26fe:	d2 f7       	brpl	.-12     	; 0x26f4 <__divdi3+0x61c>
    2700:	b8 01       	movw	r22, r16
    2702:	a7 01       	movw	r20, r14
    2704:	0d a5       	lds	r16, 0x6d
    2706:	1e a5       	lds	r17, 0x6e
    2708:	2f a5       	lds	r18, 0x6f
    270a:	38 a9       	sts	0x48, r19
    270c:	04 2b       	or	r16, r20
    270e:	15 2b       	or	r17, r21
    2710:	26 2b       	or	r18, r22
    2712:	37 2b       	or	r19, r23
    2714:	0d a7       	lds	r16, 0x7d
    2716:	1e a7       	lds	r17, 0x7e
    2718:	2f a7       	lds	r18, 0x7f
    271a:	38 ab       	sts	0x58, r19
    271c:	ed a8       	sts	0x8d, r30
    271e:	fe a8       	sts	0x8e, r31
    2720:	0f a9       	sts	0x4f, r16
    2722:	18 ad       	sts	0x68, r17
    2724:	04 c0       	rjmp	.+8      	; 0x272e <__divdi3+0x656>
    2726:	ee 0c       	add	r14, r14
    2728:	ff 1c       	adc	r15, r15
    272a:	00 1f       	adc	r16, r16
    272c:	11 1f       	adc	r17, r17
    272e:	8a 95       	dec	r24
    2730:	d2 f7       	brpl	.-12     	; 0x2726 <__divdi3+0x64e>
    2732:	ed aa       	sts	0x9d, r30
    2734:	fe aa       	sts	0x9e, r31
    2736:	0f ab       	sts	0x5f, r16
    2738:	18 af       	sts	0x78, r17
    273a:	25 01       	movw	r4, r10
    273c:	66 24       	eor	r6, r6
    273e:	77 24       	eor	r7, r7
    2740:	95 01       	movw	r18, r10
    2742:	84 01       	movw	r16, r8
    2744:	20 70       	andi	r18, 0x00	; 0
    2746:	30 70       	andi	r19, 0x00	; 0
    2748:	09 af       	sts	0x79, r16
    274a:	1a af       	sts	0x7a, r17
    274c:	2b af       	sts	0x7b, r18
    274e:	3c af       	sts	0x7c, r19
    2750:	69 a9       	sts	0x49, r22
    2752:	7a a9       	sts	0x4a, r23
    2754:	8b a9       	sts	0x4b, r24
    2756:	9c a9       	sts	0x4c, r25
    2758:	a3 01       	movw	r20, r6
    275a:	92 01       	movw	r18, r4
    275c:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2760:	29 a7       	lds	r18, 0x79
    2762:	3a a7       	lds	r19, 0x7a
    2764:	4b a7       	lds	r20, 0x7b
    2766:	5c a7       	lds	r21, 0x7c
    2768:	6b 01       	movw	r12, r22
    276a:	7c 01       	movw	r14, r24
    276c:	69 a9       	sts	0x49, r22
    276e:	7a a9       	sts	0x4a, r23
    2770:	8b a9       	sts	0x4b, r24
    2772:	9c a9       	sts	0x4c, r25
    2774:	a3 01       	movw	r20, r6
    2776:	92 01       	movw	r18, r4
    2778:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    277c:	ca 01       	movw	r24, r20
    277e:	b9 01       	movw	r22, r18
    2780:	29 ad       	sts	0x69, r18
    2782:	3a ad       	sts	0x6a, r19
    2784:	4b ad       	sts	0x6b, r20
    2786:	5c ad       	sts	0x6c, r21
    2788:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    278c:	ab 01       	movw	r20, r22
    278e:	bc 01       	movw	r22, r24
    2790:	76 01       	movw	r14, r12
    2792:	dd 24       	eor	r13, r13
    2794:	cc 24       	eor	r12, r12
    2796:	0d a5       	lds	r16, 0x6d
    2798:	1e a5       	lds	r17, 0x6e
    279a:	2f a5       	lds	r18, 0x6f
    279c:	38 a9       	sts	0x48, r19
    279e:	c9 01       	movw	r24, r18
    27a0:	aa 27       	eor	r26, r26
    27a2:	bb 27       	eor	r27, r27
    27a4:	c8 2a       	or	r12, r24
    27a6:	d9 2a       	or	r13, r25
    27a8:	ea 2a       	or	r14, r26
    27aa:	fb 2a       	or	r15, r27
    27ac:	09 a5       	lds	r16, 0x69
    27ae:	1a a5       	lds	r17, 0x6a
    27b0:	2b a5       	lds	r18, 0x6b
    27b2:	3c a5       	lds	r19, 0x6c
    27b4:	c4 16       	cp	r12, r20
    27b6:	d5 06       	cpc	r13, r21
    27b8:	e6 06       	cpc	r14, r22
    27ba:	f7 06       	cpc	r15, r23
    27bc:	38 f5       	brcc	.+78     	; 0x280c <__divdi3+0x734>
    27be:	01 50       	subi	r16, 0x01	; 1
    27c0:	10 40       	sbci	r17, 0x00	; 0
    27c2:	20 40       	sbci	r18, 0x00	; 0
    27c4:	30 40       	sbci	r19, 0x00	; 0
    27c6:	09 ab       	sts	0x59, r16
    27c8:	1a ab       	sts	0x5a, r17
    27ca:	2b ab       	sts	0x5b, r18
    27cc:	3c ab       	sts	0x5c, r19
    27ce:	c8 0c       	add	r12, r8
    27d0:	d9 1c       	adc	r13, r9
    27d2:	ea 1c       	adc	r14, r10
    27d4:	fb 1c       	adc	r15, r11
    27d6:	c8 14       	cp	r12, r8
    27d8:	d9 04       	cpc	r13, r9
    27da:	ea 04       	cpc	r14, r10
    27dc:	fb 04       	cpc	r15, r11
    27de:	d0 f0       	brcs	.+52     	; 0x2814 <__divdi3+0x73c>
    27e0:	c4 16       	cp	r12, r20
    27e2:	d5 06       	cpc	r13, r21
    27e4:	e6 06       	cpc	r14, r22
    27e6:	f7 06       	cpc	r15, r23
    27e8:	a8 f4       	brcc	.+42     	; 0x2814 <__divdi3+0x73c>
    27ea:	09 a5       	lds	r16, 0x69
    27ec:	1a a5       	lds	r17, 0x6a
    27ee:	2b a5       	lds	r18, 0x6b
    27f0:	3c a5       	lds	r19, 0x6c
    27f2:	02 50       	subi	r16, 0x02	; 2
    27f4:	10 40       	sbci	r17, 0x00	; 0
    27f6:	20 40       	sbci	r18, 0x00	; 0
    27f8:	30 40       	sbci	r19, 0x00	; 0
    27fa:	09 ab       	sts	0x59, r16
    27fc:	1a ab       	sts	0x5a, r17
    27fe:	2b ab       	sts	0x5b, r18
    2800:	3c ab       	sts	0x5c, r19
    2802:	c8 0c       	add	r12, r8
    2804:	d9 1c       	adc	r13, r9
    2806:	ea 1c       	adc	r14, r10
    2808:	fb 1c       	adc	r15, r11
    280a:	04 c0       	rjmp	.+8      	; 0x2814 <__divdi3+0x73c>
    280c:	09 ab       	sts	0x59, r16
    280e:	1a ab       	sts	0x5a, r17
    2810:	2b ab       	sts	0x5b, r18
    2812:	3c ab       	sts	0x5c, r19
    2814:	c4 1a       	sub	r12, r20
    2816:	d5 0a       	sbc	r13, r21
    2818:	e6 0a       	sbc	r14, r22
    281a:	f7 0a       	sbc	r15, r23
    281c:	c7 01       	movw	r24, r14
    281e:	b6 01       	movw	r22, r12
    2820:	a3 01       	movw	r20, r6
    2822:	92 01       	movw	r18, r4
    2824:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2828:	29 a7       	lds	r18, 0x79
    282a:	3a a7       	lds	r19, 0x7a
    282c:	4b a7       	lds	r20, 0x7b
    282e:	5c a7       	lds	r21, 0x7c
    2830:	21 96       	adiw	r28, 0x01	; 1
    2832:	6c af       	sts	0x7c, r22
    2834:	7d af       	sts	0x7d, r23
    2836:	8e af       	sts	0x7e, r24
    2838:	9f af       	sts	0x7f, r25
    283a:	21 97       	sbiw	r28, 0x01	; 1
    283c:	c7 01       	movw	r24, r14
    283e:	b6 01       	movw	r22, r12
    2840:	a3 01       	movw	r20, r6
    2842:	92 01       	movw	r18, r4
    2844:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2848:	ca 01       	movw	r24, r20
    284a:	b9 01       	movw	r22, r18
    284c:	29 ad       	sts	0x69, r18
    284e:	3a ad       	sts	0x6a, r19
    2850:	4b ad       	sts	0x6b, r20
    2852:	5c ad       	sts	0x6c, r21
    2854:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2858:	8b 01       	movw	r16, r22
    285a:	9c 01       	movw	r18, r24
    285c:	21 96       	adiw	r28, 0x01	; 1
    285e:	4c ad       	sts	0x6c, r20
    2860:	5d ad       	sts	0x6d, r21
    2862:	6e ad       	sts	0x6e, r22
    2864:	7f ad       	sts	0x6f, r23
    2866:	21 97       	sbiw	r28, 0x01	; 1
    2868:	da 01       	movw	r26, r20
    286a:	99 27       	eor	r25, r25
    286c:	88 27       	eor	r24, r24
    286e:	4d a5       	lds	r20, 0x6d
    2870:	5e a5       	lds	r21, 0x6e
    2872:	6f a5       	lds	r22, 0x6f
    2874:	78 a9       	sts	0x48, r23
    2876:	60 70       	andi	r22, 0x00	; 0
    2878:	70 70       	andi	r23, 0x00	; 0
    287a:	84 2b       	or	r24, r20
    287c:	95 2b       	or	r25, r21
    287e:	a6 2b       	or	r26, r22
    2880:	b7 2b       	or	r27, r23
    2882:	49 a5       	lds	r20, 0x69
    2884:	5a a5       	lds	r21, 0x6a
    2886:	6b a5       	lds	r22, 0x6b
    2888:	7c a5       	lds	r23, 0x6c
    288a:	80 17       	cp	r24, r16
    288c:	91 07       	cpc	r25, r17
    288e:	a2 07       	cpc	r26, r18
    2890:	b3 07       	cpc	r27, r19
    2892:	f0 f4       	brcc	.+60     	; 0x28d0 <__divdi3+0x7f8>
    2894:	41 50       	subi	r20, 0x01	; 1
    2896:	50 40       	sbci	r21, 0x00	; 0
    2898:	60 40       	sbci	r22, 0x00	; 0
    289a:	70 40       	sbci	r23, 0x00	; 0
    289c:	88 0d       	add	r24, r8
    289e:	99 1d       	adc	r25, r9
    28a0:	aa 1d       	adc	r26, r10
    28a2:	bb 1d       	adc	r27, r11
    28a4:	88 15       	cp	r24, r8
    28a6:	99 05       	cpc	r25, r9
    28a8:	aa 05       	cpc	r26, r10
    28aa:	bb 05       	cpc	r27, r11
    28ac:	88 f0       	brcs	.+34     	; 0x28d0 <__divdi3+0x7f8>
    28ae:	80 17       	cp	r24, r16
    28b0:	91 07       	cpc	r25, r17
    28b2:	a2 07       	cpc	r26, r18
    28b4:	b3 07       	cpc	r27, r19
    28b6:	60 f4       	brcc	.+24     	; 0x28d0 <__divdi3+0x7f8>
    28b8:	49 a5       	lds	r20, 0x69
    28ba:	5a a5       	lds	r21, 0x6a
    28bc:	6b a5       	lds	r22, 0x6b
    28be:	7c a5       	lds	r23, 0x6c
    28c0:	42 50       	subi	r20, 0x02	; 2
    28c2:	50 40       	sbci	r21, 0x00	; 0
    28c4:	60 40       	sbci	r22, 0x00	; 0
    28c6:	70 40       	sbci	r23, 0x00	; 0
    28c8:	88 0d       	add	r24, r8
    28ca:	99 1d       	adc	r25, r9
    28cc:	aa 1d       	adc	r26, r10
    28ce:	bb 1d       	adc	r27, r11
    28d0:	6c 01       	movw	r12, r24
    28d2:	7d 01       	movw	r14, r26
    28d4:	c0 1a       	sub	r12, r16
    28d6:	d1 0a       	sbc	r13, r17
    28d8:	e2 0a       	sbc	r14, r18
    28da:	f3 0a       	sbc	r15, r19
    28dc:	09 a9       	sts	0x49, r16
    28de:	1a a9       	sts	0x4a, r17
    28e0:	2b a9       	sts	0x4b, r18
    28e2:	3c a9       	sts	0x4c, r19
    28e4:	38 01       	movw	r6, r16
    28e6:	55 24       	eor	r5, r5
    28e8:	44 24       	eor	r4, r4
    28ea:	44 2a       	or	r4, r20
    28ec:	55 2a       	or	r5, r21
    28ee:	66 2a       	or	r6, r22
    28f0:	77 2a       	or	r7, r23
    28f2:	85 01       	movw	r16, r10
    28f4:	22 27       	eor	r18, r18
    28f6:	33 27       	eor	r19, r19
    28f8:	0d a7       	lds	r16, 0x7d
    28fa:	1e a7       	lds	r17, 0x7e
    28fc:	2f a7       	lds	r18, 0x7f
    28fe:	38 ab       	sts	0x58, r19
    2900:	95 01       	movw	r18, r10
    2902:	84 01       	movw	r16, r8
    2904:	20 70       	andi	r18, 0x00	; 0
    2906:	30 70       	andi	r19, 0x00	; 0
    2908:	09 af       	sts	0x79, r16
    290a:	1a af       	sts	0x7a, r17
    290c:	2b af       	sts	0x7b, r18
    290e:	3c af       	sts	0x7c, r19
    2910:	c7 01       	movw	r24, r14
    2912:	b6 01       	movw	r22, r12
    2914:	2d a5       	lds	r18, 0x6d
    2916:	3e a5       	lds	r19, 0x6e
    2918:	4f a5       	lds	r20, 0x6f
    291a:	58 a9       	sts	0x48, r21
    291c:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2920:	29 a7       	lds	r18, 0x79
    2922:	3a a7       	lds	r19, 0x7a
    2924:	4b a7       	lds	r20, 0x7b
    2926:	5c a7       	lds	r21, 0x7c
    2928:	69 ab       	sts	0x59, r22
    292a:	7a ab       	sts	0x5a, r23
    292c:	8b ab       	sts	0x5b, r24
    292e:	9c ab       	sts	0x5c, r25
    2930:	c7 01       	movw	r24, r14
    2932:	b6 01       	movw	r22, r12
    2934:	2d a5       	lds	r18, 0x6d
    2936:	3e a5       	lds	r19, 0x6e
    2938:	4f a5       	lds	r20, 0x6f
    293a:	58 a9       	sts	0x48, r21
    293c:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2940:	ca 01       	movw	r24, r20
    2942:	b9 01       	movw	r22, r18
    2944:	29 ad       	sts	0x69, r18
    2946:	3a ad       	sts	0x6a, r19
    2948:	4b ad       	sts	0x6b, r20
    294a:	5c ad       	sts	0x6c, r21
    294c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2950:	ab 01       	movw	r20, r22
    2952:	bc 01       	movw	r22, r24
    2954:	09 a9       	sts	0x49, r16
    2956:	1a a9       	sts	0x4a, r17
    2958:	2b a9       	sts	0x4b, r18
    295a:	3c a9       	sts	0x4c, r19
    295c:	78 01       	movw	r14, r16
    295e:	dd 24       	eor	r13, r13
    2960:	cc 24       	eor	r12, r12
    2962:	0d a9       	sts	0x4d, r16
    2964:	1e a9       	sts	0x4e, r17
    2966:	2f a9       	sts	0x4f, r18
    2968:	38 ad       	sts	0x68, r19
    296a:	c9 01       	movw	r24, r18
    296c:	aa 27       	eor	r26, r26
    296e:	bb 27       	eor	r27, r27
    2970:	c8 2a       	or	r12, r24
    2972:	d9 2a       	or	r13, r25
    2974:	ea 2a       	or	r14, r26
    2976:	fb 2a       	or	r15, r27
    2978:	09 a5       	lds	r16, 0x69
    297a:	1a a5       	lds	r17, 0x6a
    297c:	2b a5       	lds	r18, 0x6b
    297e:	3c a5       	lds	r19, 0x6c
    2980:	c4 16       	cp	r12, r20
    2982:	d5 06       	cpc	r13, r21
    2984:	e6 06       	cpc	r14, r22
    2986:	f7 06       	cpc	r15, r23
    2988:	38 f5       	brcc	.+78     	; 0x29d8 <__divdi3+0x900>
    298a:	01 50       	subi	r16, 0x01	; 1
    298c:	10 40       	sbci	r17, 0x00	; 0
    298e:	20 40       	sbci	r18, 0x00	; 0
    2990:	30 40       	sbci	r19, 0x00	; 0
    2992:	09 ab       	sts	0x59, r16
    2994:	1a ab       	sts	0x5a, r17
    2996:	2b ab       	sts	0x5b, r18
    2998:	3c ab       	sts	0x5c, r19
    299a:	c8 0c       	add	r12, r8
    299c:	d9 1c       	adc	r13, r9
    299e:	ea 1c       	adc	r14, r10
    29a0:	fb 1c       	adc	r15, r11
    29a2:	c8 14       	cp	r12, r8
    29a4:	d9 04       	cpc	r13, r9
    29a6:	ea 04       	cpc	r14, r10
    29a8:	fb 04       	cpc	r15, r11
    29aa:	d0 f0       	brcs	.+52     	; 0x29e0 <__divdi3+0x908>
    29ac:	c4 16       	cp	r12, r20
    29ae:	d5 06       	cpc	r13, r21
    29b0:	e6 06       	cpc	r14, r22
    29b2:	f7 06       	cpc	r15, r23
    29b4:	a8 f4       	brcc	.+42     	; 0x29e0 <__divdi3+0x908>
    29b6:	09 a5       	lds	r16, 0x69
    29b8:	1a a5       	lds	r17, 0x6a
    29ba:	2b a5       	lds	r18, 0x6b
    29bc:	3c a5       	lds	r19, 0x6c
    29be:	02 50       	subi	r16, 0x02	; 2
    29c0:	10 40       	sbci	r17, 0x00	; 0
    29c2:	20 40       	sbci	r18, 0x00	; 0
    29c4:	30 40       	sbci	r19, 0x00	; 0
    29c6:	09 ab       	sts	0x59, r16
    29c8:	1a ab       	sts	0x5a, r17
    29ca:	2b ab       	sts	0x5b, r18
    29cc:	3c ab       	sts	0x5c, r19
    29ce:	c8 0c       	add	r12, r8
    29d0:	d9 1c       	adc	r13, r9
    29d2:	ea 1c       	adc	r14, r10
    29d4:	fb 1c       	adc	r15, r11
    29d6:	04 c0       	rjmp	.+8      	; 0x29e0 <__divdi3+0x908>
    29d8:	09 ab       	sts	0x59, r16
    29da:	1a ab       	sts	0x5a, r17
    29dc:	2b ab       	sts	0x5b, r18
    29de:	3c ab       	sts	0x5c, r19
    29e0:	c4 1a       	sub	r12, r20
    29e2:	d5 0a       	sbc	r13, r21
    29e4:	e6 0a       	sbc	r14, r22
    29e6:	f7 0a       	sbc	r15, r23
    29e8:	c7 01       	movw	r24, r14
    29ea:	b6 01       	movw	r22, r12
    29ec:	2d a5       	lds	r18, 0x6d
    29ee:	3e a5       	lds	r19, 0x6e
    29f0:	4f a5       	lds	r20, 0x6f
    29f2:	58 a9       	sts	0x48, r21
    29f4:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    29f8:	29 a7       	lds	r18, 0x79
    29fa:	3a a7       	lds	r19, 0x7a
    29fc:	4b a7       	lds	r20, 0x7b
    29fe:	5c a7       	lds	r21, 0x7c
    2a00:	21 96       	adiw	r28, 0x01	; 1
    2a02:	6c af       	sts	0x7c, r22
    2a04:	7d af       	sts	0x7d, r23
    2a06:	8e af       	sts	0x7e, r24
    2a08:	9f af       	sts	0x7f, r25
    2a0a:	21 97       	sbiw	r28, 0x01	; 1
    2a0c:	c7 01       	movw	r24, r14
    2a0e:	b6 01       	movw	r22, r12
    2a10:	2d a5       	lds	r18, 0x6d
    2a12:	3e a5       	lds	r19, 0x6e
    2a14:	4f a5       	lds	r20, 0x6f
    2a16:	58 a9       	sts	0x48, r21
    2a18:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2a1c:	ca 01       	movw	r24, r20
    2a1e:	b9 01       	movw	r22, r18
    2a20:	29 ad       	sts	0x69, r18
    2a22:	3a ad       	sts	0x6a, r19
    2a24:	4b ad       	sts	0x6b, r20
    2a26:	5c ad       	sts	0x6c, r21
    2a28:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2a2c:	8b 01       	movw	r16, r22
    2a2e:	9c 01       	movw	r18, r24
    2a30:	21 96       	adiw	r28, 0x01	; 1
    2a32:	4c ad       	sts	0x6c, r20
    2a34:	5d ad       	sts	0x6d, r21
    2a36:	6e ad       	sts	0x6e, r22
    2a38:	7f ad       	sts	0x6f, r23
    2a3a:	21 97       	sbiw	r28, 0x01	; 1
    2a3c:	da 01       	movw	r26, r20
    2a3e:	99 27       	eor	r25, r25
    2a40:	88 27       	eor	r24, r24
    2a42:	4d a9       	sts	0x4d, r20
    2a44:	5e a9       	sts	0x4e, r21
    2a46:	6f a9       	sts	0x4f, r22
    2a48:	78 ad       	sts	0x68, r23
    2a4a:	60 70       	andi	r22, 0x00	; 0
    2a4c:	70 70       	andi	r23, 0x00	; 0
    2a4e:	84 2b       	or	r24, r20
    2a50:	95 2b       	or	r25, r21
    2a52:	a6 2b       	or	r26, r22
    2a54:	b7 2b       	or	r27, r23
    2a56:	49 a5       	lds	r20, 0x69
    2a58:	5a a5       	lds	r21, 0x6a
    2a5a:	6b a5       	lds	r22, 0x6b
    2a5c:	7c a5       	lds	r23, 0x6c
    2a5e:	80 17       	cp	r24, r16
    2a60:	91 07       	cpc	r25, r17
    2a62:	a2 07       	cpc	r26, r18
    2a64:	b3 07       	cpc	r27, r19
    2a66:	d0 f4       	brcc	.+52     	; 0x2a9c <__divdi3+0x9c4>
    2a68:	41 50       	subi	r20, 0x01	; 1
    2a6a:	50 40       	sbci	r21, 0x00	; 0
    2a6c:	60 40       	sbci	r22, 0x00	; 0
    2a6e:	70 40       	sbci	r23, 0x00	; 0
    2a70:	88 0d       	add	r24, r8
    2a72:	99 1d       	adc	r25, r9
    2a74:	aa 1d       	adc	r26, r10
    2a76:	bb 1d       	adc	r27, r11
    2a78:	88 15       	cp	r24, r8
    2a7a:	99 05       	cpc	r25, r9
    2a7c:	aa 05       	cpc	r26, r10
    2a7e:	bb 05       	cpc	r27, r11
    2a80:	68 f0       	brcs	.+26     	; 0x2a9c <__divdi3+0x9c4>
    2a82:	80 17       	cp	r24, r16
    2a84:	91 07       	cpc	r25, r17
    2a86:	a2 07       	cpc	r26, r18
    2a88:	b3 07       	cpc	r27, r19
    2a8a:	40 f4       	brcc	.+16     	; 0x2a9c <__divdi3+0x9c4>
    2a8c:	49 a5       	lds	r20, 0x69
    2a8e:	5a a5       	lds	r21, 0x6a
    2a90:	6b a5       	lds	r22, 0x6b
    2a92:	7c a5       	lds	r23, 0x6c
    2a94:	42 50       	subi	r20, 0x02	; 2
    2a96:	50 40       	sbci	r21, 0x00	; 0
    2a98:	60 40       	sbci	r22, 0x00	; 0
    2a9a:	70 40       	sbci	r23, 0x00	; 0
    2a9c:	09 a9       	sts	0x49, r16
    2a9e:	1a a9       	sts	0x4a, r17
    2aa0:	2b a9       	sts	0x4b, r18
    2aa2:	3c a9       	sts	0x4c, r19
    2aa4:	78 01       	movw	r14, r16
    2aa6:	dd 24       	eor	r13, r13
    2aa8:	cc 24       	eor	r12, r12
    2aaa:	c4 2a       	or	r12, r20
    2aac:	d5 2a       	or	r13, r21
    2aae:	e6 2a       	or	r14, r22
    2ab0:	f7 2a       	or	r15, r23
    2ab2:	50 c2       	rjmp	.+1184   	; 0x2f54 <__divdi3+0xe7c>
    2ab4:	c8 16       	cp	r12, r24
    2ab6:	d9 06       	cpc	r13, r25
    2ab8:	ea 06       	cpc	r14, r26
    2aba:	fb 06       	cpc	r15, r27
    2abc:	08 f4       	brcc	.+2      	; 0x2ac0 <__divdi3+0x9e8>
    2abe:	37 c2       	rjmp	.+1134   	; 0x2f2e <__divdi3+0xe56>
    2ac0:	80 30       	cpi	r24, 0x00	; 0
    2ac2:	10 e0       	ldi	r17, 0x00	; 0
    2ac4:	91 07       	cpc	r25, r17
    2ac6:	11 e0       	ldi	r17, 0x01	; 1
    2ac8:	a1 07       	cpc	r26, r17
    2aca:	10 e0       	ldi	r17, 0x00	; 0
    2acc:	b1 07       	cpc	r27, r17
    2ace:	50 f4       	brcc	.+20     	; 0x2ae4 <__divdi3+0xa0c>
    2ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	a1 05       	cpc	r26, r1
    2ad6:	b1 05       	cpc	r27, r1
    2ad8:	09 f0       	breq	.+2      	; 0x2adc <__divdi3+0xa04>
    2ada:	88 f4       	brcc	.+34     	; 0x2afe <__divdi3+0xa26>
    2adc:	00 e0       	ldi	r16, 0x00	; 0
    2ade:	10 e0       	ldi	r17, 0x00	; 0
    2ae0:	98 01       	movw	r18, r16
    2ae2:	16 c0       	rjmp	.+44     	; 0x2b10 <__divdi3+0xa38>
    2ae4:	80 30       	cpi	r24, 0x00	; 0
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	92 07       	cpc	r25, r18
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	a2 07       	cpc	r26, r18
    2aee:	21 e0       	ldi	r18, 0x01	; 1
    2af0:	b2 07       	cpc	r27, r18
    2af2:	50 f4       	brcc	.+20     	; 0x2b08 <__divdi3+0xa30>
    2af4:	00 e1       	ldi	r16, 0x10	; 16
    2af6:	10 e0       	ldi	r17, 0x00	; 0
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	09 c0       	rjmp	.+18     	; 0x2b10 <__divdi3+0xa38>
    2afe:	08 e0       	ldi	r16, 0x08	; 8
    2b00:	10 e0       	ldi	r17, 0x00	; 0
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <__divdi3+0xa38>
    2b08:	08 e1       	ldi	r16, 0x18	; 24
    2b0a:	10 e0       	ldi	r17, 0x00	; 0
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	ac 01       	movw	r20, r24
    2b12:	bd 01       	movw	r22, r26
    2b14:	00 2e       	mov	r0, r16
    2b16:	04 c0       	rjmp	.+8      	; 0x2b20 <__divdi3+0xa48>
    2b18:	76 95       	lsr	r23
    2b1a:	67 95       	ror	r22
    2b1c:	57 95       	ror	r21
    2b1e:	47 95       	ror	r20
    2b20:	0a 94       	dec	r0
    2b22:	d2 f7       	brpl	.-12     	; 0x2b18 <__divdi3+0xa40>
    2b24:	fa 01       	movw	r30, r20
    2b26:	e3 56       	subi	r30, 0x63	; 99
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	40 81       	ld	r20, Z
    2b2c:	04 0f       	add	r16, r20
    2b2e:	11 1d       	adc	r17, r1
    2b30:	21 1d       	adc	r18, r1
    2b32:	31 1d       	adc	r19, r1
    2b34:	40 e2       	ldi	r20, 0x20	; 32
    2b36:	50 e0       	ldi	r21, 0x00	; 0
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	40 1b       	sub	r20, r16
    2b3e:	51 0b       	sbc	r21, r17
    2b40:	62 0b       	sbc	r22, r18
    2b42:	73 0b       	sbc	r23, r19
    2b44:	a1 f4       	brne	.+40     	; 0x2b6e <__divdi3+0xa96>
    2b46:	8c 15       	cp	r24, r12
    2b48:	9d 05       	cpc	r25, r13
    2b4a:	ae 05       	cpc	r26, r14
    2b4c:	bf 05       	cpc	r27, r15
    2b4e:	08 f4       	brcc	.+2      	; 0x2b52 <__divdi3+0xa7a>
    2b50:	f5 c1       	rjmp	.+1002   	; 0x2f3c <__divdi3+0xe64>
    2b52:	ed a8       	sts	0x8d, r30
    2b54:	fe a8       	sts	0x8e, r31
    2b56:	0f a9       	sts	0x4f, r16
    2b58:	18 ad       	sts	0x68, r17
    2b5a:	44 24       	eor	r4, r4
    2b5c:	55 24       	eor	r5, r5
    2b5e:	32 01       	movw	r6, r4
    2b60:	e8 14       	cp	r14, r8
    2b62:	f9 04       	cpc	r15, r9
    2b64:	0a 05       	cpc	r16, r10
    2b66:	1b 05       	cpc	r17, r11
    2b68:	08 f0       	brcs	.+2      	; 0x2b6c <__divdi3+0xa94>
    2b6a:	eb c1       	rjmp	.+982    	; 0x2f42 <__divdi3+0xe6a>
    2b6c:	e3 c1       	rjmp	.+966    	; 0x2f34 <__divdi3+0xe5c>
    2b6e:	34 2e       	mov	r3, r20
    2b70:	2c 01       	movw	r4, r24
    2b72:	3d 01       	movw	r6, r26
    2b74:	04 c0       	rjmp	.+8      	; 0x2b7e <__divdi3+0xaa6>
    2b76:	44 0c       	add	r4, r4
    2b78:	55 1c       	adc	r5, r5
    2b7a:	66 1c       	adc	r6, r6
    2b7c:	77 1c       	adc	r7, r7
    2b7e:	4a 95       	dec	r20
    2b80:	d2 f7       	brpl	.-12     	; 0x2b76 <__divdi3+0xa9e>
    2b82:	d5 01       	movw	r26, r10
    2b84:	c4 01       	movw	r24, r8
    2b86:	00 2e       	mov	r0, r16
    2b88:	04 c0       	rjmp	.+8      	; 0x2b92 <__divdi3+0xaba>
    2b8a:	b6 95       	lsr	r27
    2b8c:	a7 95       	ror	r26
    2b8e:	97 95       	ror	r25
    2b90:	87 95       	ror	r24
    2b92:	0a 94       	dec	r0
    2b94:	d2 f7       	brpl	.-12     	; 0x2b8a <__divdi3+0xab2>
    2b96:	48 2a       	or	r4, r24
    2b98:	59 2a       	or	r5, r25
    2b9a:	6a 2a       	or	r6, r26
    2b9c:	7b 2a       	or	r7, r27
    2b9e:	a5 01       	movw	r20, r10
    2ba0:	94 01       	movw	r18, r8
    2ba2:	03 2c       	mov	r0, r3
    2ba4:	04 c0       	rjmp	.+8      	; 0x2bae <__divdi3+0xad6>
    2ba6:	22 0f       	add	r18, r18
    2ba8:	33 1f       	adc	r19, r19
    2baa:	44 1f       	adc	r20, r20
    2bac:	55 1f       	adc	r21, r21
    2bae:	0a 94       	dec	r0
    2bb0:	d2 f7       	brpl	.-12     	; 0x2ba6 <__divdi3+0xace>
    2bb2:	29 af       	sts	0x79, r18
    2bb4:	3a af       	sts	0x7a, r19
    2bb6:	4b af       	sts	0x7b, r20
    2bb8:	5c af       	sts	0x7c, r21
    2bba:	b7 01       	movw	r22, r14
    2bbc:	a6 01       	movw	r20, r12
    2bbe:	00 2e       	mov	r0, r16
    2bc0:	04 c0       	rjmp	.+8      	; 0x2bca <__divdi3+0xaf2>
    2bc2:	76 95       	lsr	r23
    2bc4:	67 95       	ror	r22
    2bc6:	57 95       	ror	r21
    2bc8:	47 95       	ror	r20
    2bca:	0a 94       	dec	r0
    2bcc:	d2 f7       	brpl	.-12     	; 0x2bc2 <__divdi3+0xaea>
    2bce:	49 ab       	sts	0x59, r20
    2bd0:	5a ab       	sts	0x5a, r21
    2bd2:	6b ab       	sts	0x5b, r22
    2bd4:	7c ab       	sts	0x5c, r23
    2bd6:	c7 01       	movw	r24, r14
    2bd8:	b6 01       	movw	r22, r12
    2bda:	03 2c       	mov	r0, r3
    2bdc:	04 c0       	rjmp	.+8      	; 0x2be6 <__divdi3+0xb0e>
    2bde:	66 0f       	add	r22, r22
    2be0:	77 1f       	adc	r23, r23
    2be2:	88 1f       	adc	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	0a 94       	dec	r0
    2be8:	d2 f7       	brpl	.-12     	; 0x2bde <__divdi3+0xb06>
    2bea:	6d a7       	lds	r22, 0x7d
    2bec:	7e a7       	lds	r23, 0x7e
    2bee:	8f a7       	lds	r24, 0x7f
    2bf0:	98 ab       	sts	0x58, r25
    2bf2:	8d a9       	sts	0x4d, r24
    2bf4:	9e a9       	sts	0x4e, r25
    2bf6:	af a9       	sts	0x4f, r26
    2bf8:	b8 ad       	sts	0x68, r27
    2bfa:	04 c0       	rjmp	.+8      	; 0x2c04 <__divdi3+0xb2c>
    2bfc:	b6 95       	lsr	r27
    2bfe:	a7 95       	ror	r26
    2c00:	97 95       	ror	r25
    2c02:	87 95       	ror	r24
    2c04:	0a 95       	dec	r16
    2c06:	d2 f7       	brpl	.-12     	; 0x2bfc <__divdi3+0xb24>
    2c08:	4d a5       	lds	r20, 0x6d
    2c0a:	5e a5       	lds	r21, 0x6e
    2c0c:	6f a5       	lds	r22, 0x6f
    2c0e:	78 a9       	sts	0x48, r23
    2c10:	48 2b       	or	r20, r24
    2c12:	59 2b       	or	r21, r25
    2c14:	6a 2b       	or	r22, r26
    2c16:	7b 2b       	or	r23, r27
    2c18:	4d a7       	lds	r20, 0x7d
    2c1a:	5e a7       	lds	r21, 0x7e
    2c1c:	6f a7       	lds	r22, 0x7f
    2c1e:	78 ab       	sts	0x58, r23
    2c20:	43 01       	movw	r8, r6
    2c22:	aa 24       	eor	r10, r10
    2c24:	bb 24       	eor	r11, r11
    2c26:	93 01       	movw	r18, r6
    2c28:	82 01       	movw	r16, r4
    2c2a:	20 70       	andi	r18, 0x00	; 0
    2c2c:	30 70       	andi	r19, 0x00	; 0
    2c2e:	21 96       	adiw	r28, 0x01	; 1
    2c30:	0c af       	sts	0x7c, r16
    2c32:	1d af       	sts	0x7d, r17
    2c34:	2e af       	sts	0x7e, r18
    2c36:	3f af       	sts	0x7f, r19
    2c38:	21 97       	sbiw	r28, 0x01	; 1
    2c3a:	69 a9       	sts	0x49, r22
    2c3c:	7a a9       	sts	0x4a, r23
    2c3e:	8b a9       	sts	0x4b, r24
    2c40:	9c a9       	sts	0x4c, r25
    2c42:	a5 01       	movw	r20, r10
    2c44:	94 01       	movw	r18, r8
    2c46:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2c4a:	29 a7       	lds	r18, 0x79
    2c4c:	3a a7       	lds	r19, 0x7a
    2c4e:	4b a7       	lds	r20, 0x7b
    2c50:	5c a7       	lds	r21, 0x7c
    2c52:	6b 01       	movw	r12, r22
    2c54:	7c 01       	movw	r14, r24
    2c56:	69 a9       	sts	0x49, r22
    2c58:	7a a9       	sts	0x4a, r23
    2c5a:	8b a9       	sts	0x4b, r24
    2c5c:	9c a9       	sts	0x4c, r25
    2c5e:	a5 01       	movw	r20, r10
    2c60:	94 01       	movw	r18, r8
    2c62:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2c66:	ca 01       	movw	r24, r20
    2c68:	b9 01       	movw	r22, r18
    2c6a:	21 96       	adiw	r28, 0x01	; 1
    2c6c:	2c ad       	sts	0x6c, r18
    2c6e:	3d ad       	sts	0x6d, r19
    2c70:	4e ad       	sts	0x6e, r20
    2c72:	5f ad       	sts	0x6f, r21
    2c74:	21 97       	sbiw	r28, 0x01	; 1
    2c76:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	76 01       	movw	r14, r12
    2c80:	dd 24       	eor	r13, r13
    2c82:	cc 24       	eor	r12, r12
    2c84:	0d a5       	lds	r16, 0x6d
    2c86:	1e a5       	lds	r17, 0x6e
    2c88:	2f a5       	lds	r18, 0x6f
    2c8a:	38 a9       	sts	0x48, r19
    2c8c:	a9 01       	movw	r20, r18
    2c8e:	66 27       	eor	r22, r22
    2c90:	77 27       	eor	r23, r23
    2c92:	c4 2a       	or	r12, r20
    2c94:	d5 2a       	or	r13, r21
    2c96:	e6 2a       	or	r14, r22
    2c98:	f7 2a       	or	r15, r23
    2c9a:	09 a5       	lds	r16, 0x69
    2c9c:	1a a5       	lds	r17, 0x6a
    2c9e:	2b a5       	lds	r18, 0x6b
    2ca0:	3c a5       	lds	r19, 0x6c
    2ca2:	c8 16       	cp	r12, r24
    2ca4:	d9 06       	cpc	r13, r25
    2ca6:	ea 06       	cpc	r14, r26
    2ca8:	fb 06       	cpc	r15, r27
    2caa:	38 f5       	brcc	.+78     	; 0x2cfa <__divdi3+0xc22>
    2cac:	01 50       	subi	r16, 0x01	; 1
    2cae:	10 40       	sbci	r17, 0x00	; 0
    2cb0:	20 40       	sbci	r18, 0x00	; 0
    2cb2:	30 40       	sbci	r19, 0x00	; 0
    2cb4:	09 ab       	sts	0x59, r16
    2cb6:	1a ab       	sts	0x5a, r17
    2cb8:	2b ab       	sts	0x5b, r18
    2cba:	3c ab       	sts	0x5c, r19
    2cbc:	c4 0c       	add	r12, r4
    2cbe:	d5 1c       	adc	r13, r5
    2cc0:	e6 1c       	adc	r14, r6
    2cc2:	f7 1c       	adc	r15, r7
    2cc4:	c4 14       	cp	r12, r4
    2cc6:	d5 04       	cpc	r13, r5
    2cc8:	e6 04       	cpc	r14, r6
    2cca:	f7 04       	cpc	r15, r7
    2ccc:	d0 f0       	brcs	.+52     	; 0x2d02 <__divdi3+0xc2a>
    2cce:	c8 16       	cp	r12, r24
    2cd0:	d9 06       	cpc	r13, r25
    2cd2:	ea 06       	cpc	r14, r26
    2cd4:	fb 06       	cpc	r15, r27
    2cd6:	a8 f4       	brcc	.+42     	; 0x2d02 <__divdi3+0xc2a>
    2cd8:	09 a5       	lds	r16, 0x69
    2cda:	1a a5       	lds	r17, 0x6a
    2cdc:	2b a5       	lds	r18, 0x6b
    2cde:	3c a5       	lds	r19, 0x6c
    2ce0:	02 50       	subi	r16, 0x02	; 2
    2ce2:	10 40       	sbci	r17, 0x00	; 0
    2ce4:	20 40       	sbci	r18, 0x00	; 0
    2ce6:	30 40       	sbci	r19, 0x00	; 0
    2ce8:	09 ab       	sts	0x59, r16
    2cea:	1a ab       	sts	0x5a, r17
    2cec:	2b ab       	sts	0x5b, r18
    2cee:	3c ab       	sts	0x5c, r19
    2cf0:	c4 0c       	add	r12, r4
    2cf2:	d5 1c       	adc	r13, r5
    2cf4:	e6 1c       	adc	r14, r6
    2cf6:	f7 1c       	adc	r15, r7
    2cf8:	04 c0       	rjmp	.+8      	; 0x2d02 <__divdi3+0xc2a>
    2cfa:	09 ab       	sts	0x59, r16
    2cfc:	1a ab       	sts	0x5a, r17
    2cfe:	2b ab       	sts	0x5b, r18
    2d00:	3c ab       	sts	0x5c, r19
    2d02:	c8 1a       	sub	r12, r24
    2d04:	d9 0a       	sbc	r13, r25
    2d06:	ea 0a       	sbc	r14, r26
    2d08:	fb 0a       	sbc	r15, r27
    2d0a:	c7 01       	movw	r24, r14
    2d0c:	b6 01       	movw	r22, r12
    2d0e:	a5 01       	movw	r20, r10
    2d10:	94 01       	movw	r18, r8
    2d12:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2d16:	29 a7       	lds	r18, 0x79
    2d18:	3a a7       	lds	r19, 0x7a
    2d1a:	4b a7       	lds	r20, 0x7b
    2d1c:	5c a7       	lds	r21, 0x7c
    2d1e:	29 96       	adiw	r28, 0x09	; 9
    2d20:	6c af       	sts	0x7c, r22
    2d22:	7d af       	sts	0x7d, r23
    2d24:	8e af       	sts	0x7e, r24
    2d26:	9f af       	sts	0x7f, r25
    2d28:	29 97       	sbiw	r28, 0x09	; 9
    2d2a:	c7 01       	movw	r24, r14
    2d2c:	b6 01       	movw	r22, r12
    2d2e:	a5 01       	movw	r20, r10
    2d30:	94 01       	movw	r18, r8
    2d32:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2d36:	ca 01       	movw	r24, r20
    2d38:	b9 01       	movw	r22, r18
    2d3a:	21 96       	adiw	r28, 0x01	; 1
    2d3c:	2c ad       	sts	0x6c, r18
    2d3e:	3d ad       	sts	0x6d, r19
    2d40:	4e ad       	sts	0x6e, r20
    2d42:	5f ad       	sts	0x6f, r21
    2d44:	21 97       	sbiw	r28, 0x01	; 1
    2d46:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2d4a:	4b 01       	movw	r8, r22
    2d4c:	5c 01       	movw	r10, r24
    2d4e:	29 96       	adiw	r28, 0x09	; 9
    2d50:	4c ad       	sts	0x6c, r20
    2d52:	5d ad       	sts	0x6d, r21
    2d54:	6e ad       	sts	0x6e, r22
    2d56:	7f ad       	sts	0x6f, r23
    2d58:	29 97       	sbiw	r28, 0x09	; 9
    2d5a:	9a 01       	movw	r18, r20
    2d5c:	11 27       	eor	r17, r17
    2d5e:	00 27       	eor	r16, r16
    2d60:	8d a5       	lds	r24, 0x6d
    2d62:	9e a5       	lds	r25, 0x6e
    2d64:	af a5       	lds	r26, 0x6f
    2d66:	b8 a9       	sts	0x48, r27
    2d68:	a0 70       	andi	r26, 0x00	; 0
    2d6a:	b0 70       	andi	r27, 0x00	; 0
    2d6c:	08 2b       	or	r16, r24
    2d6e:	19 2b       	or	r17, r25
    2d70:	2a 2b       	or	r18, r26
    2d72:	3b 2b       	or	r19, r27
    2d74:	89 a5       	lds	r24, 0x69
    2d76:	9a a5       	lds	r25, 0x6a
    2d78:	ab a5       	lds	r26, 0x6b
    2d7a:	bc a5       	lds	r27, 0x6c
    2d7c:	08 15       	cp	r16, r8
    2d7e:	19 05       	cpc	r17, r9
    2d80:	2a 05       	cpc	r18, r10
    2d82:	3b 05       	cpc	r19, r11
    2d84:	e0 f4       	brcc	.+56     	; 0x2dbe <__divdi3+0xce6>
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	a1 09       	sbc	r26, r1
    2d8a:	b1 09       	sbc	r27, r1
    2d8c:	04 0d       	add	r16, r4
    2d8e:	15 1d       	adc	r17, r5
    2d90:	26 1d       	adc	r18, r6
    2d92:	37 1d       	adc	r19, r7
    2d94:	04 15       	cp	r16, r4
    2d96:	15 05       	cpc	r17, r5
    2d98:	26 05       	cpc	r18, r6
    2d9a:	37 05       	cpc	r19, r7
    2d9c:	80 f0       	brcs	.+32     	; 0x2dbe <__divdi3+0xce6>
    2d9e:	08 15       	cp	r16, r8
    2da0:	19 05       	cpc	r17, r9
    2da2:	2a 05       	cpc	r18, r10
    2da4:	3b 05       	cpc	r19, r11
    2da6:	58 f4       	brcc	.+22     	; 0x2dbe <__divdi3+0xce6>
    2da8:	89 a5       	lds	r24, 0x69
    2daa:	9a a5       	lds	r25, 0x6a
    2dac:	ab a5       	lds	r26, 0x6b
    2dae:	bc a5       	lds	r27, 0x6c
    2db0:	02 97       	sbiw	r24, 0x02	; 2
    2db2:	a1 09       	sbc	r26, r1
    2db4:	b1 09       	sbc	r27, r1
    2db6:	04 0d       	add	r16, r4
    2db8:	15 1d       	adc	r17, r5
    2dba:	26 1d       	adc	r18, r6
    2dbc:	37 1d       	adc	r19, r7
    2dbe:	b9 01       	movw	r22, r18
    2dc0:	a8 01       	movw	r20, r16
    2dc2:	48 19       	sub	r20, r8
    2dc4:	59 09       	sbc	r21, r9
    2dc6:	6a 09       	sbc	r22, r10
    2dc8:	7b 09       	sbc	r23, r11
    2dca:	4d a7       	lds	r20, 0x7d
    2dcc:	5e a7       	lds	r21, 0x7e
    2dce:	6f a7       	lds	r22, 0x7f
    2dd0:	78 ab       	sts	0x58, r23
    2dd2:	09 a9       	sts	0x49, r16
    2dd4:	1a a9       	sts	0x4a, r17
    2dd6:	2b a9       	sts	0x4b, r18
    2dd8:	3c a9       	sts	0x4c, r19
    2dda:	78 01       	movw	r14, r16
    2ddc:	dd 24       	eor	r13, r13
    2dde:	cc 24       	eor	r12, r12
    2de0:	c8 2a       	or	r12, r24
    2de2:	d9 2a       	or	r13, r25
    2de4:	ea 2a       	or	r14, r26
    2de6:	fb 2a       	or	r15, r27
    2de8:	ff ef       	ldi	r31, 0xFF	; 255
    2dea:	8f 2e       	mov	r8, r31
    2dec:	ff ef       	ldi	r31, 0xFF	; 255
    2dee:	9f 2e       	mov	r9, r31
    2df0:	a1 2c       	mov	r10, r1
    2df2:	b1 2c       	mov	r11, r1
    2df4:	8c 20       	and	r8, r12
    2df6:	9d 20       	and	r9, r13
    2df8:	ae 20       	and	r10, r14
    2dfa:	bf 20       	and	r11, r15
    2dfc:	87 01       	movw	r16, r14
    2dfe:	22 27       	eor	r18, r18
    2e00:	33 27       	eor	r19, r19
    2e02:	09 a7       	lds	r16, 0x79
    2e04:	1a a7       	lds	r17, 0x7a
    2e06:	2b a7       	lds	r18, 0x7b
    2e08:	3c a7       	lds	r19, 0x7c
    2e0a:	49 ac       	sts	0xa9, r20
    2e0c:	5a ac       	sts	0xaa, r21
    2e0e:	6b ac       	sts	0xab, r22
    2e10:	7c ac       	sts	0xac, r23
    2e12:	2f ef       	ldi	r18, 0xFF	; 255
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	50 e0       	ldi	r21, 0x00	; 0
    2e1a:	42 22       	and	r4, r18
    2e1c:	53 22       	and	r5, r19
    2e1e:	64 22       	and	r6, r20
    2e20:	75 22       	and	r7, r21
    2e22:	29 ad       	sts	0x69, r18
    2e24:	3a ad       	sts	0x6a, r19
    2e26:	4b ad       	sts	0x6b, r20
    2e28:	5c ad       	sts	0x6c, r21
    2e2a:	8a 01       	movw	r16, r20
    2e2c:	22 27       	eor	r18, r18
    2e2e:	33 27       	eor	r19, r19
    2e30:	09 ab       	sts	0x59, r16
    2e32:	1a ab       	sts	0x5a, r17
    2e34:	2b ab       	sts	0x5b, r18
    2e36:	3c ab       	sts	0x5c, r19
    2e38:	c5 01       	movw	r24, r10
    2e3a:	b4 01       	movw	r22, r8
    2e3c:	a3 01       	movw	r20, r6
    2e3e:	92 01       	movw	r18, r4
    2e40:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2e44:	69 af       	sts	0x79, r22
    2e46:	7a af       	sts	0x7a, r23
    2e48:	8b af       	sts	0x7b, r24
    2e4a:	9c af       	sts	0x7c, r25
    2e4c:	c5 01       	movw	r24, r10
    2e4e:	b4 01       	movw	r22, r8
    2e50:	29 a9       	sts	0x49, r18
    2e52:	3a a9       	sts	0x4a, r19
    2e54:	4b a9       	sts	0x4b, r20
    2e56:	5c a9       	sts	0x4c, r21
    2e58:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2e5c:	4b 01       	movw	r8, r22
    2e5e:	5c 01       	movw	r10, r24
    2e60:	69 a5       	lds	r22, 0x69
    2e62:	7a a5       	lds	r23, 0x6a
    2e64:	8b a5       	lds	r24, 0x6b
    2e66:	9c a5       	lds	r25, 0x6c
    2e68:	a3 01       	movw	r20, r6
    2e6a:	92 01       	movw	r18, r4
    2e6c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2e70:	2b 01       	movw	r4, r22
    2e72:	3c 01       	movw	r6, r24
    2e74:	69 a5       	lds	r22, 0x69
    2e76:	7a a5       	lds	r23, 0x6a
    2e78:	8b a5       	lds	r24, 0x6b
    2e7a:	9c a5       	lds	r25, 0x6c
    2e7c:	29 a9       	sts	0x49, r18
    2e7e:	3a a9       	sts	0x4a, r19
    2e80:	4b a9       	sts	0x4b, r20
    2e82:	5c a9       	sts	0x4c, r21
    2e84:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    2e88:	ab 01       	movw	r20, r22
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	84 0c       	add	r8, r4
    2e8e:	95 1c       	adc	r9, r5
    2e90:	a6 1c       	adc	r10, r6
    2e92:	b7 1c       	adc	r11, r7
    2e94:	09 ad       	sts	0x69, r16
    2e96:	1a ad       	sts	0x6a, r17
    2e98:	2b ad       	sts	0x6b, r18
    2e9a:	3c ad       	sts	0x6c, r19
    2e9c:	c9 01       	movw	r24, r18
    2e9e:	aa 27       	eor	r26, r26
    2ea0:	bb 27       	eor	r27, r27
    2ea2:	88 0e       	add	r8, r24
    2ea4:	99 1e       	adc	r9, r25
    2ea6:	aa 1e       	adc	r10, r26
    2ea8:	bb 1e       	adc	r11, r27
    2eaa:	84 14       	cp	r8, r4
    2eac:	95 04       	cpc	r9, r5
    2eae:	a6 04       	cpc	r10, r6
    2eb0:	b7 04       	cpc	r11, r7
    2eb2:	20 f4       	brcc	.+8      	; 0x2ebc <__divdi3+0xde4>
    2eb4:	40 50       	subi	r20, 0x00	; 0
    2eb6:	50 40       	sbci	r21, 0x00	; 0
    2eb8:	6f 4f       	sbci	r22, 0xFF	; 255
    2eba:	7f 4f       	sbci	r23, 0xFF	; 255
    2ebc:	c5 01       	movw	r24, r10
    2ebe:	aa 27       	eor	r26, r26
    2ec0:	bb 27       	eor	r27, r27
    2ec2:	84 0f       	add	r24, r20
    2ec4:	95 1f       	adc	r25, r21
    2ec6:	a6 1f       	adc	r26, r22
    2ec8:	b7 1f       	adc	r27, r23
    2eca:	0d a5       	lds	r16, 0x6d
    2ecc:	1e a5       	lds	r17, 0x6e
    2ece:	2f a5       	lds	r18, 0x6f
    2ed0:	38 a9       	sts	0x48, r19
    2ed2:	08 17       	cp	r16, r24
    2ed4:	19 07       	cpc	r17, r25
    2ed6:	2a 07       	cpc	r18, r26
    2ed8:	3b 07       	cpc	r19, r27
    2eda:	18 f1       	brcs	.+70     	; 0x2f22 <__divdi3+0xe4a>
    2edc:	80 17       	cp	r24, r16
    2ede:	91 07       	cpc	r25, r17
    2ee0:	a2 07       	cpc	r26, r18
    2ee2:	b3 07       	cpc	r27, r19
    2ee4:	a1 f5       	brne	.+104    	; 0x2f4e <__divdi3+0xe76>
    2ee6:	54 01       	movw	r10, r8
    2ee8:	99 24       	eor	r9, r9
    2eea:	88 24       	eor	r8, r8
    2eec:	89 ad       	sts	0x69, r24
    2eee:	9a ad       	sts	0x6a, r25
    2ef0:	ab ad       	sts	0x6b, r26
    2ef2:	bc ad       	sts	0x6c, r27
    2ef4:	a0 70       	andi	r26, 0x00	; 0
    2ef6:	b0 70       	andi	r27, 0x00	; 0
    2ef8:	88 0e       	add	r8, r24
    2efa:	99 1e       	adc	r9, r25
    2efc:	aa 1e       	adc	r10, r26
    2efe:	bb 1e       	adc	r11, r27
    2f00:	4d a9       	sts	0x4d, r20
    2f02:	5e a9       	sts	0x4e, r21
    2f04:	6f a9       	sts	0x4f, r22
    2f06:	78 ad       	sts	0x68, r23
    2f08:	03 2c       	mov	r0, r3
    2f0a:	04 c0       	rjmp	.+8      	; 0x2f14 <__divdi3+0xe3c>
    2f0c:	44 0f       	add	r20, r20
    2f0e:	55 1f       	adc	r21, r21
    2f10:	66 1f       	adc	r22, r22
    2f12:	77 1f       	adc	r23, r23
    2f14:	0a 94       	dec	r0
    2f16:	d2 f7       	brpl	.-12     	; 0x2f0c <__divdi3+0xe34>
    2f18:	48 15       	cp	r20, r8
    2f1a:	59 05       	cpc	r21, r9
    2f1c:	6a 05       	cpc	r22, r10
    2f1e:	7b 05       	cpc	r23, r11
    2f20:	b0 f4       	brcc	.+44     	; 0x2f4e <__divdi3+0xe76>
    2f22:	08 94       	sec
    2f24:	c1 08       	sbc	r12, r1
    2f26:	d1 08       	sbc	r13, r1
    2f28:	e1 08       	sbc	r14, r1
    2f2a:	f1 08       	sbc	r15, r1
    2f2c:	10 c0       	rjmp	.+32     	; 0x2f4e <__divdi3+0xe76>
    2f2e:	44 24       	eor	r4, r4
    2f30:	55 24       	eor	r5, r5
    2f32:	32 01       	movw	r6, r4
    2f34:	cc 24       	eor	r12, r12
    2f36:	dd 24       	eor	r13, r13
    2f38:	76 01       	movw	r14, r12
    2f3a:	0c c0       	rjmp	.+24     	; 0x2f54 <__divdi3+0xe7c>
    2f3c:	44 24       	eor	r4, r4
    2f3e:	55 24       	eor	r5, r5
    2f40:	32 01       	movw	r6, r4
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	c8 2e       	mov	r12, r24
    2f46:	d1 2c       	mov	r13, r1
    2f48:	e1 2c       	mov	r14, r1
    2f4a:	f1 2c       	mov	r15, r1
    2f4c:	03 c0       	rjmp	.+6      	; 0x2f54 <__divdi3+0xe7c>
    2f4e:	44 24       	eor	r4, r4
    2f50:	55 24       	eor	r5, r5
    2f52:	32 01       	movw	r6, r4
    2f54:	fe 01       	movw	r30, r28
    2f56:	31 96       	adiw	r30, 0x01	; 1
    2f58:	88 e0       	ldi	r24, 0x08	; 8
    2f5a:	df 01       	movw	r26, r30
    2f5c:	1d 92       	st	X+, r1
    2f5e:	8a 95       	dec	r24
    2f60:	e9 f7       	brne	.-6      	; 0x2f5c <__divdi3+0xe84>
    2f62:	c9 82       	std	Y+1, r12	; 0x01
    2f64:	da 82       	std	Y+2, r13	; 0x02
    2f66:	eb 82       	std	Y+3, r14	; 0x03
    2f68:	fc 82       	std	Y+4, r15	; 0x04
    2f6a:	4d 82       	std	Y+5, r4	; 0x05
    2f6c:	5e 82       	std	Y+6, r5	; 0x06
    2f6e:	6f 82       	std	Y+7, r6	; 0x07
    2f70:	78 86       	std	Y+8, r7	; 0x08
    2f72:	2c 2d       	mov	r18, r12
    2f74:	3a 81       	ldd	r19, Y+2	; 0x02
    2f76:	4b 81       	ldd	r20, Y+3	; 0x03
    2f78:	5c 81       	ldd	r21, Y+4	; 0x04
    2f7a:	64 2d       	mov	r22, r4
    2f7c:	7e 81       	ldd	r23, Y+6	; 0x06
    2f7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f80:	98 85       	ldd	r25, Y+8	; 0x08
    2f82:	25 96       	adiw	r28, 0x05	; 5
    2f84:	ec ac       	sts	0xac, r30
    2f86:	fd ac       	sts	0xad, r31
    2f88:	0e ad       	sts	0x6e, r16
    2f8a:	1f ad       	sts	0x6f, r17
    2f8c:	25 97       	sbiw	r28, 0x05	; 5
    2f8e:	e1 14       	cp	r14, r1
    2f90:	f1 04       	cpc	r15, r1
    2f92:	01 05       	cpc	r16, r1
    2f94:	11 05       	cpc	r17, r1
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <__divdi3+0xec2>
    2f98:	56 c0       	rjmp	.+172    	; 0x3046 <__divdi3+0xf6e>
    2f9a:	21 95       	neg	r18
    2f9c:	e1 e0       	ldi	r30, 0x01	; 1
    2f9e:	12 16       	cp	r1, r18
    2fa0:	08 f0       	brcs	.+2      	; 0x2fa4 <__divdi3+0xecc>
    2fa2:	e0 e0       	ldi	r30, 0x00	; 0
    2fa4:	31 95       	neg	r19
    2fa6:	f1 e0       	ldi	r31, 0x01	; 1
    2fa8:	13 16       	cp	r1, r19
    2faa:	08 f0       	brcs	.+2      	; 0x2fae <__divdi3+0xed6>
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	03 2f       	mov	r16, r19
    2fb0:	0e 1b       	sub	r16, r30
    2fb2:	e1 e0       	ldi	r30, 0x01	; 1
    2fb4:	30 17       	cp	r19, r16
    2fb6:	08 f0       	brcs	.+2      	; 0x2fba <__divdi3+0xee2>
    2fb8:	e0 e0       	ldi	r30, 0x00	; 0
    2fba:	fe 2b       	or	r31, r30
    2fbc:	41 95       	neg	r20
    2fbe:	e1 e0       	ldi	r30, 0x01	; 1
    2fc0:	14 16       	cp	r1, r20
    2fc2:	08 f0       	brcs	.+2      	; 0x2fc6 <__divdi3+0xeee>
    2fc4:	e0 e0       	ldi	r30, 0x00	; 0
    2fc6:	14 2f       	mov	r17, r20
    2fc8:	1f 1b       	sub	r17, r31
    2fca:	31 e0       	ldi	r19, 0x01	; 1
    2fcc:	41 17       	cp	r20, r17
    2fce:	08 f0       	brcs	.+2      	; 0x2fd2 <__divdi3+0xefa>
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	e3 2b       	or	r30, r19
    2fd4:	51 95       	neg	r21
    2fd6:	f1 e0       	ldi	r31, 0x01	; 1
    2fd8:	15 16       	cp	r1, r21
    2fda:	08 f0       	brcs	.+2      	; 0x2fde <__divdi3+0xf06>
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	b5 2f       	mov	r27, r21
    2fe0:	be 1b       	sub	r27, r30
    2fe2:	31 e0       	ldi	r19, 0x01	; 1
    2fe4:	5b 17       	cp	r21, r27
    2fe6:	08 f0       	brcs	.+2      	; 0x2fea <__divdi3+0xf12>
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	f3 2b       	or	r31, r19
    2fec:	61 95       	neg	r22
    2fee:	e1 e0       	ldi	r30, 0x01	; 1
    2ff0:	16 16       	cp	r1, r22
    2ff2:	08 f0       	brcs	.+2      	; 0x2ff6 <__divdi3+0xf1e>
    2ff4:	e0 e0       	ldi	r30, 0x00	; 0
    2ff6:	46 2e       	mov	r4, r22
    2ff8:	4f 1a       	sub	r4, r31
    2ffa:	31 e0       	ldi	r19, 0x01	; 1
    2ffc:	64 15       	cp	r22, r4
    2ffe:	08 f0       	brcs	.+2      	; 0x3002 <__divdi3+0xf2a>
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	e3 2b       	or	r30, r19
    3004:	71 95       	neg	r23
    3006:	f1 e0       	ldi	r31, 0x01	; 1
    3008:	17 16       	cp	r1, r23
    300a:	08 f0       	brcs	.+2      	; 0x300e <__divdi3+0xf36>
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	a7 2f       	mov	r26, r23
    3010:	ae 1b       	sub	r26, r30
    3012:	31 e0       	ldi	r19, 0x01	; 1
    3014:	7a 17       	cp	r23, r26
    3016:	08 f0       	brcs	.+2      	; 0x301a <__divdi3+0xf42>
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	f3 2b       	or	r31, r19
    301c:	81 95       	neg	r24
    301e:	e1 e0       	ldi	r30, 0x01	; 1
    3020:	18 16       	cp	r1, r24
    3022:	08 f0       	brcs	.+2      	; 0x3026 <__divdi3+0xf4e>
    3024:	e0 e0       	ldi	r30, 0x00	; 0
    3026:	f8 2e       	mov	r15, r24
    3028:	ff 1a       	sub	r15, r31
    302a:	ff 2d       	mov	r31, r15
    302c:	31 e0       	ldi	r19, 0x01	; 1
    302e:	8f 15       	cp	r24, r15
    3030:	08 f0       	brcs	.+2      	; 0x3034 <__divdi3+0xf5c>
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	e3 2b       	or	r30, r19
    3036:	91 95       	neg	r25
    3038:	30 2f       	mov	r19, r16
    303a:	41 2f       	mov	r20, r17
    303c:	5b 2f       	mov	r21, r27
    303e:	64 2d       	mov	r22, r4
    3040:	7a 2f       	mov	r23, r26
    3042:	8f 2f       	mov	r24, r31
    3044:	9e 1b       	sub	r25, r30
    3046:	c8 5b       	subi	r28, 0xB8	; 184
    3048:	df 4f       	sbci	r29, 0xFF	; 255
    304a:	e1 e1       	ldi	r30, 0x11	; 17
    304c:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__epilogue_restores__+0x2>

00003050 <__moddi3>:
    3050:	a8 e4       	ldi	r26, 0x48	; 72
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	ee e2       	ldi	r30, 0x2E	; 46
    3056:	f8 e1       	ldi	r31, 0x18	; 24
    3058:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__prologue_saves__>
    305c:	f5 01       	movw	r30, r10
    305e:	29 a3       	lds	r18, 0x59
    3060:	3a a3       	lds	r19, 0x5a
    3062:	4b a3       	lds	r20, 0x5b
    3064:	5c a3       	lds	r21, 0x5c
    3066:	6d a3       	lds	r22, 0x5d
    3068:	7e a3       	lds	r23, 0x5e
    306a:	8f a3       	lds	r24, 0x5f
    306c:	98 a7       	lds	r25, 0x78
    306e:	a9 8e       	std	Y+25, r10	; 0x19
    3070:	fa 8f       	std	Y+26, r31	; 0x1a
    3072:	cb 8e       	std	Y+27, r12	; 0x1b
    3074:	dc 8e       	std	Y+28, r13	; 0x1c
    3076:	ed 8e       	std	Y+29, r14	; 0x1d
    3078:	fe 8e       	std	Y+30, r15	; 0x1e
    307a:	0f 8f       	std	Y+31, r16	; 0x1f
    307c:	18 a3       	lds	r17, 0x58
    307e:	8d a0       	lds	r24, 0x8d
    3080:	9e a0       	lds	r25, 0x8e
    3082:	af a0       	lds	r26, 0x8f
    3084:	b8 a4       	lds	r27, 0xa8
    3086:	b7 fe       	sbrs	r11, 7
    3088:	67 c0       	rjmp	.+206    	; 0x3158 <__moddi3+0x108>
    308a:	21 95       	neg	r18
    308c:	b1 e0       	ldi	r27, 0x01	; 1
    308e:	12 16       	cp	r1, r18
    3090:	08 f0       	brcs	.+2      	; 0x3094 <__moddi3+0x44>
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	31 95       	neg	r19
    3096:	a1 e0       	ldi	r26, 0x01	; 1
    3098:	13 16       	cp	r1, r19
    309a:	08 f0       	brcs	.+2      	; 0x309e <__moddi3+0x4e>
    309c:	a0 e0       	ldi	r26, 0x00	; 0
    309e:	83 2e       	mov	r8, r19
    30a0:	8b 1a       	sub	r8, r27
    30a2:	b8 2d       	mov	r27, r8
    30a4:	88 24       	eor	r8, r8
    30a6:	83 94       	inc	r8
    30a8:	3b 17       	cp	r19, r27
    30aa:	08 f0       	brcs	.+2      	; 0x30ae <__moddi3+0x5e>
    30ac:	88 24       	eor	r8, r8
    30ae:	a8 29       	or	r26, r8
    30b0:	41 95       	neg	r20
    30b2:	31 e0       	ldi	r19, 0x01	; 1
    30b4:	14 16       	cp	r1, r20
    30b6:	08 f0       	brcs	.+2      	; 0x30ba <__moddi3+0x6a>
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	94 2e       	mov	r9, r20
    30bc:	9a 1a       	sub	r9, r26
    30be:	a9 2d       	mov	r26, r9
    30c0:	88 24       	eor	r8, r8
    30c2:	83 94       	inc	r8
    30c4:	49 15       	cp	r20, r9
    30c6:	08 f0       	brcs	.+2      	; 0x30ca <__moddi3+0x7a>
    30c8:	88 24       	eor	r8, r8
    30ca:	38 29       	or	r19, r8
    30cc:	51 95       	neg	r21
    30ce:	41 e0       	ldi	r20, 0x01	; 1
    30d0:	15 16       	cp	r1, r21
    30d2:	08 f0       	brcs	.+2      	; 0x30d6 <__moddi3+0x86>
    30d4:	40 e0       	ldi	r20, 0x00	; 0
    30d6:	75 2e       	mov	r7, r21
    30d8:	73 1a       	sub	r7, r19
    30da:	31 e0       	ldi	r19, 0x01	; 1
    30dc:	57 15       	cp	r21, r7
    30de:	08 f0       	brcs	.+2      	; 0x30e2 <__moddi3+0x92>
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	43 2b       	or	r20, r19
    30e4:	61 95       	neg	r22
    30e6:	31 e0       	ldi	r19, 0x01	; 1
    30e8:	16 16       	cp	r1, r22
    30ea:	08 f0       	brcs	.+2      	; 0x30ee <__moddi3+0x9e>
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	86 2e       	mov	r8, r22
    30f0:	84 1a       	sub	r8, r20
    30f2:	41 e0       	ldi	r20, 0x01	; 1
    30f4:	68 15       	cp	r22, r8
    30f6:	08 f0       	brcs	.+2      	; 0x30fa <__moddi3+0xaa>
    30f8:	40 e0       	ldi	r20, 0x00	; 0
    30fa:	34 2b       	or	r19, r20
    30fc:	71 95       	neg	r23
    30fe:	41 e0       	ldi	r20, 0x01	; 1
    3100:	17 16       	cp	r1, r23
    3102:	08 f0       	brcs	.+2      	; 0x3106 <__moddi3+0xb6>
    3104:	40 e0       	ldi	r20, 0x00	; 0
    3106:	57 2f       	mov	r21, r23
    3108:	53 1b       	sub	r21, r19
    310a:	31 e0       	ldi	r19, 0x01	; 1
    310c:	75 17       	cp	r23, r21
    310e:	08 f0       	brcs	.+2      	; 0x3112 <__moddi3+0xc2>
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	43 2b       	or	r20, r19
    3114:	81 95       	neg	r24
    3116:	31 e0       	ldi	r19, 0x01	; 1
    3118:	18 16       	cp	r1, r24
    311a:	08 f0       	brcs	.+2      	; 0x311e <__moddi3+0xce>
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	a8 2e       	mov	r10, r24
    3120:	a4 1a       	sub	r10, r20
    3122:	4a 2d       	mov	r20, r10
    3124:	61 e0       	ldi	r22, 0x01	; 1
    3126:	8a 15       	cp	r24, r10
    3128:	08 f0       	brcs	.+2      	; 0x312c <__moddi3+0xdc>
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	36 2b       	or	r19, r22
    312e:	91 95       	neg	r25
    3130:	93 1b       	sub	r25, r19
    3132:	29 a3       	lds	r18, 0x59
    3134:	ba a3       	lds	r27, 0x5a
    3136:	ab a3       	lds	r26, 0x5b
    3138:	7c a2       	lds	r23, 0x9c
    313a:	8d a2       	lds	r24, 0x9d
    313c:	5e a3       	lds	r21, 0x5e
    313e:	4f a3       	lds	r20, 0x5f
    3140:	98 a7       	lds	r25, 0x78
    3142:	88 24       	eor	r8, r8
    3144:	8a 94       	dec	r8
    3146:	98 2c       	mov	r9, r8
    3148:	54 01       	movw	r10, r8
    314a:	25 96       	adiw	r28, 0x05	; 5
    314c:	8c ae       	sts	0xbc, r24
    314e:	9d ae       	sts	0xbd, r25
    3150:	ae ae       	sts	0xbe, r26
    3152:	bf ae       	sts	0xbf, r27
    3154:	25 97       	sbiw	r28, 0x05	; 5
    3156:	06 c0       	rjmp	.+12     	; 0x3164 <__moddi3+0x114>
    3158:	25 96       	adiw	r28, 0x05	; 5
    315a:	1c ae       	sts	0xbc, r17
    315c:	1d ae       	sts	0xbd, r17
    315e:	1e ae       	sts	0xbe, r17
    3160:	1f ae       	sts	0xbf, r17
    3162:	25 97       	sbiw	r28, 0x05	; 5
    3164:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3166:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3168:	af 8d       	ldd	r26, Y+31	; 0x1f
    316a:	b8 a1       	lds	r27, 0x48
    316c:	b7 ff       	sbrs	r27, 7
    316e:	58 c0       	rjmp	.+176    	; 0x3220 <__moddi3+0x1d0>
    3170:	e1 95       	neg	r30
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	1e 16       	cp	r1, r30
    3176:	08 f0       	brcs	.+2      	; 0x317a <__moddi3+0x12a>
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	f1 95       	neg	r31
    317c:	91 e0       	ldi	r25, 0x01	; 1
    317e:	1f 16       	cp	r1, r31
    3180:	08 f0       	brcs	.+2      	; 0x3184 <__moddi3+0x134>
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	4f 2f       	mov	r20, r31
    3186:	48 1b       	sub	r20, r24
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	f4 17       	cp	r31, r20
    318c:	08 f0       	brcs	.+2      	; 0x3190 <__moddi3+0x140>
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	98 2b       	or	r25, r24
    3192:	c1 94       	neg	r12
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	1c 14       	cp	r1, r12
    3198:	08 f0       	brcs	.+2      	; 0x319c <__moddi3+0x14c>
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	6c 2d       	mov	r22, r12
    319e:	69 1b       	sub	r22, r25
    31a0:	91 e0       	ldi	r25, 0x01	; 1
    31a2:	c6 16       	cp	r12, r22
    31a4:	08 f0       	brcs	.+2      	; 0x31a8 <__moddi3+0x158>
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	89 2b       	or	r24, r25
    31aa:	d1 94       	neg	r13
    31ac:	91 e0       	ldi	r25, 0x01	; 1
    31ae:	1d 14       	cp	r1, r13
    31b0:	08 f0       	brcs	.+2      	; 0x31b4 <__moddi3+0x164>
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	5d 2d       	mov	r21, r13
    31b6:	58 1b       	sub	r21, r24
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	d5 16       	cp	r13, r21
    31bc:	08 f0       	brcs	.+2      	; 0x31c0 <__moddi3+0x170>
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	98 2b       	or	r25, r24
    31c2:	e1 94       	neg	r14
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	1e 14       	cp	r1, r14
    31c8:	08 f0       	brcs	.+2      	; 0x31cc <__moddi3+0x17c>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	3e 2d       	mov	r19, r14
    31ce:	39 1b       	sub	r19, r25
    31d0:	91 e0       	ldi	r25, 0x01	; 1
    31d2:	e3 16       	cp	r14, r19
    31d4:	08 f0       	brcs	.+2      	; 0x31d8 <__moddi3+0x188>
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	89 2b       	or	r24, r25
    31da:	f1 94       	neg	r15
    31dc:	91 e0       	ldi	r25, 0x01	; 1
    31de:	1f 14       	cp	r1, r15
    31e0:	08 f0       	brcs	.+2      	; 0x31e4 <__moddi3+0x194>
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	2f 2d       	mov	r18, r15
    31e6:	28 1b       	sub	r18, r24
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	f2 16       	cp	r15, r18
    31ec:	08 f0       	brcs	.+2      	; 0x31f0 <__moddi3+0x1a0>
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	98 2b       	or	r25, r24
    31f2:	01 95       	neg	r16
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	10 16       	cp	r1, r16
    31f8:	08 f0       	brcs	.+2      	; 0x31fc <__moddi3+0x1ac>
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	90 2e       	mov	r9, r16
    31fe:	99 1a       	sub	r9, r25
    3200:	99 2d       	mov	r25, r9
    3202:	71 e0       	ldi	r23, 0x01	; 1
    3204:	09 15       	cp	r16, r9
    3206:	08 f0       	brcs	.+2      	; 0x320a <__moddi3+0x1ba>
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	87 2b       	or	r24, r23
    320c:	11 95       	neg	r17
    320e:	18 1b       	sub	r17, r24
    3210:	e9 8f       	std	Y+25, r30	; 0x19
    3212:	4a 8f       	std	Y+26, r20	; 0x1a
    3214:	6b 8f       	std	Y+27, r22	; 0x1b
    3216:	5c 8f       	std	Y+28, r21	; 0x1c
    3218:	3d 8f       	std	Y+29, r19	; 0x1d
    321a:	2e 8f       	std	Y+30, r18	; 0x1e
    321c:	9f 8f       	std	Y+31, r25	; 0x1f
    321e:	18 a3       	lds	r17, 0x58
    3220:	e9 8c       	ldd	r14, Y+25	; 0x19
    3222:	fa 8c       	ldd	r15, Y+26	; 0x1a
    3224:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3226:	1c 8d       	ldd	r17, Y+28	; 0x1c
    3228:	bd 8d       	ldd	r27, Y+29	; 0x1d
    322a:	ae 8d       	ldd	r26, Y+30	; 0x1e
    322c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    322e:	28 a1       	lds	r18, 0x48
    3230:	f9 a1       	lds	r31, 0x49
    3232:	ea a1       	lds	r30, 0x4a
    3234:	4b a1       	lds	r20, 0x4b
    3236:	5c a1       	lds	r21, 0x4c
    3238:	6d a1       	lds	r22, 0x4d
    323a:	7e a1       	lds	r23, 0x4e
    323c:	8f a1       	lds	r24, 0x4f
    323e:	98 a5       	lds	r25, 0x68
    3240:	e9 86       	std	Y+9, r14	; 0x09
    3242:	fa 86       	std	Y+10, r15	; 0x0a
    3244:	0b 87       	std	Y+11, r16	; 0x0b
    3246:	1c 87       	std	Y+12, r17	; 0x0c
    3248:	bd 87       	std	Y+13, r27	; 0x0d
    324a:	ae 87       	std	Y+14, r26	; 0x0e
    324c:	3f 87       	std	Y+15, r19	; 0x0f
    324e:	28 8b       	std	Y+16, r18	; 0x10
    3250:	89 84       	ldd	r8, Y+9	; 0x09
    3252:	9a 84       	ldd	r9, Y+10	; 0x0a
    3254:	ab 84       	ldd	r10, Y+11	; 0x0b
    3256:	bc 84       	ldd	r11, Y+12	; 0x0c
    3258:	0d 85       	ldd	r16, Y+13	; 0x0d
    325a:	1e 85       	ldd	r17, Y+14	; 0x0e
    325c:	2f 85       	ldd	r18, Y+15	; 0x0f
    325e:	38 89       	ldd	r19, Y+16	; 0x10
    3260:	f9 a7       	lds	r31, 0x79
    3262:	ea a7       	lds	r30, 0x7a
    3264:	4b a7       	lds	r20, 0x7b
    3266:	5c a7       	lds	r21, 0x7c
    3268:	6b 01       	movw	r12, r22
    326a:	7c 01       	movw	r14, r24
    326c:	01 15       	cp	r16, r1
    326e:	11 05       	cpc	r17, r1
    3270:	21 05       	cpc	r18, r1
    3272:	31 05       	cpc	r19, r1
    3274:	09 f0       	breq	.+2      	; 0x3278 <__moddi3+0x228>
    3276:	a5 c2       	rjmp	.+1354   	; 0x37c2 <__moddi3+0x772>
    3278:	c8 14       	cp	r12, r8
    327a:	d9 04       	cpc	r13, r9
    327c:	ea 04       	cpc	r14, r10
    327e:	fb 04       	cpc	r15, r11
    3280:	08 f0       	brcs	.+2      	; 0x3284 <__moddi3+0x234>
    3282:	87 c0       	rjmp	.+270    	; 0x3392 <__moddi3+0x342>
    3284:	00 e0       	ldi	r16, 0x00	; 0
    3286:	80 16       	cp	r8, r16
    3288:	00 e0       	ldi	r16, 0x00	; 0
    328a:	90 06       	cpc	r9, r16
    328c:	01 e0       	ldi	r16, 0x01	; 1
    328e:	a0 06       	cpc	r10, r16
    3290:	00 e0       	ldi	r16, 0x00	; 0
    3292:	b0 06       	cpc	r11, r16
    3294:	58 f4       	brcc	.+22     	; 0x32ac <__moddi3+0x25c>
    3296:	1f ef       	ldi	r17, 0xFF	; 255
    3298:	81 16       	cp	r8, r17
    329a:	91 04       	cpc	r9, r1
    329c:	a1 04       	cpc	r10, r1
    329e:	b1 04       	cpc	r11, r1
    32a0:	09 f0       	breq	.+2      	; 0x32a4 <__moddi3+0x254>
    32a2:	90 f4       	brcc	.+36     	; 0x32c8 <__moddi3+0x278>
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	dc 01       	movw	r26, r24
    32aa:	17 c0       	rjmp	.+46     	; 0x32da <__moddi3+0x28a>
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	82 16       	cp	r8, r18
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	92 06       	cpc	r9, r18
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	a2 06       	cpc	r10, r18
    32b8:	21 e0       	ldi	r18, 0x01	; 1
    32ba:	b2 06       	cpc	r11, r18
    32bc:	50 f4       	brcc	.+20     	; 0x32d2 <__moddi3+0x282>
    32be:	80 e1       	ldi	r24, 0x10	; 16
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	a0 e0       	ldi	r26, 0x00	; 0
    32c4:	b0 e0       	ldi	r27, 0x00	; 0
    32c6:	09 c0       	rjmp	.+18     	; 0x32da <__moddi3+0x28a>
    32c8:	88 e0       	ldi	r24, 0x08	; 8
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	a0 e0       	ldi	r26, 0x00	; 0
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	04 c0       	rjmp	.+8      	; 0x32da <__moddi3+0x28a>
    32d2:	88 e1       	ldi	r24, 0x18	; 24
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	a0 e0       	ldi	r26, 0x00	; 0
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	b5 01       	movw	r22, r10
    32dc:	a4 01       	movw	r20, r8
    32de:	08 2e       	mov	r0, r24
    32e0:	04 c0       	rjmp	.+8      	; 0x32ea <__moddi3+0x29a>
    32e2:	76 95       	lsr	r23
    32e4:	67 95       	ror	r22
    32e6:	57 95       	ror	r21
    32e8:	47 95       	ror	r20
    32ea:	0a 94       	dec	r0
    32ec:	d2 f7       	brpl	.-12     	; 0x32e2 <__moddi3+0x292>
    32ee:	fa 01       	movw	r30, r20
    32f0:	e3 56       	subi	r30, 0x63	; 99
    32f2:	ff 4f       	sbci	r31, 0xFF	; 255
    32f4:	20 81       	ld	r18, Z
    32f6:	40 e2       	ldi	r20, 0x20	; 32
    32f8:	50 e0       	ldi	r21, 0x00	; 0
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	70 e0       	ldi	r23, 0x00	; 0
    32fe:	48 1b       	sub	r20, r24
    3300:	59 0b       	sbc	r21, r25
    3302:	6a 0b       	sbc	r22, r26
    3304:	7b 0b       	sbc	r23, r27
    3306:	42 1b       	sub	r20, r18
    3308:	51 09       	sbc	r21, r1
    330a:	61 09       	sbc	r22, r1
    330c:	71 09       	sbc	r23, r1
    330e:	4d a7       	lds	r20, 0x7d
    3310:	5e a7       	lds	r21, 0x7e
    3312:	6f a7       	lds	r22, 0x7f
    3314:	78 ab       	sts	0x58, r23
    3316:	41 15       	cp	r20, r1
    3318:	51 05       	cpc	r21, r1
    331a:	61 05       	cpc	r22, r1
    331c:	71 05       	cpc	r23, r1
    331e:	09 f4       	brne	.+2      	; 0x3322 <__moddi3+0x2d2>
    3320:	89 c1       	rjmp	.+786    	; 0x3634 <__moddi3+0x5e4>
    3322:	2d a5       	lds	r18, 0x6d
    3324:	02 2e       	mov	r0, r18
    3326:	04 c0       	rjmp	.+8      	; 0x3330 <__moddi3+0x2e0>
    3328:	88 0c       	add	r8, r8
    332a:	99 1c       	adc	r9, r9
    332c:	aa 1c       	adc	r10, r10
    332e:	bb 1c       	adc	r11, r11
    3330:	0a 94       	dec	r0
    3332:	d2 f7       	brpl	.-12     	; 0x3328 <__moddi3+0x2d8>
    3334:	b7 01       	movw	r22, r14
    3336:	a6 01       	movw	r20, r12
    3338:	02 2e       	mov	r0, r18
    333a:	04 c0       	rjmp	.+8      	; 0x3344 <__moddi3+0x2f4>
    333c:	44 0f       	add	r20, r20
    333e:	55 1f       	adc	r21, r21
    3340:	66 1f       	adc	r22, r22
    3342:	77 1f       	adc	r23, r23
    3344:	0a 94       	dec	r0
    3346:	d2 f7       	brpl	.-12     	; 0x333c <__moddi3+0x2ec>
    3348:	80 e2       	ldi	r24, 0x20	; 32
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	ad a5       	lds	r26, 0x6d
    334e:	be a5       	lds	r27, 0x6e
    3350:	8a 1b       	sub	r24, r26
    3352:	9b 0b       	sbc	r25, r27
    3354:	c9 a4       	lds	r28, 0xa9
    3356:	da a4       	lds	r29, 0xaa
    3358:	eb a4       	lds	r30, 0xab
    335a:	fc a4       	lds	r31, 0xac
    335c:	04 c0       	rjmp	.+8      	; 0x3366 <__moddi3+0x316>
    335e:	f6 94       	lsr	r15
    3360:	e7 94       	ror	r14
    3362:	d7 94       	ror	r13
    3364:	c7 94       	ror	r12
    3366:	8a 95       	dec	r24
    3368:	d2 f7       	brpl	.-12     	; 0x335e <__moddi3+0x30e>
    336a:	c4 2a       	or	r12, r20
    336c:	d5 2a       	or	r13, r21
    336e:	e6 2a       	or	r14, r22
    3370:	f7 2a       	or	r15, r23
    3372:	49 a5       	lds	r20, 0x69
    3374:	5a a5       	lds	r21, 0x6a
    3376:	6b a5       	lds	r22, 0x6b
    3378:	7c a5       	lds	r23, 0x6c
    337a:	04 c0       	rjmp	.+8      	; 0x3384 <__moddi3+0x334>
    337c:	44 0f       	add	r20, r20
    337e:	55 1f       	adc	r21, r21
    3380:	66 1f       	adc	r22, r22
    3382:	77 1f       	adc	r23, r23
    3384:	2a 95       	dec	r18
    3386:	d2 f7       	brpl	.-12     	; 0x337c <__moddi3+0x32c>
    3388:	49 a7       	lds	r20, 0x79
    338a:	5a a7       	lds	r21, 0x7a
    338c:	6b a7       	lds	r22, 0x7b
    338e:	7c a7       	lds	r23, 0x7c
    3390:	51 c1       	rjmp	.+674    	; 0x3634 <__moddi3+0x5e4>
    3392:	81 14       	cp	r8, r1
    3394:	91 04       	cpc	r9, r1
    3396:	a1 04       	cpc	r10, r1
    3398:	b1 04       	cpc	r11, r1
    339a:	51 f4       	brne	.+20     	; 0x33b0 <__moddi3+0x360>
    339c:	61 e0       	ldi	r22, 0x01	; 1
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	a5 01       	movw	r20, r10
    33a6:	94 01       	movw	r18, r8
    33a8:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    33ac:	49 01       	movw	r8, r18
    33ae:	5a 01       	movw	r10, r20
    33b0:	00 e0       	ldi	r16, 0x00	; 0
    33b2:	80 16       	cp	r8, r16
    33b4:	00 e0       	ldi	r16, 0x00	; 0
    33b6:	90 06       	cpc	r9, r16
    33b8:	01 e0       	ldi	r16, 0x01	; 1
    33ba:	a0 06       	cpc	r10, r16
    33bc:	00 e0       	ldi	r16, 0x00	; 0
    33be:	b0 06       	cpc	r11, r16
    33c0:	58 f4       	brcc	.+22     	; 0x33d8 <__moddi3+0x388>
    33c2:	1f ef       	ldi	r17, 0xFF	; 255
    33c4:	81 16       	cp	r8, r17
    33c6:	91 04       	cpc	r9, r1
    33c8:	a1 04       	cpc	r10, r1
    33ca:	b1 04       	cpc	r11, r1
    33cc:	09 f0       	breq	.+2      	; 0x33d0 <__moddi3+0x380>
    33ce:	90 f4       	brcc	.+36     	; 0x33f4 <__moddi3+0x3a4>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	dc 01       	movw	r26, r24
    33d6:	17 c0       	rjmp	.+46     	; 0x3406 <__moddi3+0x3b6>
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	82 16       	cp	r8, r18
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	92 06       	cpc	r9, r18
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	a2 06       	cpc	r10, r18
    33e4:	21 e0       	ldi	r18, 0x01	; 1
    33e6:	b2 06       	cpc	r11, r18
    33e8:	50 f4       	brcc	.+20     	; 0x33fe <__moddi3+0x3ae>
    33ea:	80 e1       	ldi	r24, 0x10	; 16
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	a0 e0       	ldi	r26, 0x00	; 0
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	09 c0       	rjmp	.+18     	; 0x3406 <__moddi3+0x3b6>
    33f4:	88 e0       	ldi	r24, 0x08	; 8
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	a0 e0       	ldi	r26, 0x00	; 0
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	04 c0       	rjmp	.+8      	; 0x3406 <__moddi3+0x3b6>
    33fe:	88 e1       	ldi	r24, 0x18	; 24
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	a0 e0       	ldi	r26, 0x00	; 0
    3404:	b0 e0       	ldi	r27, 0x00	; 0
    3406:	b5 01       	movw	r22, r10
    3408:	a4 01       	movw	r20, r8
    340a:	08 2e       	mov	r0, r24
    340c:	04 c0       	rjmp	.+8      	; 0x3416 <__moddi3+0x3c6>
    340e:	76 95       	lsr	r23
    3410:	67 95       	ror	r22
    3412:	57 95       	ror	r21
    3414:	47 95       	ror	r20
    3416:	0a 94       	dec	r0
    3418:	d2 f7       	brpl	.-12     	; 0x340e <__moddi3+0x3be>
    341a:	fa 01       	movw	r30, r20
    341c:	e3 56       	subi	r30, 0x63	; 99
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	20 81       	ld	r18, Z
    3422:	82 0f       	add	r24, r18
    3424:	91 1d       	adc	r25, r1
    3426:	a1 1d       	adc	r26, r1
    3428:	b1 1d       	adc	r27, r1
    342a:	00 e2       	ldi	r16, 0x20	; 32
    342c:	10 e0       	ldi	r17, 0x00	; 0
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	08 1b       	sub	r16, r24
    3434:	19 0b       	sbc	r17, r25
    3436:	2a 0b       	sbc	r18, r26
    3438:	3b 0b       	sbc	r19, r27
    343a:	0d a7       	lds	r16, 0x7d
    343c:	1e a7       	lds	r17, 0x7e
    343e:	2f a7       	lds	r18, 0x7f
    3440:	38 ab       	sts	0x58, r19
    3442:	01 15       	cp	r16, r1
    3444:	11 05       	cpc	r17, r1
    3446:	21 05       	cpc	r18, r1
    3448:	31 05       	cpc	r19, r1
    344a:	29 f4       	brne	.+10     	; 0x3456 <__moddi3+0x406>
    344c:	c8 18       	sub	r12, r8
    344e:	d9 08       	sbc	r13, r9
    3450:	ea 08       	sbc	r14, r10
    3452:	fb 08       	sbc	r15, r11
    3454:	ef c0       	rjmp	.+478    	; 0x3634 <__moddi3+0x5e4>
    3456:	2d a5       	lds	r18, 0x6d
    3458:	02 2e       	mov	r0, r18
    345a:	04 c0       	rjmp	.+8      	; 0x3464 <__moddi3+0x414>
    345c:	88 0c       	add	r8, r8
    345e:	99 1c       	adc	r9, r9
    3460:	aa 1c       	adc	r10, r10
    3462:	bb 1c       	adc	r11, r11
    3464:	0a 94       	dec	r0
    3466:	d2 f7       	brpl	.-12     	; 0x345c <__moddi3+0x40c>
    3468:	b7 01       	movw	r22, r14
    346a:	a6 01       	movw	r20, r12
    346c:	08 2e       	mov	r0, r24
    346e:	04 c0       	rjmp	.+8      	; 0x3478 <__moddi3+0x428>
    3470:	76 95       	lsr	r23
    3472:	67 95       	ror	r22
    3474:	57 95       	ror	r21
    3476:	47 95       	ror	r20
    3478:	0a 94       	dec	r0
    347a:	d2 f7       	brpl	.-12     	; 0x3470 <__moddi3+0x420>
    347c:	49 af       	sts	0x79, r20
    347e:	5a af       	sts	0x7a, r21
    3480:	6b af       	sts	0x7b, r22
    3482:	7c af       	sts	0x7c, r23
    3484:	b7 01       	movw	r22, r14
    3486:	a6 01       	movw	r20, r12
    3488:	02 2e       	mov	r0, r18
    348a:	04 c0       	rjmp	.+8      	; 0x3494 <__moddi3+0x444>
    348c:	44 0f       	add	r20, r20
    348e:	55 1f       	adc	r21, r21
    3490:	66 1f       	adc	r22, r22
    3492:	77 1f       	adc	r23, r23
    3494:	0a 94       	dec	r0
    3496:	d2 f7       	brpl	.-12     	; 0x348c <__moddi3+0x43c>
    3498:	c9 a4       	lds	r28, 0xa9
    349a:	da a4       	lds	r29, 0xaa
    349c:	eb a4       	lds	r30, 0xab
    349e:	fc a4       	lds	r31, 0xac
    34a0:	04 c0       	rjmp	.+8      	; 0x34aa <__moddi3+0x45a>
    34a2:	f6 94       	lsr	r15
    34a4:	e7 94       	ror	r14
    34a6:	d7 94       	ror	r13
    34a8:	c7 94       	ror	r12
    34aa:	8a 95       	dec	r24
    34ac:	d2 f7       	brpl	.-12     	; 0x34a2 <__moddi3+0x452>
    34ae:	4c 29       	or	r20, r12
    34b0:	5d 29       	or	r21, r13
    34b2:	6e 29       	or	r22, r14
    34b4:	7f 29       	or	r23, r15
    34b6:	49 ab       	sts	0x59, r20
    34b8:	5a ab       	sts	0x5a, r21
    34ba:	6b ab       	sts	0x5b, r22
    34bc:	7c ab       	sts	0x5c, r23
    34be:	e9 a4       	lds	r30, 0xa9
    34c0:	fa a4       	lds	r31, 0xaa
    34c2:	0b a5       	lds	r16, 0x6b
    34c4:	1c a5       	lds	r17, 0x6c
    34c6:	04 c0       	rjmp	.+8      	; 0x34d0 <__moddi3+0x480>
    34c8:	ee 0c       	add	r14, r14
    34ca:	ff 1c       	adc	r15, r15
    34cc:	00 1f       	adc	r16, r16
    34ce:	11 1f       	adc	r17, r17
    34d0:	2a 95       	dec	r18
    34d2:	d2 f7       	brpl	.-12     	; 0x34c8 <__moddi3+0x478>
    34d4:	e9 a6       	lds	r30, 0xb9
    34d6:	fa a6       	lds	r31, 0xba
    34d8:	0b a7       	lds	r16, 0x7b
    34da:	1c a7       	lds	r17, 0x7c
    34dc:	25 01       	movw	r4, r10
    34de:	66 24       	eor	r6, r6
    34e0:	77 24       	eor	r7, r7
    34e2:	95 01       	movw	r18, r10
    34e4:	84 01       	movw	r16, r8
    34e6:	20 70       	andi	r18, 0x00	; 0
    34e8:	30 70       	andi	r19, 0x00	; 0
    34ea:	0d ab       	sts	0x5d, r16
    34ec:	1e ab       	sts	0x5e, r17
    34ee:	2f ab       	sts	0x5f, r18
    34f0:	38 af       	sts	0x78, r19
    34f2:	69 ad       	sts	0x69, r22
    34f4:	7a ad       	sts	0x6a, r23
    34f6:	8b ad       	sts	0x6b, r24
    34f8:	9c ad       	sts	0x6c, r25
    34fa:	a3 01       	movw	r20, r6
    34fc:	92 01       	movw	r18, r4
    34fe:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    3502:	02 2f       	mov	r16, r18
    3504:	c3 2e       	mov	r12, r19
    3506:	14 2f       	mov	r17, r20
    3508:	f5 2e       	mov	r15, r21
    350a:	21 96       	adiw	r28, 0x01	; 1
    350c:	6c af       	sts	0x7c, r22
    350e:	7d af       	sts	0x7d, r23
    3510:	8e af       	sts	0x7e, r24
    3512:	9f af       	sts	0x7f, r25
    3514:	21 97       	sbiw	r28, 0x01	; 1
    3516:	69 ad       	sts	0x69, r22
    3518:	7a ad       	sts	0x6a, r23
    351a:	8b ad       	sts	0x6b, r24
    351c:	9c ad       	sts	0x6c, r25
    351e:	a3 01       	movw	r20, r6
    3520:	92 01       	movw	r18, r4
    3522:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    3526:	60 2f       	mov	r22, r16
    3528:	7c 2d       	mov	r23, r12
    352a:	81 2f       	mov	r24, r17
    352c:	9f 2d       	mov	r25, r15
    352e:	2d a9       	sts	0x4d, r18
    3530:	3e a9       	sts	0x4e, r19
    3532:	4f a9       	sts	0x4f, r20
    3534:	58 ad       	sts	0x68, r21
    3536:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	21 96       	adiw	r28, 0x01	; 1
    3540:	0c ad       	sts	0x6c, r16
    3542:	1d ad       	sts	0x6d, r17
    3544:	2e ad       	sts	0x6e, r18
    3546:	3f ad       	sts	0x6f, r19
    3548:	21 97       	sbiw	r28, 0x01	; 1
    354a:	78 01       	movw	r14, r16
    354c:	dd 24       	eor	r13, r13
    354e:	cc 24       	eor	r12, r12
    3550:	09 a9       	sts	0x49, r16
    3552:	1a a9       	sts	0x4a, r17
    3554:	2b a9       	sts	0x4b, r18
    3556:	3c a9       	sts	0x4c, r19
    3558:	a9 01       	movw	r20, r18
    355a:	66 27       	eor	r22, r22
    355c:	77 27       	eor	r23, r23
    355e:	c4 2a       	or	r12, r20
    3560:	d5 2a       	or	r13, r21
    3562:	e6 2a       	or	r14, r22
    3564:	f7 2a       	or	r15, r23
    3566:	c8 16       	cp	r12, r24
    3568:	d9 06       	cpc	r13, r25
    356a:	ea 06       	cpc	r14, r26
    356c:	fb 06       	cpc	r15, r27
    356e:	90 f4       	brcc	.+36     	; 0x3594 <__moddi3+0x544>
    3570:	c8 0c       	add	r12, r8
    3572:	d9 1c       	adc	r13, r9
    3574:	ea 1c       	adc	r14, r10
    3576:	fb 1c       	adc	r15, r11
    3578:	c8 14       	cp	r12, r8
    357a:	d9 04       	cpc	r13, r9
    357c:	ea 04       	cpc	r14, r10
    357e:	fb 04       	cpc	r15, r11
    3580:	48 f0       	brcs	.+18     	; 0x3594 <__moddi3+0x544>
    3582:	c8 16       	cp	r12, r24
    3584:	d9 06       	cpc	r13, r25
    3586:	ea 06       	cpc	r14, r26
    3588:	fb 06       	cpc	r15, r27
    358a:	20 f4       	brcc	.+8      	; 0x3594 <__moddi3+0x544>
    358c:	c8 0c       	add	r12, r8
    358e:	d9 1c       	adc	r13, r9
    3590:	ea 1c       	adc	r14, r10
    3592:	fb 1c       	adc	r15, r11
    3594:	c8 1a       	sub	r12, r24
    3596:	d9 0a       	sbc	r13, r25
    3598:	ea 0a       	sbc	r14, r26
    359a:	fb 0a       	sbc	r15, r27
    359c:	c7 01       	movw	r24, r14
    359e:	b6 01       	movw	r22, r12
    35a0:	a3 01       	movw	r20, r6
    35a2:	92 01       	movw	r18, r4
    35a4:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    35a8:	12 2f       	mov	r17, r18
    35aa:	03 2f       	mov	r16, r19
    35ac:	34 2e       	mov	r3, r20
    35ae:	25 2e       	mov	r2, r21
    35b0:	69 af       	sts	0x79, r22
    35b2:	7a af       	sts	0x7a, r23
    35b4:	8b af       	sts	0x7b, r24
    35b6:	9c af       	sts	0x7c, r25
    35b8:	c7 01       	movw	r24, r14
    35ba:	b6 01       	movw	r22, r12
    35bc:	a3 01       	movw	r20, r6
    35be:	92 01       	movw	r18, r4
    35c0:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    35c4:	61 2f       	mov	r22, r17
    35c6:	70 2f       	mov	r23, r16
    35c8:	83 2d       	mov	r24, r3
    35ca:	92 2d       	mov	r25, r2
    35cc:	2d a9       	sts	0x4d, r18
    35ce:	3e a9       	sts	0x4e, r19
    35d0:	4f a9       	sts	0x4f, r20
    35d2:	58 ad       	sts	0x68, r21
    35d4:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	09 ad       	sts	0x69, r16
    35de:	1a ad       	sts	0x6a, r17
    35e0:	2b ad       	sts	0x6b, r18
    35e2:	3c ad       	sts	0x6c, r19
    35e4:	78 01       	movw	r14, r16
    35e6:	dd 24       	eor	r13, r13
    35e8:	cc 24       	eor	r12, r12
    35ea:	49 a9       	sts	0x49, r20
    35ec:	5a a9       	sts	0x4a, r21
    35ee:	6b a9       	sts	0x4b, r22
    35f0:	7c a9       	sts	0x4c, r23
    35f2:	60 70       	andi	r22, 0x00	; 0
    35f4:	70 70       	andi	r23, 0x00	; 0
    35f6:	c4 2a       	or	r12, r20
    35f8:	d5 2a       	or	r13, r21
    35fa:	e6 2a       	or	r14, r22
    35fc:	f7 2a       	or	r15, r23
    35fe:	c8 16       	cp	r12, r24
    3600:	d9 06       	cpc	r13, r25
    3602:	ea 06       	cpc	r14, r26
    3604:	fb 06       	cpc	r15, r27
    3606:	90 f4       	brcc	.+36     	; 0x362c <__moddi3+0x5dc>
    3608:	c8 0c       	add	r12, r8
    360a:	d9 1c       	adc	r13, r9
    360c:	ea 1c       	adc	r14, r10
    360e:	fb 1c       	adc	r15, r11
    3610:	c8 14       	cp	r12, r8
    3612:	d9 04       	cpc	r13, r9
    3614:	ea 04       	cpc	r14, r10
    3616:	fb 04       	cpc	r15, r11
    3618:	48 f0       	brcs	.+18     	; 0x362c <__moddi3+0x5dc>
    361a:	c8 16       	cp	r12, r24
    361c:	d9 06       	cpc	r13, r25
    361e:	ea 06       	cpc	r14, r26
    3620:	fb 06       	cpc	r15, r27
    3622:	20 f4       	brcc	.+8      	; 0x362c <__moddi3+0x5dc>
    3624:	c8 0c       	add	r12, r8
    3626:	d9 1c       	adc	r13, r9
    3628:	ea 1c       	adc	r14, r10
    362a:	fb 1c       	adc	r15, r11
    362c:	c8 1a       	sub	r12, r24
    362e:	d9 0a       	sbc	r13, r25
    3630:	ea 0a       	sbc	r14, r26
    3632:	fb 0a       	sbc	r15, r27
    3634:	85 01       	movw	r16, r10
    3636:	22 27       	eor	r18, r18
    3638:	33 27       	eor	r19, r19
    363a:	09 ab       	sts	0x59, r16
    363c:	1a ab       	sts	0x5a, r17
    363e:	2b ab       	sts	0x5b, r18
    3640:	3c ab       	sts	0x5c, r19
    3642:	95 01       	movw	r18, r10
    3644:	84 01       	movw	r16, r8
    3646:	20 70       	andi	r18, 0x00	; 0
    3648:	30 70       	andi	r19, 0x00	; 0
    364a:	09 af       	sts	0x79, r16
    364c:	1a af       	sts	0x7a, r17
    364e:	2b af       	sts	0x7b, r18
    3650:	3c af       	sts	0x7c, r19
    3652:	c7 01       	movw	r24, r14
    3654:	b6 01       	movw	r22, r12
    3656:	29 a9       	sts	0x49, r18
    3658:	3a a9       	sts	0x4a, r19
    365a:	4b a9       	sts	0x4b, r20
    365c:	5c a9       	sts	0x4c, r21
    365e:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    3662:	12 2f       	mov	r17, r18
    3664:	03 2f       	mov	r16, r19
    3666:	44 2e       	mov	r4, r20
    3668:	75 2e       	mov	r7, r21
    366a:	6d ab       	sts	0x5d, r22
    366c:	7e ab       	sts	0x5e, r23
    366e:	8f ab       	sts	0x5f, r24
    3670:	98 af       	sts	0x78, r25
    3672:	c7 01       	movw	r24, r14
    3674:	b6 01       	movw	r22, r12
    3676:	29 a9       	sts	0x49, r18
    3678:	3a a9       	sts	0x4a, r19
    367a:	4b a9       	sts	0x4b, r20
    367c:	5c a9       	sts	0x4c, r21
    367e:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    3682:	61 2f       	mov	r22, r17
    3684:	70 2f       	mov	r23, r16
    3686:	84 2d       	mov	r24, r4
    3688:	97 2d       	mov	r25, r7
    368a:	29 ad       	sts	0x69, r18
    368c:	3a ad       	sts	0x6a, r19
    368e:	4b ad       	sts	0x6b, r20
    3690:	5c ad       	sts	0x6c, r21
    3692:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	0d a9       	sts	0x4d, r16
    369c:	1e a9       	sts	0x4e, r17
    369e:	2f a9       	sts	0x4f, r18
    36a0:	38 ad       	sts	0x68, r19
    36a2:	78 01       	movw	r14, r16
    36a4:	dd 24       	eor	r13, r13
    36a6:	cc 24       	eor	r12, r12
    36a8:	09 a5       	lds	r16, 0x69
    36aa:	1a a5       	lds	r17, 0x6a
    36ac:	2b a5       	lds	r18, 0x6b
    36ae:	3c a5       	lds	r19, 0x6c
    36b0:	a9 01       	movw	r20, r18
    36b2:	66 27       	eor	r22, r22
    36b4:	77 27       	eor	r23, r23
    36b6:	c4 2a       	or	r12, r20
    36b8:	d5 2a       	or	r13, r21
    36ba:	e6 2a       	or	r14, r22
    36bc:	f7 2a       	or	r15, r23
    36be:	c8 16       	cp	r12, r24
    36c0:	d9 06       	cpc	r13, r25
    36c2:	ea 06       	cpc	r14, r26
    36c4:	fb 06       	cpc	r15, r27
    36c6:	90 f4       	brcc	.+36     	; 0x36ec <__moddi3+0x69c>
    36c8:	c8 0c       	add	r12, r8
    36ca:	d9 1c       	adc	r13, r9
    36cc:	ea 1c       	adc	r14, r10
    36ce:	fb 1c       	adc	r15, r11
    36d0:	c8 14       	cp	r12, r8
    36d2:	d9 04       	cpc	r13, r9
    36d4:	ea 04       	cpc	r14, r10
    36d6:	fb 04       	cpc	r15, r11
    36d8:	48 f0       	brcs	.+18     	; 0x36ec <__moddi3+0x69c>
    36da:	c8 16       	cp	r12, r24
    36dc:	d9 06       	cpc	r13, r25
    36de:	ea 06       	cpc	r14, r26
    36e0:	fb 06       	cpc	r15, r27
    36e2:	20 f4       	brcc	.+8      	; 0x36ec <__moddi3+0x69c>
    36e4:	c8 0c       	add	r12, r8
    36e6:	d9 1c       	adc	r13, r9
    36e8:	ea 1c       	adc	r14, r10
    36ea:	fb 1c       	adc	r15, r11
    36ec:	c8 1a       	sub	r12, r24
    36ee:	d9 0a       	sbc	r13, r25
    36f0:	ea 0a       	sbc	r14, r26
    36f2:	fb 0a       	sbc	r15, r27
    36f4:	c7 01       	movw	r24, r14
    36f6:	b6 01       	movw	r22, r12
    36f8:	29 a9       	sts	0x49, r18
    36fa:	3a a9       	sts	0x4a, r19
    36fc:	4b a9       	sts	0x4b, r20
    36fe:	5c a9       	sts	0x4c, r21
    3700:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    3704:	12 2f       	mov	r17, r18
    3706:	03 2f       	mov	r16, r19
    3708:	44 2e       	mov	r4, r20
    370a:	75 2e       	mov	r7, r21
    370c:	6d ab       	sts	0x5d, r22
    370e:	7e ab       	sts	0x5e, r23
    3710:	8f ab       	sts	0x5f, r24
    3712:	98 af       	sts	0x78, r25
    3714:	c7 01       	movw	r24, r14
    3716:	b6 01       	movw	r22, r12
    3718:	29 a9       	sts	0x49, r18
    371a:	3a a9       	sts	0x4a, r19
    371c:	4b a9       	sts	0x4b, r20
    371e:	5c a9       	sts	0x4c, r21
    3720:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    3724:	61 2f       	mov	r22, r17
    3726:	70 2f       	mov	r23, r16
    3728:	84 2d       	mov	r24, r4
    372a:	97 2d       	mov	r25, r7
    372c:	29 ad       	sts	0x69, r18
    372e:	3a ad       	sts	0x6a, r19
    3730:	4b ad       	sts	0x6b, r20
    3732:	5c ad       	sts	0x6c, r21
    3734:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    3738:	ab 01       	movw	r20, r22
    373a:	bc 01       	movw	r22, r24
    373c:	cd a8       	sts	0x8d, r28
    373e:	de a8       	sts	0x8e, r29
    3740:	ef a8       	sts	0x8f, r30
    3742:	f8 ac       	sts	0xa8, r31
    3744:	d6 01       	movw	r26, r12
    3746:	99 27       	eor	r25, r25
    3748:	88 27       	eor	r24, r24
    374a:	09 a5       	lds	r16, 0x69
    374c:	1a a5       	lds	r17, 0x6a
    374e:	2b a5       	lds	r18, 0x6b
    3750:	3c a5       	lds	r19, 0x6c
    3752:	20 70       	andi	r18, 0x00	; 0
    3754:	30 70       	andi	r19, 0x00	; 0
    3756:	80 2b       	or	r24, r16
    3758:	91 2b       	or	r25, r17
    375a:	a2 2b       	or	r26, r18
    375c:	b3 2b       	or	r27, r19
    375e:	84 17       	cp	r24, r20
    3760:	95 07       	cpc	r25, r21
    3762:	a6 07       	cpc	r26, r22
    3764:	b7 07       	cpc	r27, r23
    3766:	90 f4       	brcc	.+36     	; 0x378c <__moddi3+0x73c>
    3768:	88 0d       	add	r24, r8
    376a:	99 1d       	adc	r25, r9
    376c:	aa 1d       	adc	r26, r10
    376e:	bb 1d       	adc	r27, r11
    3770:	88 15       	cp	r24, r8
    3772:	99 05       	cpc	r25, r9
    3774:	aa 05       	cpc	r26, r10
    3776:	bb 05       	cpc	r27, r11
    3778:	48 f0       	brcs	.+18     	; 0x378c <__moddi3+0x73c>
    377a:	84 17       	cp	r24, r20
    377c:	95 07       	cpc	r25, r21
    377e:	a6 07       	cpc	r26, r22
    3780:	b7 07       	cpc	r27, r23
    3782:	20 f4       	brcc	.+8      	; 0x378c <__moddi3+0x73c>
    3784:	88 0d       	add	r24, r8
    3786:	99 1d       	adc	r25, r9
    3788:	aa 1d       	adc	r26, r10
    378a:	bb 1d       	adc	r27, r11
    378c:	84 1b       	sub	r24, r20
    378e:	95 0b       	sbc	r25, r21
    3790:	a6 0b       	sbc	r26, r22
    3792:	b7 0b       	sbc	r27, r23
    3794:	8c 01       	movw	r16, r24
    3796:	9d 01       	movw	r18, r26
    3798:	0d a4       	lds	r16, 0xad
    379a:	04 c0       	rjmp	.+8      	; 0x37a4 <__moddi3+0x754>
    379c:	36 95       	lsr	r19
    379e:	27 95       	ror	r18
    37a0:	17 95       	ror	r17
    37a2:	07 95       	ror	r16
    37a4:	0a 94       	dec	r0
    37a6:	d2 f7       	brpl	.-12     	; 0x379c <__moddi3+0x74c>
    37a8:	09 83       	std	Y+1, r16	; 0x01
    37aa:	1a 83       	std	Y+2, r17	; 0x02
    37ac:	2b 83       	std	Y+3, r18	; 0x03
    37ae:	3c 83       	std	Y+4, r19	; 0x04
    37b0:	1d 82       	std	Y+5, r1	; 0x05
    37b2:	1e 82       	std	Y+6, r1	; 0x06
    37b4:	1f 82       	std	Y+7, r1	; 0x07
    37b6:	18 86       	std	Y+8, r1	; 0x08
    37b8:	3a 81       	ldd	r19, Y+2	; 0x02
    37ba:	4b 81       	ldd	r20, Y+3	; 0x03
    37bc:	5c 81       	ldd	r21, Y+4	; 0x04
    37be:	60 e0       	ldi	r22, 0x00	; 0
    37c0:	f4 c2       	rjmp	.+1512   	; 0x3daa <__moddi3+0xd5a>
    37c2:	c0 16       	cp	r12, r16
    37c4:	d1 06       	cpc	r13, r17
    37c6:	e2 06       	cpc	r14, r18
    37c8:	f3 06       	cpc	r15, r19
    37ca:	18 f4       	brcc	.+6      	; 0x37d2 <__moddi3+0x782>
    37cc:	0f 2f       	mov	r16, r31
    37ce:	3e 2f       	mov	r19, r30
    37d0:	ef c2       	rjmp	.+1502   	; 0x3db0 <__moddi3+0xd60>
    37d2:	00 30       	cpi	r16, 0x00	; 0
    37d4:	40 e0       	ldi	r20, 0x00	; 0
    37d6:	14 07       	cpc	r17, r20
    37d8:	41 e0       	ldi	r20, 0x01	; 1
    37da:	24 07       	cpc	r18, r20
    37dc:	40 e0       	ldi	r20, 0x00	; 0
    37de:	34 07       	cpc	r19, r20
    37e0:	50 f4       	brcc	.+20     	; 0x37f6 <__moddi3+0x7a6>
    37e2:	0f 3f       	cpi	r16, 0xFF	; 255
    37e4:	11 05       	cpc	r17, r1
    37e6:	21 05       	cpc	r18, r1
    37e8:	31 05       	cpc	r19, r1
    37ea:	09 f0       	breq	.+2      	; 0x37ee <__moddi3+0x79e>
    37ec:	88 f4       	brcc	.+34     	; 0x3810 <__moddi3+0x7c0>
    37ee:	40 e0       	ldi	r20, 0x00	; 0
    37f0:	50 e0       	ldi	r21, 0x00	; 0
    37f2:	ba 01       	movw	r22, r20
    37f4:	16 c0       	rjmp	.+44     	; 0x3822 <__moddi3+0x7d2>
    37f6:	00 30       	cpi	r16, 0x00	; 0
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	15 07       	cpc	r17, r21
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	25 07       	cpc	r18, r21
    3800:	51 e0       	ldi	r21, 0x01	; 1
    3802:	35 07       	cpc	r19, r21
    3804:	50 f4       	brcc	.+20     	; 0x381a <__moddi3+0x7ca>
    3806:	40 e1       	ldi	r20, 0x10	; 16
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	60 e0       	ldi	r22, 0x00	; 0
    380c:	70 e0       	ldi	r23, 0x00	; 0
    380e:	09 c0       	rjmp	.+18     	; 0x3822 <__moddi3+0x7d2>
    3810:	48 e0       	ldi	r20, 0x08	; 8
    3812:	50 e0       	ldi	r21, 0x00	; 0
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	70 e0       	ldi	r23, 0x00	; 0
    3818:	04 c0       	rjmp	.+8      	; 0x3822 <__moddi3+0x7d2>
    381a:	48 e1       	ldi	r20, 0x18	; 24
    381c:	50 e0       	ldi	r21, 0x00	; 0
    381e:	60 e0       	ldi	r22, 0x00	; 0
    3820:	70 e0       	ldi	r23, 0x00	; 0
    3822:	d9 01       	movw	r26, r18
    3824:	c8 01       	movw	r24, r16
    3826:	04 2e       	mov	r0, r20
    3828:	04 c0       	rjmp	.+8      	; 0x3832 <__moddi3+0x7e2>
    382a:	b6 95       	lsr	r27
    382c:	a7 95       	ror	r26
    382e:	97 95       	ror	r25
    3830:	87 95       	ror	r24
    3832:	0a 94       	dec	r0
    3834:	d2 f7       	brpl	.-12     	; 0x382a <__moddi3+0x7da>
    3836:	fc 01       	movw	r30, r24
    3838:	e3 56       	subi	r30, 0x63	; 99
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	80 81       	ld	r24, Z
    383e:	48 0f       	add	r20, r24
    3840:	51 1d       	adc	r21, r1
    3842:	61 1d       	adc	r22, r1
    3844:	71 1d       	adc	r23, r1
    3846:	80 e2       	ldi	r24, 0x20	; 32
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	a0 e0       	ldi	r26, 0x00	; 0
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	84 1b       	sub	r24, r20
    3850:	95 0b       	sbc	r25, r21
    3852:	a6 0b       	sbc	r26, r22
    3854:	b7 0b       	sbc	r27, r23
    3856:	09 f0       	breq	.+2      	; 0x385a <__moddi3+0x80a>
    3858:	40 c0       	rjmp	.+128    	; 0x38da <__moddi3+0x88a>
    385a:	0c 15       	cp	r16, r12
    385c:	1d 05       	cpc	r17, r13
    385e:	2e 05       	cpc	r18, r14
    3860:	3f 05       	cpc	r19, r15
    3862:	48 f0       	brcs	.+18     	; 0x3876 <__moddi3+0x826>
    3864:	69 a5       	lds	r22, 0x69
    3866:	7a a5       	lds	r23, 0x6a
    3868:	8b a5       	lds	r24, 0x6b
    386a:	9c a5       	lds	r25, 0x6c
    386c:	68 15       	cp	r22, r8
    386e:	79 05       	cpc	r23, r9
    3870:	8a 05       	cpc	r24, r10
    3872:	9b 05       	cpc	r25, r11
    3874:	20 f1       	brcs	.+72     	; 0x38be <__moddi3+0x86e>
    3876:	89 a5       	lds	r24, 0x69
    3878:	9a a5       	lds	r25, 0x6a
    387a:	ab a5       	lds	r26, 0x6b
    387c:	bc a5       	lds	r27, 0x6c
    387e:	88 19       	sub	r24, r8
    3880:	99 09       	sbc	r25, r9
    3882:	aa 09       	sbc	r26, r10
    3884:	bb 09       	sbc	r27, r11
    3886:	c0 1a       	sub	r12, r16
    3888:	d1 0a       	sbc	r13, r17
    388a:	e2 0a       	sbc	r14, r18
    388c:	f3 0a       	sbc	r15, r19
    388e:	41 e0       	ldi	r20, 0x01	; 1
    3890:	50 e0       	ldi	r21, 0x00	; 0
    3892:	60 e0       	ldi	r22, 0x00	; 0
    3894:	70 e0       	ldi	r23, 0x00	; 0
    3896:	89 a4       	lds	r24, 0xa9
    3898:	9a a4       	lds	r25, 0xaa
    389a:	ab a4       	lds	r26, 0xab
    389c:	bc a4       	lds	r27, 0xac
    389e:	88 16       	cp	r8, r24
    38a0:	99 06       	cpc	r9, r25
    38a2:	aa 06       	cpc	r10, r26
    38a4:	bb 06       	cpc	r11, r27
    38a6:	18 f0       	brcs	.+6      	; 0x38ae <__moddi3+0x85e>
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	50 e0       	ldi	r21, 0x00	; 0
    38ac:	ba 01       	movw	r22, r20
    38ae:	c4 1a       	sub	r12, r20
    38b0:	d5 0a       	sbc	r13, r21
    38b2:	e6 0a       	sbc	r14, r22
    38b4:	f7 0a       	sbc	r15, r23
    38b6:	89 a7       	lds	r24, 0x79
    38b8:	9a a7       	lds	r25, 0x7a
    38ba:	ab a7       	lds	r26, 0x7b
    38bc:	bc a7       	lds	r27, 0x7c
    38be:	09 a5       	lds	r16, 0x69
    38c0:	1a a5       	lds	r17, 0x6a
    38c2:	2b a5       	lds	r18, 0x6b
    38c4:	3c a5       	lds	r19, 0x6c
    38c6:	09 83       	std	Y+1, r16	; 0x01
    38c8:	1a 83       	std	Y+2, r17	; 0x02
    38ca:	2b 83       	std	Y+3, r18	; 0x03
    38cc:	3c 83       	std	Y+4, r19	; 0x04
    38ce:	cd 82       	std	Y+5, r12	; 0x05
    38d0:	de 82       	std	Y+6, r13	; 0x06
    38d2:	ef 82       	std	Y+7, r14	; 0x07
    38d4:	f8 86       	std	Y+8, r15	; 0x08
    38d6:	09 a5       	lds	r16, 0x69
    38d8:	64 c2       	rjmp	.+1224   	; 0x3da2 <__moddi3+0xd52>
    38da:	38 2e       	mov	r3, r24
    38dc:	d9 01       	movw	r26, r18
    38de:	c8 01       	movw	r24, r16
    38e0:	03 2c       	mov	r0, r3
    38e2:	04 c0       	rjmp	.+8      	; 0x38ec <__moddi3+0x89c>
    38e4:	88 0f       	add	r24, r24
    38e6:	99 1f       	adc	r25, r25
    38e8:	aa 1f       	adc	r26, r26
    38ea:	bb 1f       	adc	r27, r27
    38ec:	0a 94       	dec	r0
    38ee:	d2 f7       	brpl	.-12     	; 0x38e4 <__moddi3+0x894>
    38f0:	8d a7       	lds	r24, 0x7d
    38f2:	9e a7       	lds	r25, 0x7e
    38f4:	af a7       	lds	r26, 0x7f
    38f6:	b8 ab       	sts	0x58, r27
    38f8:	24 2e       	mov	r2, r20
    38fa:	d5 01       	movw	r26, r10
    38fc:	c4 01       	movw	r24, r8
    38fe:	04 2e       	mov	r0, r20
    3900:	04 c0       	rjmp	.+8      	; 0x390a <__moddi3+0x8ba>
    3902:	b6 95       	lsr	r27
    3904:	a7 95       	ror	r26
    3906:	97 95       	ror	r25
    3908:	87 95       	ror	r24
    390a:	0a 94       	dec	r0
    390c:	d2 f7       	brpl	.-12     	; 0x3902 <__moddi3+0x8b2>
    390e:	0d a5       	lds	r16, 0x6d
    3910:	1e a5       	lds	r17, 0x6e
    3912:	2f a5       	lds	r18, 0x6f
    3914:	38 a9       	sts	0x48, r19
    3916:	08 2b       	or	r16, r24
    3918:	19 2b       	or	r17, r25
    391a:	2a 2b       	or	r18, r26
    391c:	3b 2b       	or	r19, r27
    391e:	0d a7       	lds	r16, 0x7d
    3920:	1e a7       	lds	r17, 0x7e
    3922:	2f a7       	lds	r18, 0x7f
    3924:	38 ab       	sts	0x58, r19
    3926:	95 01       	movw	r18, r10
    3928:	84 01       	movw	r16, r8
    392a:	03 2c       	mov	r0, r3
    392c:	04 c0       	rjmp	.+8      	; 0x3936 <__moddi3+0x8e6>
    392e:	00 0f       	add	r16, r16
    3930:	11 1f       	adc	r17, r17
    3932:	22 1f       	adc	r18, r18
    3934:	33 1f       	adc	r19, r19
    3936:	0a 94       	dec	r0
    3938:	d2 f7       	brpl	.-12     	; 0x392e <__moddi3+0x8de>
    393a:	09 af       	sts	0x79, r16
    393c:	1a af       	sts	0x7a, r17
    393e:	2b af       	sts	0x7b, r18
    3940:	3c af       	sts	0x7c, r19
    3942:	46 01       	movw	r8, r12
    3944:	57 01       	movw	r10, r14
    3946:	04 2e       	mov	r0, r20
    3948:	04 c0       	rjmp	.+8      	; 0x3952 <__moddi3+0x902>
    394a:	b6 94       	lsr	r11
    394c:	a7 94       	ror	r10
    394e:	97 94       	ror	r9
    3950:	87 94       	ror	r8
    3952:	0a 94       	dec	r0
    3954:	d2 f7       	brpl	.-12     	; 0x394a <__moddi3+0x8fa>
    3956:	8d aa       	sts	0x9d, r24
    3958:	9e aa       	sts	0x9e, r25
    395a:	af aa       	sts	0x9f, r26
    395c:	b8 ae       	sts	0xb8, r27
    395e:	97 01       	movw	r18, r14
    3960:	86 01       	movw	r16, r12
    3962:	03 2c       	mov	r0, r3
    3964:	04 c0       	rjmp	.+8      	; 0x396e <__moddi3+0x91e>
    3966:	00 0f       	add	r16, r16
    3968:	11 1f       	adc	r17, r17
    396a:	22 1f       	adc	r18, r18
    396c:	33 1f       	adc	r19, r19
    396e:	0a 94       	dec	r0
    3970:	d2 f7       	brpl	.-12     	; 0x3966 <__moddi3+0x916>
    3972:	89 a5       	lds	r24, 0x69
    3974:	9a a5       	lds	r25, 0x6a
    3976:	ab a5       	lds	r26, 0x6b
    3978:	bc a5       	lds	r27, 0x6c
    397a:	04 c0       	rjmp	.+8      	; 0x3984 <__moddi3+0x934>
    397c:	b6 95       	lsr	r27
    397e:	a7 95       	ror	r26
    3980:	97 95       	ror	r25
    3982:	87 95       	ror	r24
    3984:	4a 95       	dec	r20
    3986:	d2 f7       	brpl	.-12     	; 0x397c <__moddi3+0x92c>
    3988:	08 2b       	or	r16, r24
    398a:	19 2b       	or	r17, r25
    398c:	2a 2b       	or	r18, r26
    398e:	3b 2b       	or	r19, r27
    3990:	09 ab       	sts	0x59, r16
    3992:	1a ab       	sts	0x5a, r17
    3994:	2b ab       	sts	0x5b, r18
    3996:	3c ab       	sts	0x5c, r19
    3998:	89 a4       	lds	r24, 0xa9
    399a:	9a a4       	lds	r25, 0xaa
    399c:	ab a4       	lds	r26, 0xab
    399e:	bc a4       	lds	r27, 0xac
    39a0:	03 2c       	mov	r0, r3
    39a2:	04 c0       	rjmp	.+8      	; 0x39ac <__moddi3+0x95c>
    39a4:	88 0c       	add	r8, r8
    39a6:	99 1c       	adc	r9, r9
    39a8:	aa 1c       	adc	r10, r10
    39aa:	bb 1c       	adc	r11, r11
    39ac:	0a 94       	dec	r0
    39ae:	d2 f7       	brpl	.-12     	; 0x39a4 <__moddi3+0x954>
    39b0:	89 a6       	lds	r24, 0xb9
    39b2:	9a a6       	lds	r25, 0xba
    39b4:	ab a6       	lds	r26, 0xbb
    39b6:	bc a6       	lds	r27, 0xbc
    39b8:	cd a4       	lds	r28, 0xad
    39ba:	de a4       	lds	r29, 0xae
    39bc:	ef a4       	lds	r30, 0xaf
    39be:	f8 a8       	sts	0x88, r31
    39c0:	47 01       	movw	r8, r14
    39c2:	aa 24       	eor	r10, r10
    39c4:	bb 24       	eor	r11, r11
    39c6:	97 01       	movw	r18, r14
    39c8:	86 01       	movw	r16, r12
    39ca:	20 70       	andi	r18, 0x00	; 0
    39cc:	30 70       	andi	r19, 0x00	; 0
    39ce:	21 96       	adiw	r28, 0x01	; 1
    39d0:	0c af       	sts	0x7c, r16
    39d2:	1d af       	sts	0x7d, r17
    39d4:	2e af       	sts	0x7e, r18
    39d6:	3f af       	sts	0x7f, r19
    39d8:	21 97       	sbiw	r28, 0x01	; 1
    39da:	6d a9       	sts	0x4d, r22
    39dc:	7e a9       	sts	0x4e, r23
    39de:	8f a9       	sts	0x4f, r24
    39e0:	98 ad       	sts	0x68, r25
    39e2:	a5 01       	movw	r20, r10
    39e4:	94 01       	movw	r18, r8
    39e6:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    39ea:	29 01       	movw	r4, r18
    39ec:	3a 01       	movw	r6, r20
    39ee:	6b 01       	movw	r12, r22
    39f0:	7c 01       	movw	r14, r24
    39f2:	6d a9       	sts	0x4d, r22
    39f4:	7e a9       	sts	0x4e, r23
    39f6:	8f a9       	sts	0x4f, r24
    39f8:	98 ad       	sts	0x68, r25
    39fa:	a5 01       	movw	r20, r10
    39fc:	94 01       	movw	r18, r8
    39fe:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    3a02:	c3 01       	movw	r24, r6
    3a04:	b2 01       	movw	r22, r4
    3a06:	21 96       	adiw	r28, 0x01	; 1
    3a08:	2c ad       	sts	0x6c, r18
    3a0a:	3d ad       	sts	0x6d, r19
    3a0c:	4e ad       	sts	0x6e, r20
    3a0e:	5f ad       	sts	0x6f, r21
    3a10:	21 97       	sbiw	r28, 0x01	; 1
    3a12:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	76 01       	movw	r14, r12
    3a1c:	dd 24       	eor	r13, r13
    3a1e:	cc 24       	eor	r12, r12
    3a20:	09 a9       	sts	0x49, r16
    3a22:	1a a9       	sts	0x4a, r17
    3a24:	2b a9       	sts	0x4b, r18
    3a26:	3c a9       	sts	0x4c, r19
    3a28:	a9 01       	movw	r20, r18
    3a2a:	66 27       	eor	r22, r22
    3a2c:	77 27       	eor	r23, r23
    3a2e:	c4 2a       	or	r12, r20
    3a30:	d5 2a       	or	r13, r21
    3a32:	e6 2a       	or	r14, r22
    3a34:	f7 2a       	or	r15, r23
    3a36:	c8 16       	cp	r12, r24
    3a38:	d9 06       	cpc	r13, r25
    3a3a:	ea 06       	cpc	r14, r26
    3a3c:	fb 06       	cpc	r15, r27
    3a3e:	78 f5       	brcc	.+94     	; 0x3a9e <__moddi3+0xa4e>
    3a40:	93 01       	movw	r18, r6
    3a42:	82 01       	movw	r16, r4
    3a44:	01 50       	subi	r16, 0x01	; 1
    3a46:	10 40       	sbci	r17, 0x00	; 0
    3a48:	20 40       	sbci	r18, 0x00	; 0
    3a4a:	30 40       	sbci	r19, 0x00	; 0
    3a4c:	0d ab       	sts	0x5d, r16
    3a4e:	1e ab       	sts	0x5e, r17
    3a50:	2f ab       	sts	0x5f, r18
    3a52:	38 af       	sts	0x78, r19
    3a54:	0d a5       	lds	r16, 0x6d
    3a56:	1e a5       	lds	r17, 0x6e
    3a58:	2f a5       	lds	r18, 0x6f
    3a5a:	38 a9       	sts	0x48, r19
    3a5c:	c0 0e       	add	r12, r16
    3a5e:	d1 1e       	adc	r13, r17
    3a60:	e2 1e       	adc	r14, r18
    3a62:	f3 1e       	adc	r15, r19
    3a64:	c0 16       	cp	r12, r16
    3a66:	d1 06       	cpc	r13, r17
    3a68:	e2 06       	cpc	r14, r18
    3a6a:	f3 06       	cpc	r15, r19
    3a6c:	e0 f0       	brcs	.+56     	; 0x3aa6 <__moddi3+0xa56>
    3a6e:	c8 16       	cp	r12, r24
    3a70:	d9 06       	cpc	r13, r25
    3a72:	ea 06       	cpc	r14, r26
    3a74:	fb 06       	cpc	r15, r27
    3a76:	b8 f4       	brcc	.+46     	; 0x3aa6 <__moddi3+0xa56>
    3a78:	93 01       	movw	r18, r6
    3a7a:	82 01       	movw	r16, r4
    3a7c:	02 50       	subi	r16, 0x02	; 2
    3a7e:	10 40       	sbci	r17, 0x00	; 0
    3a80:	20 40       	sbci	r18, 0x00	; 0
    3a82:	30 40       	sbci	r19, 0x00	; 0
    3a84:	0d ab       	sts	0x5d, r16
    3a86:	1e ab       	sts	0x5e, r17
    3a88:	2f ab       	sts	0x5f, r18
    3a8a:	38 af       	sts	0x78, r19
    3a8c:	0d a5       	lds	r16, 0x6d
    3a8e:	1e a5       	lds	r17, 0x6e
    3a90:	2f a5       	lds	r18, 0x6f
    3a92:	38 a9       	sts	0x48, r19
    3a94:	c0 0e       	add	r12, r16
    3a96:	d1 1e       	adc	r13, r17
    3a98:	e2 1e       	adc	r14, r18
    3a9a:	f3 1e       	adc	r15, r19
    3a9c:	04 c0       	rjmp	.+8      	; 0x3aa6 <__moddi3+0xa56>
    3a9e:	4d aa       	sts	0x9d, r20
    3aa0:	5e aa       	sts	0x9e, r21
    3aa2:	6f aa       	sts	0x9f, r22
    3aa4:	78 ae       	sts	0xb8, r23
    3aa6:	c8 1a       	sub	r12, r24
    3aa8:	d9 0a       	sbc	r13, r25
    3aaa:	ea 0a       	sbc	r14, r26
    3aac:	fb 0a       	sbc	r15, r27
    3aae:	c7 01       	movw	r24, r14
    3ab0:	b6 01       	movw	r22, r12
    3ab2:	a5 01       	movw	r20, r10
    3ab4:	94 01       	movw	r18, r8
    3ab6:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    3aba:	29 01       	movw	r4, r18
    3abc:	3a 01       	movw	r6, r20
    3abe:	29 96       	adiw	r28, 0x09	; 9
    3ac0:	6c af       	sts	0x7c, r22
    3ac2:	7d af       	sts	0x7d, r23
    3ac4:	8e af       	sts	0x7e, r24
    3ac6:	9f af       	sts	0x7f, r25
    3ac8:	29 97       	sbiw	r28, 0x09	; 9
    3aca:	c7 01       	movw	r24, r14
    3acc:	b6 01       	movw	r22, r12
    3ace:	a5 01       	movw	r20, r10
    3ad0:	94 01       	movw	r18, r8
    3ad2:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    3ad6:	c3 01       	movw	r24, r6
    3ad8:	b2 01       	movw	r22, r4
    3ada:	21 96       	adiw	r28, 0x01	; 1
    3adc:	2c ad       	sts	0x6c, r18
    3ade:	3d ad       	sts	0x6d, r19
    3ae0:	4e ad       	sts	0x6e, r20
    3ae2:	5f ad       	sts	0x6f, r21
    3ae4:	21 97       	sbiw	r28, 0x01	; 1
    3ae6:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    3aea:	8b 01       	movw	r16, r22
    3aec:	9c 01       	movw	r18, r24
    3aee:	29 96       	adiw	r28, 0x09	; 9
    3af0:	8c ac       	sts	0xac, r24
    3af2:	9d ac       	sts	0xad, r25
    3af4:	ae ac       	sts	0xae, r26
    3af6:	bf ac       	sts	0xaf, r27
    3af8:	29 97       	sbiw	r28, 0x09	; 9
    3afa:	d4 01       	movw	r26, r8
    3afc:	99 27       	eor	r25, r25
    3afe:	88 27       	eor	r24, r24
    3b00:	49 a9       	sts	0x49, r20
    3b02:	5a a9       	sts	0x4a, r21
    3b04:	6b a9       	sts	0x4b, r22
    3b06:	7c a9       	sts	0x4c, r23
    3b08:	60 70       	andi	r22, 0x00	; 0
    3b0a:	70 70       	andi	r23, 0x00	; 0
    3b0c:	84 2b       	or	r24, r20
    3b0e:	95 2b       	or	r25, r21
    3b10:	a6 2b       	or	r26, r22
    3b12:	b7 2b       	or	r27, r23
    3b14:	b3 01       	movw	r22, r6
    3b16:	a2 01       	movw	r20, r4
    3b18:	80 17       	cp	r24, r16
    3b1a:	91 07       	cpc	r25, r17
    3b1c:	a2 07       	cpc	r26, r18
    3b1e:	b3 07       	cpc	r27, r19
    3b20:	00 f5       	brcc	.+64     	; 0x3b62 <__moddi3+0xb12>
    3b22:	41 50       	subi	r20, 0x01	; 1
    3b24:	50 40       	sbci	r21, 0x00	; 0
    3b26:	60 40       	sbci	r22, 0x00	; 0
    3b28:	70 40       	sbci	r23, 0x00	; 0
    3b2a:	ad a4       	lds	r26, 0xad
    3b2c:	be a4       	lds	r27, 0xae
    3b2e:	cf a4       	lds	r28, 0xaf
    3b30:	d8 a8       	sts	0x88, r29
    3b32:	8a 0d       	add	r24, r10
    3b34:	9b 1d       	adc	r25, r11
    3b36:	ac 1d       	adc	r26, r12
    3b38:	bd 1d       	adc	r27, r13
    3b3a:	8a 15       	cp	r24, r10
    3b3c:	9b 05       	cpc	r25, r11
    3b3e:	ac 05       	cpc	r26, r12
    3b40:	bd 05       	cpc	r27, r13
    3b42:	78 f0       	brcs	.+30     	; 0x3b62 <__moddi3+0xb12>
    3b44:	80 17       	cp	r24, r16
    3b46:	91 07       	cpc	r25, r17
    3b48:	a2 07       	cpc	r26, r18
    3b4a:	b3 07       	cpc	r27, r19
    3b4c:	50 f4       	brcc	.+20     	; 0x3b62 <__moddi3+0xb12>
    3b4e:	b3 01       	movw	r22, r6
    3b50:	a2 01       	movw	r20, r4
    3b52:	42 50       	subi	r20, 0x02	; 2
    3b54:	50 40       	sbci	r21, 0x00	; 0
    3b56:	60 40       	sbci	r22, 0x00	; 0
    3b58:	70 40       	sbci	r23, 0x00	; 0
    3b5a:	8a 0d       	add	r24, r10
    3b5c:	9b 1d       	adc	r25, r11
    3b5e:	ac 1d       	adc	r26, r12
    3b60:	bd 1d       	adc	r27, r13
    3b62:	6c 01       	movw	r12, r24
    3b64:	7d 01       	movw	r14, r26
    3b66:	c0 1a       	sub	r12, r16
    3b68:	d1 0a       	sbc	r13, r17
    3b6a:	e2 0a       	sbc	r14, r18
    3b6c:	f3 0a       	sbc	r15, r19
    3b6e:	c9 aa       	sts	0x99, r28
    3b70:	da aa       	sts	0x9a, r29
    3b72:	eb aa       	sts	0x9b, r30
    3b74:	fc aa       	sts	0x9c, r31
    3b76:	ed a8       	sts	0x8d, r30
    3b78:	fe a8       	sts	0x8e, r31
    3b7a:	0f a9       	sts	0x4f, r16
    3b7c:	18 ad       	sts	0x68, r17
    3b7e:	d7 01       	movw	r26, r14
    3b80:	99 27       	eor	r25, r25
    3b82:	88 27       	eor	r24, r24
    3b84:	84 2b       	or	r24, r20
    3b86:	95 2b       	or	r25, r21
    3b88:	a6 2b       	or	r26, r22
    3b8a:	b7 2b       	or	r27, r23
    3b8c:	ff ef       	ldi	r31, 0xFF	; 255
    3b8e:	cf 2e       	mov	r12, r31
    3b90:	ff ef       	ldi	r31, 0xFF	; 255
    3b92:	df 2e       	mov	r13, r31
    3b94:	e1 2c       	mov	r14, r1
    3b96:	f1 2c       	mov	r15, r1
    3b98:	c8 22       	and	r12, r24
    3b9a:	d9 22       	and	r13, r25
    3b9c:	ea 22       	and	r14, r26
    3b9e:	fb 22       	and	r15, r27
    3ba0:	2d 01       	movw	r4, r26
    3ba2:	66 24       	eor	r6, r6
    3ba4:	77 24       	eor	r7, r7
    3ba6:	89 ac       	sts	0xa9, r24
    3ba8:	9a ac       	sts	0xaa, r25
    3baa:	ab ac       	sts	0xab, r26
    3bac:	bc ac       	sts	0xac, r27
    3bae:	0f ef       	ldi	r16, 0xFF	; 255
    3bb0:	1f ef       	ldi	r17, 0xFF	; 255
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	80 22       	and	r8, r16
    3bb8:	91 22       	and	r9, r17
    3bba:	a2 22       	and	r10, r18
    3bbc:	b3 22       	and	r11, r19
    3bbe:	29 ad       	sts	0x69, r18
    3bc0:	3a ad       	sts	0x6a, r19
    3bc2:	4b ad       	sts	0x6b, r20
    3bc4:	5c ad       	sts	0x6c, r21
    3bc6:	8a 01       	movw	r16, r20
    3bc8:	22 27       	eor	r18, r18
    3bca:	33 27       	eor	r19, r19
    3bcc:	0d ab       	sts	0x5d, r16
    3bce:	1e ab       	sts	0x5e, r17
    3bd0:	2f ab       	sts	0x5f, r18
    3bd2:	38 af       	sts	0x78, r19
    3bd4:	c7 01       	movw	r24, r14
    3bd6:	b6 01       	movw	r22, r12
    3bd8:	a5 01       	movw	r20, r10
    3bda:	94 01       	movw	r18, r8
    3bdc:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    3be0:	21 96       	adiw	r28, 0x01	; 1
    3be2:	6c af       	sts	0x7c, r22
    3be4:	7d af       	sts	0x7d, r23
    3be6:	8e af       	sts	0x7e, r24
    3be8:	9f af       	sts	0x7f, r25
    3bea:	21 97       	sbiw	r28, 0x01	; 1
    3bec:	c7 01       	movw	r24, r14
    3bee:	b6 01       	movw	r22, r12
    3bf0:	2d a9       	sts	0x4d, r18
    3bf2:	3e a9       	sts	0x4e, r19
    3bf4:	4f a9       	sts	0x4f, r20
    3bf6:	58 ad       	sts	0x68, r21
    3bf8:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    3bfc:	6b 01       	movw	r12, r22
    3bfe:	7c 01       	movw	r14, r24
    3c00:	c3 01       	movw	r24, r6
    3c02:	b2 01       	movw	r22, r4
    3c04:	a5 01       	movw	r20, r10
    3c06:	94 01       	movw	r18, r8
    3c08:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    3c0c:	4b 01       	movw	r8, r22
    3c0e:	5c 01       	movw	r10, r24
    3c10:	c3 01       	movw	r24, r6
    3c12:	b2 01       	movw	r22, r4
    3c14:	2d a9       	sts	0x4d, r18
    3c16:	3e a9       	sts	0x4e, r19
    3c18:	4f a9       	sts	0x4f, r20
    3c1a:	58 ad       	sts	0x68, r21
    3c1c:	0e 94 3f 1f 	call	0x3e7e	; 0x3e7e <__mulsi3>
    3c20:	ab 01       	movw	r20, r22
    3c22:	bc 01       	movw	r22, r24
    3c24:	c8 0c       	add	r12, r8
    3c26:	d9 1c       	adc	r13, r9
    3c28:	ea 1c       	adc	r14, r10
    3c2a:	fb 1c       	adc	r15, r11
    3c2c:	21 96       	adiw	r28, 0x01	; 1
    3c2e:	0c ad       	sts	0x6c, r16
    3c30:	1d ad       	sts	0x6d, r17
    3c32:	2e ad       	sts	0x6e, r18
    3c34:	3f ad       	sts	0x6f, r19
    3c36:	21 97       	sbiw	r28, 0x01	; 1
    3c38:	c9 01       	movw	r24, r18
    3c3a:	aa 27       	eor	r26, r26
    3c3c:	bb 27       	eor	r27, r27
    3c3e:	c8 0e       	add	r12, r24
    3c40:	d9 1e       	adc	r13, r25
    3c42:	ea 1e       	adc	r14, r26
    3c44:	fb 1e       	adc	r15, r27
    3c46:	c8 14       	cp	r12, r8
    3c48:	d9 04       	cpc	r13, r9
    3c4a:	ea 04       	cpc	r14, r10
    3c4c:	fb 04       	cpc	r15, r11
    3c4e:	20 f4       	brcc	.+8      	; 0x3c58 <__moddi3+0xc08>
    3c50:	40 50       	subi	r20, 0x00	; 0
    3c52:	50 40       	sbci	r21, 0x00	; 0
    3c54:	6f 4f       	sbci	r22, 0xFF	; 255
    3c56:	7f 4f       	sbci	r23, 0xFF	; 255
    3c58:	c7 01       	movw	r24, r14
    3c5a:	aa 27       	eor	r26, r26
    3c5c:	bb 27       	eor	r27, r27
    3c5e:	84 0f       	add	r24, r20
    3c60:	95 1f       	adc	r25, r21
    3c62:	a6 1f       	adc	r26, r22
    3c64:	b7 1f       	adc	r27, r23
    3c66:	76 01       	movw	r14, r12
    3c68:	dd 24       	eor	r13, r13
    3c6a:	cc 24       	eor	r12, r12
    3c6c:	21 96       	adiw	r28, 0x01	; 1
    3c6e:	4c ad       	sts	0x6c, r20
    3c70:	5d ad       	sts	0x6d, r21
    3c72:	6e ad       	sts	0x6e, r22
    3c74:	7f ad       	sts	0x6f, r23
    3c76:	21 97       	sbiw	r28, 0x01	; 1
    3c78:	60 70       	andi	r22, 0x00	; 0
    3c7a:	70 70       	andi	r23, 0x00	; 0
    3c7c:	c4 0e       	add	r12, r20
    3c7e:	d5 1e       	adc	r13, r21
    3c80:	e6 1e       	adc	r14, r22
    3c82:	f7 1e       	adc	r15, r23
    3c84:	89 a8       	sts	0x89, r24
    3c86:	9a a8       	sts	0x8a, r25
    3c88:	ab a8       	sts	0x8b, r26
    3c8a:	bc a8       	sts	0x8c, r27
    3c8c:	88 16       	cp	r8, r24
    3c8e:	99 06       	cpc	r9, r25
    3c90:	aa 06       	cpc	r10, r26
    3c92:	bb 06       	cpc	r11, r27
    3c94:	70 f0       	brcs	.+28     	; 0x3cb2 <__moddi3+0xc62>
    3c96:	88 15       	cp	r24, r8
    3c98:	99 05       	cpc	r25, r9
    3c9a:	aa 05       	cpc	r26, r10
    3c9c:	bb 05       	cpc	r27, r11
    3c9e:	99 f5       	brne	.+102    	; 0x3d06 <__moddi3+0xcb6>
    3ca0:	09 a5       	lds	r16, 0x69
    3ca2:	1a a5       	lds	r17, 0x6a
    3ca4:	2b a5       	lds	r18, 0x6b
    3ca6:	3c a5       	lds	r19, 0x6c
    3ca8:	0c 15       	cp	r16, r12
    3caa:	1d 05       	cpc	r17, r13
    3cac:	2e 05       	cpc	r18, r14
    3cae:	3f 05       	cpc	r19, r15
    3cb0:	50 f5       	brcc	.+84     	; 0x3d06 <__moddi3+0xcb6>
    3cb2:	b7 01       	movw	r22, r14
    3cb4:	a6 01       	movw	r20, r12
    3cb6:	89 ac       	sts	0xa9, r24
    3cb8:	9a ac       	sts	0xaa, r25
    3cba:	ab ac       	sts	0xab, r26
    3cbc:	bc ac       	sts	0xac, r27
    3cbe:	48 19       	sub	r20, r8
    3cc0:	59 09       	sbc	r21, r9
    3cc2:	6a 09       	sbc	r22, r10
    3cc4:	7b 09       	sbc	r23, r11
    3cc6:	8c 01       	movw	r16, r24
    3cc8:	9d 01       	movw	r18, r26
    3cca:	8d a4       	lds	r24, 0xad
    3ccc:	9e a4       	lds	r25, 0xae
    3cce:	af a4       	lds	r26, 0xaf
    3cd0:	b8 a8       	sts	0x88, r27
    3cd2:	08 19       	sub	r16, r8
    3cd4:	19 09       	sbc	r17, r9
    3cd6:	2a 09       	sbc	r18, r10
    3cd8:	3b 09       	sbc	r19, r11
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	a0 e0       	ldi	r26, 0x00	; 0
    3ce0:	b0 e0       	ldi	r27, 0x00	; 0
    3ce2:	c4 16       	cp	r12, r20
    3ce4:	d5 06       	cpc	r13, r21
    3ce6:	e6 06       	cpc	r14, r22
    3ce8:	f7 06       	cpc	r15, r23
    3cea:	18 f0       	brcs	.+6      	; 0x3cf2 <__moddi3+0xca2>
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	90 e0       	ldi	r25, 0x00	; 0
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	58 01       	movw	r10, r16
    3cf4:	69 01       	movw	r12, r18
    3cf6:	a8 1a       	sub	r10, r24
    3cf8:	b9 0a       	sbc	r11, r25
    3cfa:	ca 0a       	sbc	r12, r26
    3cfc:	db 0a       	sbc	r13, r27
    3cfe:	d6 01       	movw	r26, r12
    3d00:	c5 01       	movw	r24, r10
    3d02:	6a 01       	movw	r12, r20
    3d04:	7b 01       	movw	r14, r22
    3d06:	89 a4       	lds	r24, 0xa9
    3d08:	9a a4       	lds	r25, 0xaa
    3d0a:	ab a4       	lds	r26, 0xab
    3d0c:	bc a4       	lds	r27, 0xac
    3d0e:	8c 18       	sub	r8, r12
    3d10:	9d 08       	sbc	r9, r13
    3d12:	ae 08       	sbc	r10, r14
    3d14:	bf 08       	sbc	r11, r15
    3d16:	c9 a8       	sts	0x89, r28
    3d18:	da a8       	sts	0x8a, r29
    3d1a:	eb a8       	sts	0x8b, r30
    3d1c:	fc a8       	sts	0x8c, r31
    3d1e:	c8 1a       	sub	r12, r24
    3d20:	d9 0a       	sbc	r13, r25
    3d22:	ea 0a       	sbc	r14, r26
    3d24:	fb 0a       	sbc	r15, r27
    3d26:	d7 01       	movw	r26, r14
    3d28:	c6 01       	movw	r24, r12
    3d2a:	41 e0       	ldi	r20, 0x01	; 1
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	70 e0       	ldi	r23, 0x00	; 0
    3d32:	e9 a4       	lds	r30, 0xa9
    3d34:	fa a4       	lds	r31, 0xaa
    3d36:	0b a5       	lds	r16, 0x6b
    3d38:	1c a5       	lds	r17, 0x6c
    3d3a:	e8 14       	cp	r14, r8
    3d3c:	f9 04       	cpc	r15, r9
    3d3e:	0a 05       	cpc	r16, r10
    3d40:	1b 05       	cpc	r17, r11
    3d42:	18 f0       	brcs	.+6      	; 0x3d4a <__moddi3+0xcfa>
    3d44:	40 e0       	ldi	r20, 0x00	; 0
    3d46:	50 e0       	ldi	r21, 0x00	; 0
    3d48:	ba 01       	movw	r22, r20
    3d4a:	84 1b       	sub	r24, r20
    3d4c:	95 0b       	sbc	r25, r21
    3d4e:	a6 0b       	sbc	r26, r22
    3d50:	b7 0b       	sbc	r27, r23
    3d52:	8c 01       	movw	r16, r24
    3d54:	9d 01       	movw	r18, r26
    3d56:	02 2c       	mov	r0, r2
    3d58:	04 c0       	rjmp	.+8      	; 0x3d62 <__moddi3+0xd12>
    3d5a:	00 0f       	add	r16, r16
    3d5c:	11 1f       	adc	r17, r17
    3d5e:	22 1f       	adc	r18, r18
    3d60:	33 1f       	adc	r19, r19
    3d62:	0a 94       	dec	r0
    3d64:	d2 f7       	brpl	.-12     	; 0x3d5a <__moddi3+0xd0a>
    3d66:	03 2c       	mov	r0, r3
    3d68:	04 c0       	rjmp	.+8      	; 0x3d72 <__moddi3+0xd22>
    3d6a:	b6 94       	lsr	r11
    3d6c:	a7 94       	ror	r10
    3d6e:	97 94       	ror	r9
    3d70:	87 94       	ror	r8
    3d72:	0a 94       	dec	r0
    3d74:	d2 f7       	brpl	.-12     	; 0x3d6a <__moddi3+0xd1a>
    3d76:	08 29       	or	r16, r8
    3d78:	19 29       	or	r17, r9
    3d7a:	2a 29       	or	r18, r10
    3d7c:	3b 29       	or	r19, r11
    3d7e:	09 83       	std	Y+1, r16	; 0x01
    3d80:	1a 83       	std	Y+2, r17	; 0x02
    3d82:	2b 83       	std	Y+3, r18	; 0x03
    3d84:	3c 83       	std	Y+4, r19	; 0x04
    3d86:	6c 01       	movw	r12, r24
    3d88:	7d 01       	movw	r14, r26
    3d8a:	03 2c       	mov	r0, r3
    3d8c:	04 c0       	rjmp	.+8      	; 0x3d96 <__moddi3+0xd46>
    3d8e:	f6 94       	lsr	r15
    3d90:	e7 94       	ror	r14
    3d92:	d7 94       	ror	r13
    3d94:	c7 94       	ror	r12
    3d96:	0a 94       	dec	r0
    3d98:	d2 f7       	brpl	.-12     	; 0x3d8e <__moddi3+0xd3e>
    3d9a:	cd 82       	std	Y+5, r12	; 0x05
    3d9c:	de 82       	std	Y+6, r13	; 0x06
    3d9e:	ef 82       	std	Y+7, r14	; 0x07
    3da0:	f8 86       	std	Y+8, r15	; 0x08
    3da2:	3a 81       	ldd	r19, Y+2	; 0x02
    3da4:	4b 81       	ldd	r20, Y+3	; 0x03
    3da6:	5c 81       	ldd	r21, Y+4	; 0x04
    3da8:	6c 2d       	mov	r22, r12
    3daa:	7e 81       	ldd	r23, Y+6	; 0x06
    3dac:	8f 81       	ldd	r24, Y+7	; 0x07
    3dae:	98 85       	ldd	r25, Y+8	; 0x08
    3db0:	25 96       	adiw	r28, 0x05	; 5
    3db2:	8c ac       	sts	0xac, r24
    3db4:	9d ac       	sts	0xad, r25
    3db6:	ae ac       	sts	0xae, r26
    3db8:	bf ac       	sts	0xaf, r27
    3dba:	25 97       	sbiw	r28, 0x05	; 5
    3dbc:	81 14       	cp	r8, r1
    3dbe:	91 04       	cpc	r9, r1
    3dc0:	a1 04       	cpc	r10, r1
    3dc2:	b1 04       	cpc	r11, r1
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <__moddi3+0xd78>
    3dc6:	55 c0       	rjmp	.+170    	; 0x3e72 <__moddi3+0xe22>
    3dc8:	01 95       	neg	r16
    3dca:	f1 e0       	ldi	r31, 0x01	; 1
    3dcc:	10 16       	cp	r1, r16
    3dce:	08 f0       	brcs	.+2      	; 0x3dd2 <__moddi3+0xd82>
    3dd0:	f0 e0       	ldi	r31, 0x00	; 0
    3dd2:	23 2f       	mov	r18, r19
    3dd4:	21 95       	neg	r18
    3dd6:	e1 e0       	ldi	r30, 0x01	; 1
    3dd8:	12 16       	cp	r1, r18
    3dda:	08 f0       	brcs	.+2      	; 0x3dde <__moddi3+0xd8e>
    3ddc:	e0 e0       	ldi	r30, 0x00	; 0
    3dde:	32 2f       	mov	r19, r18
    3de0:	3f 1b       	sub	r19, r31
    3de2:	f1 e0       	ldi	r31, 0x01	; 1
    3de4:	23 17       	cp	r18, r19
    3de6:	08 f0       	brcs	.+2      	; 0x3dea <__moddi3+0xd9a>
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	ef 2b       	or	r30, r31
    3dec:	f4 2f       	mov	r31, r20
    3dee:	f1 95       	neg	r31
    3df0:	21 e0       	ldi	r18, 0x01	; 1
    3df2:	1f 16       	cp	r1, r31
    3df4:	08 f0       	brcs	.+2      	; 0x3df8 <__moddi3+0xda8>
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	4f 2f       	mov	r20, r31
    3dfa:	4e 1b       	sub	r20, r30
    3dfc:	e1 e0       	ldi	r30, 0x01	; 1
    3dfe:	f4 17       	cp	r31, r20
    3e00:	08 f0       	brcs	.+2      	; 0x3e04 <__moddi3+0xdb4>
    3e02:	e0 e0       	ldi	r30, 0x00	; 0
    3e04:	2e 2b       	or	r18, r30
    3e06:	51 95       	neg	r21
    3e08:	e1 e0       	ldi	r30, 0x01	; 1
    3e0a:	15 16       	cp	r1, r21
    3e0c:	08 f0       	brcs	.+2      	; 0x3e10 <__moddi3+0xdc0>
    3e0e:	e0 e0       	ldi	r30, 0x00	; 0
    3e10:	b5 2f       	mov	r27, r21
    3e12:	b2 1b       	sub	r27, r18
    3e14:	21 e0       	ldi	r18, 0x01	; 1
    3e16:	5b 17       	cp	r21, r27
    3e18:	08 f0       	brcs	.+2      	; 0x3e1c <__moddi3+0xdcc>
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	e2 2b       	or	r30, r18
    3e1e:	61 95       	neg	r22
    3e20:	21 e0       	ldi	r18, 0x01	; 1
    3e22:	16 16       	cp	r1, r22
    3e24:	08 f0       	brcs	.+2      	; 0x3e28 <__moddi3+0xdd8>
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	c6 2e       	mov	r12, r22
    3e2a:	ce 1a       	sub	r12, r30
    3e2c:	51 e0       	ldi	r21, 0x01	; 1
    3e2e:	6c 15       	cp	r22, r12
    3e30:	08 f0       	brcs	.+2      	; 0x3e34 <__moddi3+0xde4>
    3e32:	50 e0       	ldi	r21, 0x00	; 0
    3e34:	25 2b       	or	r18, r21
    3e36:	71 95       	neg	r23
    3e38:	e1 e0       	ldi	r30, 0x01	; 1
    3e3a:	17 16       	cp	r1, r23
    3e3c:	08 f0       	brcs	.+2      	; 0x3e40 <__moddi3+0xdf0>
    3e3e:	e0 e0       	ldi	r30, 0x00	; 0
    3e40:	a7 2f       	mov	r26, r23
    3e42:	a2 1b       	sub	r26, r18
    3e44:	21 e0       	ldi	r18, 0x01	; 1
    3e46:	7a 17       	cp	r23, r26
    3e48:	08 f0       	brcs	.+2      	; 0x3e4c <__moddi3+0xdfc>
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	e2 2b       	or	r30, r18
    3e4e:	f8 2f       	mov	r31, r24
    3e50:	f1 95       	neg	r31
    3e52:	21 e0       	ldi	r18, 0x01	; 1
    3e54:	1f 16       	cp	r1, r31
    3e56:	08 f0       	brcs	.+2      	; 0x3e5a <__moddi3+0xe0a>
    3e58:	20 e0       	ldi	r18, 0x00	; 0
    3e5a:	8f 2f       	mov	r24, r31
    3e5c:	8e 1b       	sub	r24, r30
    3e5e:	51 e0       	ldi	r21, 0x01	; 1
    3e60:	f8 17       	cp	r31, r24
    3e62:	08 f0       	brcs	.+2      	; 0x3e66 <__moddi3+0xe16>
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	25 2b       	or	r18, r21
    3e68:	91 95       	neg	r25
    3e6a:	5b 2f       	mov	r21, r27
    3e6c:	6c 2d       	mov	r22, r12
    3e6e:	7a 2f       	mov	r23, r26
    3e70:	92 1b       	sub	r25, r18
    3e72:	20 2f       	mov	r18, r16
    3e74:	c8 5b       	subi	r28, 0xB8	; 184
    3e76:	df 4f       	sbci	r29, 0xFF	; 255
    3e78:	e2 e1       	ldi	r30, 0x12	; 18
    3e7a:	0c 94 9c 1f 	jmp	0x3f38	; 0x3f38 <__epilogue_restores__>

00003e7e <__mulsi3>:
    3e7e:	62 9f       	mul	r22, r18
    3e80:	d0 01       	movw	r26, r0
    3e82:	73 9f       	mul	r23, r19
    3e84:	f0 01       	movw	r30, r0
    3e86:	82 9f       	mul	r24, r18
    3e88:	e0 0d       	add	r30, r0
    3e8a:	f1 1d       	adc	r31, r1
    3e8c:	64 9f       	mul	r22, r20
    3e8e:	e0 0d       	add	r30, r0
    3e90:	f1 1d       	adc	r31, r1
    3e92:	92 9f       	mul	r25, r18
    3e94:	f0 0d       	add	r31, r0
    3e96:	83 9f       	mul	r24, r19
    3e98:	f0 0d       	add	r31, r0
    3e9a:	74 9f       	mul	r23, r20
    3e9c:	f0 0d       	add	r31, r0
    3e9e:	65 9f       	mul	r22, r21
    3ea0:	f0 0d       	add	r31, r0
    3ea2:	99 27       	eor	r25, r25
    3ea4:	72 9f       	mul	r23, r18
    3ea6:	b0 0d       	add	r27, r0
    3ea8:	e1 1d       	adc	r30, r1
    3eaa:	f9 1f       	adc	r31, r25
    3eac:	63 9f       	mul	r22, r19
    3eae:	b0 0d       	add	r27, r0
    3eb0:	e1 1d       	adc	r30, r1
    3eb2:	f9 1f       	adc	r31, r25
    3eb4:	bd 01       	movw	r22, r26
    3eb6:	cf 01       	movw	r24, r30
    3eb8:	11 24       	eor	r1, r1
    3eba:	08 95       	ret

00003ebc <__udivmodsi4>:
    3ebc:	a1 e2       	ldi	r26, 0x21	; 33
    3ebe:	1a 2e       	mov	r1, r26
    3ec0:	aa 1b       	sub	r26, r26
    3ec2:	bb 1b       	sub	r27, r27
    3ec4:	fd 01       	movw	r30, r26
    3ec6:	0d c0       	rjmp	.+26     	; 0x3ee2 <__udivmodsi4_ep>

00003ec8 <__udivmodsi4_loop>:
    3ec8:	aa 1f       	adc	r26, r26
    3eca:	bb 1f       	adc	r27, r27
    3ecc:	ee 1f       	adc	r30, r30
    3ece:	ff 1f       	adc	r31, r31
    3ed0:	a2 17       	cp	r26, r18
    3ed2:	b3 07       	cpc	r27, r19
    3ed4:	e4 07       	cpc	r30, r20
    3ed6:	f5 07       	cpc	r31, r21
    3ed8:	20 f0       	brcs	.+8      	; 0x3ee2 <__udivmodsi4_ep>
    3eda:	a2 1b       	sub	r26, r18
    3edc:	b3 0b       	sbc	r27, r19
    3ede:	e4 0b       	sbc	r30, r20
    3ee0:	f5 0b       	sbc	r31, r21

00003ee2 <__udivmodsi4_ep>:
    3ee2:	66 1f       	adc	r22, r22
    3ee4:	77 1f       	adc	r23, r23
    3ee6:	88 1f       	adc	r24, r24
    3ee8:	99 1f       	adc	r25, r25
    3eea:	1a 94       	dec	r1
    3eec:	69 f7       	brne	.-38     	; 0x3ec8 <__udivmodsi4_loop>
    3eee:	60 95       	com	r22
    3ef0:	70 95       	com	r23
    3ef2:	80 95       	com	r24
    3ef4:	90 95       	com	r25
    3ef6:	9b 01       	movw	r18, r22
    3ef8:	ac 01       	movw	r20, r24
    3efa:	bd 01       	movw	r22, r26
    3efc:	cf 01       	movw	r24, r30
    3efe:	08 95       	ret

00003f00 <__prologue_saves__>:
    3f00:	2f 92       	push	r2
    3f02:	3f 92       	push	r3
    3f04:	4f 92       	push	r4
    3f06:	5f 92       	push	r5
    3f08:	6f 92       	push	r6
    3f0a:	7f 92       	push	r7
    3f0c:	8f 92       	push	r8
    3f0e:	9f 92       	push	r9
    3f10:	af 92       	push	r10
    3f12:	bf 92       	push	r11
    3f14:	cf 92       	push	r12
    3f16:	df 92       	push	r13
    3f18:	ef 92       	push	r14
    3f1a:	ff 92       	push	r15
    3f1c:	0f 93       	push	r16
    3f1e:	1f 93       	push	r17
    3f20:	cf 93       	push	r28
    3f22:	df 93       	push	r29
    3f24:	cd b7       	in	r28, 0x3d	; 61
    3f26:	de b7       	in	r29, 0x3e	; 62
    3f28:	ca 1b       	sub	r28, r26
    3f2a:	db 0b       	sbc	r29, r27
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	f8 94       	cli
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	09 94       	ijmp

00003f38 <__epilogue_restores__>:
    3f38:	2a 88       	ldd	r2, Y+18	; 0x12
    3f3a:	39 88       	ldd	r3, Y+17	; 0x11
    3f3c:	48 88       	ldd	r4, Y+16	; 0x10
    3f3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f40:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f42:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f44:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f46:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f48:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f4a:	b9 84       	ldd	r11, Y+9	; 0x09
    3f4c:	c8 84       	ldd	r12, Y+8	; 0x08
    3f4e:	df 80       	ldd	r13, Y+7	; 0x07
    3f50:	ee 80       	ldd	r14, Y+6	; 0x06
    3f52:	fd 80       	ldd	r15, Y+5	; 0x05
    3f54:	0c 81       	ldd	r16, Y+4	; 0x04
    3f56:	1b 81       	ldd	r17, Y+3	; 0x03
    3f58:	aa 81       	ldd	r26, Y+2	; 0x02
    3f5a:	b9 81       	ldd	r27, Y+1	; 0x01
    3f5c:	ce 0f       	add	r28, r30
    3f5e:	d1 1d       	adc	r29, r1
    3f60:	0f b6       	in	r0, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	de bf       	out	0x3e, r29	; 62
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	cd bf       	out	0x3d, r28	; 61
    3f6a:	ed 01       	movw	r28, r26
    3f6c:	08 95       	ret

00003f6e <strrev>:
    3f6e:	dc 01       	movw	r26, r24
    3f70:	fc 01       	movw	r30, r24
    3f72:	67 2f       	mov	r22, r23
    3f74:	71 91       	ld	r23, Z+
    3f76:	77 23       	and	r23, r23
    3f78:	e1 f7       	brne	.-8      	; 0x3f72 <strrev+0x4>
    3f7a:	32 97       	sbiw	r30, 0x02	; 2
    3f7c:	04 c0       	rjmp	.+8      	; 0x3f86 <strrev+0x18>
    3f7e:	7c 91       	ld	r23, X
    3f80:	6d 93       	st	X+, r22
    3f82:	70 83       	st	Z, r23
    3f84:	62 91       	ld	r22, -Z
    3f86:	ae 17       	cp	r26, r30
    3f88:	bf 07       	cpc	r27, r31
    3f8a:	c8 f3       	brcs	.-14     	; 0x3f7e <strrev+0x10>
    3f8c:	08 95       	ret

00003f8e <_exit>:
    3f8e:	f8 94       	cli

00003f90 <__stop_program>:
    3f90:	ff cf       	rjmp	.-2      	; 0x3f90 <__stop_program>
